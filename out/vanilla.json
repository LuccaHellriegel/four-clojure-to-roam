[{"create-time":1614435028043,"edit-time:":1614435028043,"uid":"hnSLgtZre75","children":[{"edit-time:":1614435028046,"uid":"6mmoulmvpBi","string":"**Problems:**","children":[{"edit-time:":1614435028044,"uid":"3cisW2GANVG","string":"[[4clojure - Problem 1]]"},{"edit-time:":1614435028044,"uid":"MIkYzM7tmc0","string":"[[4clojure - Problem 2]]"},{"edit-time:":1614435028044,"uid":"rAqGG3DFNtI","string":"[[4clojure - Problem 3]]"},{"edit-time:":1614435028044,"uid":"P11TEC5_0kb","string":"[[4clojure - Problem 4]]"},{"edit-time:":1614435028044,"uid":"-vI5mY4vK_0","string":"[[4clojure - Problem 5]]"},{"edit-time:":1614435028044,"uid":"bYwNGpPb6KV","string":"[[4clojure - Problem 6]]"},{"edit-time:":1614435028044,"uid":"D2L7TLkETvt","string":"[[4clojure - Problem 7]]"},{"edit-time:":1614435028044,"uid":"4tMvf4IQHJm","string":"[[4clojure - Problem 8]]"},{"edit-time:":1614435028044,"uid":"x2Jb9rFXigK","string":"[[4clojure - Problem 9]]"},{"edit-time:":1614435028044,"uid":"vvPuu-AACxH","string":"[[4clojure - Problem 10]]"},{"edit-time:":1614435028044,"uid":"v8O-g1a-gYt","string":"[[4clojure - Problem 11]]"},{"edit-time:":1614435028044,"uid":"FkgsYkMFQEv","string":"[[4clojure - Problem 12]]"},{"edit-time:":1614435028044,"uid":"KW32oeg75p8","string":"[[4clojure - Problem 13]]"},{"edit-time:":1614435028044,"uid":"Ie0-A8Vrlly","string":"[[4clojure - Problem 14]]"},{"edit-time:":1614435028044,"uid":"rVd0daCHQHt","string":"[[4clojure - Problem 15]]"},{"edit-time:":1614435028044,"uid":"HQaJoRxKYlC","string":"[[4clojure - Problem 16]]"},{"edit-time:":1614435028044,"uid":"xQugEN0R8F_","string":"[[4clojure - Problem 17]]"},{"edit-time:":1614435028044,"uid":"TNWLJwJ7Gxs","string":"[[4clojure - Problem 18]]"},{"edit-time:":1614435028044,"uid":"xWpwR9IIf8X","string":"[[4clojure - Problem 19]]"},{"edit-time:":1614435028044,"uid":"ay8xpAzohII","string":"[[4clojure - Problem 20]]"},{"edit-time:":1614435028044,"uid":"sOjh77Vc6iM","string":"[[4clojure - Problem 21]]"},{"edit-time:":1614435028044,"uid":"ghZD9jFkxry","string":"[[4clojure - Problem 22]]"},{"edit-time:":1614435028044,"uid":"wfFXUIVH1IL","string":"[[4clojure - Problem 23]]"},{"edit-time:":1614435028044,"uid":"CaHiDrogkEn","string":"[[4clojure - Problem 24]]"},{"edit-time:":1614435028044,"uid":"E46kbFWduWl","string":"[[4clojure - Problem 25]]"},{"edit-time:":1614435028044,"uid":"3GLoK4-IPJm","string":"[[4clojure - Problem 26]]"},{"edit-time:":1614435028044,"uid":"M6Dfs6Trs2t","string":"[[4clojure - Problem 27]]"},{"edit-time:":1614435028044,"uid":"VdTRjSTaemd","string":"[[4clojure - Problem 28]]"},{"edit-time:":1614435028044,"uid":"VFSekf4H38G","string":"[[4clojure - Problem 29]]"},{"edit-time:":1614435028044,"uid":"TDaLwG6HsqH","string":"[[4clojure - Problem 30]]"},{"edit-time:":1614435028044,"uid":"Yj9nbOxdE0V","string":"[[4clojure - Problem 31]]"},{"edit-time:":1614435028044,"uid":"d2A2bA-gIng","string":"[[4clojure - Problem 32]]"},{"edit-time:":1614435028044,"uid":"7i0Csxcu-bE","string":"[[4clojure - Problem 33]]"},{"edit-time:":1614435028044,"uid":"jhNBHiuxEbr","string":"[[4clojure - Problem 34]]"},{"edit-time:":1614435028044,"uid":"ddOP_5AxBtT","string":"[[4clojure - Problem 35]]"},{"edit-time:":1614435028044,"uid":"f7y8Lsbx32c","string":"[[4clojure - Problem 36]]"},{"edit-time:":1614435028044,"uid":"yXS65WQdjC6","string":"[[4clojure - Problem 37]]"},{"edit-time:":1614435028044,"uid":"W9_VfVc-kJK","string":"[[4clojure - Problem 38]]"},{"edit-time:":1614435028044,"uid":"OtBo-y8qD3x","string":"[[4clojure - Problem 39]]"},{"edit-time:":1614435028044,"uid":"1IGyQRDT79Y","string":"[[4clojure - Problem 40]]"},{"edit-time:":1614435028044,"uid":"vonS5-hLDbG","string":"[[4clojure - Problem 41]]"},{"edit-time:":1614435028044,"uid":"laYPUR4RUDo","string":"[[4clojure - Problem 42]]"},{"edit-time:":1614435028044,"uid":"9EqcMksQ9q5","string":"[[4clojure - Problem 43]]"},{"edit-time:":1614435028044,"uid":"9nARqTZeVw-","string":"[[4clojure - Problem 44]]"},{"edit-time:":1614435028044,"uid":"CdJN27FtZjb","string":"[[4clojure - Problem 45]]"},{"edit-time:":1614435028044,"uid":"A6XMQVfYtSK","string":"[[4clojure - Problem 46]]"},{"edit-time:":1614435028044,"uid":"0z37R7BvjO5","string":"[[4clojure - Problem 47]]"},{"edit-time:":1614435028044,"uid":"-Szcj5w_BH0","string":"[[4clojure - Problem 48]]"},{"edit-time:":1614435028044,"uid":"0ULY1_bozpj","string":"[[4clojure - Problem 49]]"},{"edit-time:":1614435028044,"uid":"yRY5sTE3k66","string":"[[4clojure - Problem 50]]"},{"edit-time:":1614435028044,"uid":"vwaOlVpMxPJ","string":"[[4clojure - Problem 51]]"},{"edit-time:":1614435028044,"uid":"QX7FM_p9b_R","string":"[[4clojure - Problem 52]]"},{"edit-time:":1614435028044,"uid":"PpuT-J_E8jS","string":"[[4clojure - Problem 53]]"},{"edit-time:":1614435028044,"uid":"P79aJN1qfwv","string":"[[4clojure - Problem 54]]"},{"edit-time:":1614435028044,"uid":"8Roxq-UQtOU","string":"[[4clojure - Problem 55]]"},{"edit-time:":1614435028044,"uid":"TEOkUdvLH43","string":"[[4clojure - Problem 56]]"},{"edit-time:":1614435028044,"uid":"LV7e9B2JWxX","string":"[[4clojure - Problem 57]]"},{"edit-time:":1614435028044,"uid":"988kql8KTXz","string":"[[4clojure - Problem 58]]"},{"edit-time:":1614435028044,"uid":"hggOqc1EbuE","string":"[[4clojure - Problem 59]]"},{"edit-time:":1614435028044,"uid":"9XFWKygWR9c","string":"[[4clojure - Problem 60]]"},{"edit-time:":1614435028044,"uid":"BS9iTGpFvbz","string":"[[4clojure - Problem 61]]"},{"edit-time:":1614435028044,"uid":"EOZyqs_z73q","string":"[[4clojure - Problem 62]]"},{"edit-time:":1614435028044,"uid":"Rg5NUkzvIzq","string":"[[4clojure - Problem 63]]"},{"edit-time:":1614435028044,"uid":"DCqaN9hm0Ak","string":"[[4clojure - Problem 64]]"},{"edit-time:":1614435028044,"uid":"Z_v4eefkdyP","string":"[[4clojure - Problem 65]]"},{"edit-time:":1614435028044,"uid":"AQlye-GR46H","string":"[[4clojure - Problem 66]]"},{"edit-time:":1614435028046,"uid":"AE1XOdcHvYN","string":"[[4clojure - Problem 67]]"},{"edit-time:":1614435028046,"uid":"R9E4ITm2A_x","string":"[[4clojure - Problem 68]]"},{"edit-time:":1614435028046,"uid":"mmctlGLoxdO","string":"[[4clojure - Problem 69]]"},{"edit-time:":1614435028046,"uid":"aClwU06Na7D","string":"[[4clojure - Problem 70]]"},{"edit-time:":1614435028046,"uid":"aDXbKKjkPlH","string":"[[4clojure - Problem 71]]"},{"edit-time:":1614435028046,"uid":"JEBMFc2IcKi","string":"[[4clojure - Problem 72]]"},{"edit-time:":1614435028046,"uid":"nQ557f3Tgtk","string":"[[4clojure - Problem 73]]"},{"edit-time:":1614435028046,"uid":"J1Yi2GKFFtd","string":"[[4clojure - Problem 74]]"},{"edit-time:":1614435028046,"uid":"jYxPUpmPnm9","string":"[[4clojure - Problem 75]]"},{"edit-time:":1614435028046,"uid":"8p_EElZzDjA","string":"[[4clojure - Problem 76]]"},{"edit-time:":1614435028046,"uid":"c1gX2vodIua","string":"[[4clojure - Problem 77]]"},{"edit-time:":1614435028046,"uid":"DPdrc1TiiXt","string":"[[4clojure - Problem 78]]"},{"edit-time:":1614435028046,"uid":"cI2I8veYjBg","string":"[[4clojure - Problem 79]]"},{"edit-time:":1614435028046,"uid":"uNABpZEuY7X","string":"[[4clojure - Problem 80]]"},{"edit-time:":1614435028046,"uid":"UQ4xGuiUHiY","string":"[[4clojure - Problem 81]]"},{"edit-time:":1614435028046,"uid":"FHt3znMmfqC","string":"[[4clojure - Problem 82]]"},{"edit-time:":1614435028046,"uid":"VMd1VT5PW20","string":"[[4clojure - Problem 83]]"},{"edit-time:":1614435028046,"uid":"WrxiJV3xMqg","string":"[[4clojure - Problem 84]]"},{"edit-time:":1614435028046,"uid":"Jt8o3NPHE5G","string":"[[4clojure - Problem 85]]"},{"edit-time:":1614435028046,"uid":"HdLrU97seWF","string":"[[4clojure - Problem 86]]"},{"edit-time:":1614435028046,"uid":"sikeRhDYtKP","string":"[[4clojure - Problem 88]]"},{"edit-time:":1614435028046,"uid":"5knlR801syi","string":"[[4clojure - Problem 89]]"},{"edit-time:":1614435028046,"uid":"FZoyCHraL11","string":"[[4clojure - Problem 90]]"},{"edit-time:":1614435028046,"uid":"okzGeLdBz-5","string":"[[4clojure - Problem 91]]"},{"edit-time:":1614435028046,"uid":"6b6kc7VIIb3","string":"[[4clojure - Problem 92]]"},{"edit-time:":1614435028046,"uid":"RoEZlVG2-yi","string":"[[4clojure - Problem 93]]"},{"edit-time:":1614435028046,"uid":"UQ00RR484jH","string":"[[4clojure - Problem 94]]"},{"edit-time:":1614435028046,"uid":"vQVM7pXg3nS","string":"[[4clojure - Problem 95]]"},{"edit-time:":1614435028046,"uid":"vIvWIu2G70h","string":"[[4clojure - Problem 96]]"},{"edit-time:":1614435028046,"uid":"ZzIYH-BTQTQ","string":"[[4clojure - Problem 97]]"},{"edit-time:":1614435028046,"uid":"Ss6X_Ybo9yP","string":"[[4clojure - Problem 98]]"},{"edit-time:":1614435028046,"uid":"FO6siGDK6Hr","string":"[[4clojure - Problem 99]]"},{"edit-time:":1614435028046,"uid":"nlCeNbmqE_C","string":"[[4clojure - Problem 100]]"},{"edit-time:":1614435028046,"uid":"9r1QiCUNgfI","string":"[[4clojure - Problem 101]]"},{"edit-time:":1614435028046,"uid":"mGz4-E8IMbg","string":"[[4clojure - Problem 102]]"},{"edit-time:":1614435028046,"uid":"1LQQYXofJ4i","string":"[[4clojure - Problem 103]]"},{"edit-time:":1614435028046,"uid":"T_cBsCbcUHj","string":"[[4clojure - Problem 104]]"},{"edit-time:":1614435028046,"uid":"X00anT-an8U","string":"[[4clojure - Problem 105]]"},{"edit-time:":1614435028046,"uid":"3G2ZFRaQpiQ","string":"[[4clojure - Problem 106]]"},{"edit-time:":1614435028046,"uid":"Dh39WbeF10O","string":"[[4clojure - Problem 107]]"},{"edit-time:":1614435028046,"uid":"UPHiWEb9NiD","string":"[[4clojure - Problem 108]]"},{"edit-time:":1614435028046,"uid":"rpWzw3QMC-N","string":"[[4clojure - Problem 110]]"},{"edit-time:":1614435028046,"uid":"CGloAMw3lp9","string":"[[4clojure - Problem 111]]"},{"edit-time:":1614435028046,"uid":"dCgI9TfTr23","string":"[[4clojure - Problem 112]]"},{"edit-time:":1614435028046,"uid":"5XevNSoEBTi","string":"[[4clojure - Problem 113]]"},{"edit-time:":1614435028046,"uid":"7NPz-xnQBuq","string":"[[4clojure - Problem 114]]"},{"edit-time:":1614435028046,"uid":"taN3tcMrg-s","string":"[[4clojure - Problem 115]]"},{"edit-time:":1614435028046,"uid":"UUJQUVjUiZr","string":"[[4clojure - Problem 116]]"},{"edit-time:":1614435028046,"uid":"fOvcVTHAQVE","string":"[[4clojure - Problem 117]]"},{"edit-time:":1614435028046,"uid":"WQxmUd9SKo0","string":"[[4clojure - Problem 118]]"},{"edit-time:":1614435028046,"uid":"K_i1-gcxAo2","string":"[[4clojure - Problem 119]]"},{"edit-time:":1614435028046,"uid":"lO6QCwlEuPL","string":"[[4clojure - Problem 120]]"},{"edit-time:":1614435028046,"uid":"KjYnry3Hnid","string":"[[4clojure - Problem 121]]"},{"edit-time:":1614435028046,"uid":"ym9tBr3HoXc","string":"[[4clojure - Problem 122]]"},{"edit-time:":1614435028046,"uid":"xyRvzbuXnBZ","string":"[[4clojure - Problem 124]]"},{"edit-time:":1614435028046,"uid":"PtNHuAmfhic","string":"[[4clojure - Problem 125]]"},{"edit-time:":1614435028046,"uid":"6D65VCiIs7n","string":"[[4clojure - Problem 126]]"},{"edit-time:":1614435028046,"uid":"U3au7ALEXt1","string":"[[4clojure - Problem 127]]"},{"edit-time:":1614435028046,"uid":"VlSLk2DGhyp","string":"[[4clojure - Problem 128]]"},{"edit-time:":1614435028046,"uid":"8aWs6vQB9eD","string":"[[4clojure - Problem 130]]"},{"edit-time:":1614435028046,"uid":"k7qzzrIgJWa","string":"[[4clojure - Problem 131]]"},{"edit-time:":1614435028046,"uid":"w1a3DsQw4zc","string":"[[4clojure - Problem 132]]"},{"edit-time:":1614435028046,"uid":"a_P9Efp3wLt","string":"[[4clojure - Problem 134]]"},{"edit-time:":1614435028046,"uid":"B9hD0YQsvdY","string":"[[4clojure - Problem 135]]"},{"edit-time:":1614435028046,"uid":"vbIY5nJiQ6z","string":"[[4clojure - Problem 137]]"},{"edit-time:":1614435028046,"uid":"cmOaUyH2D00","string":"[[4clojure - Problem 138]]"},{"edit-time:":1614435028046,"uid":"19vVBFcEizh","string":"[[4clojure - Problem 140]]"},{"edit-time:":1614435028046,"uid":"x7LKQXqUn_R","string":"[[4clojure - Problem 141]]"},{"edit-time:":1614435028046,"uid":"3OSFw6DanMV","string":"[[4clojure - Problem 143]]"},{"edit-time:":1614435028046,"uid":"y3qhzElb-Vw","string":"[[4clojure - Problem 144]]"},{"edit-time:":1614435028046,"uid":"XV_z4aVuiz4","string":"[[4clojure - Problem 145]]"},{"edit-time:":1614435028046,"uid":"wYiX3vuPTXg","string":"[[4clojure - Problem 146]]"},{"edit-time:":1614435028046,"uid":"aDUFzcxl0Fi","string":"[[4clojure - Problem 147]]"},{"edit-time:":1614435028046,"uid":"QrcS5NLPBkW","string":"[[4clojure - Problem 148]]"},{"edit-time:":1614435028046,"uid":"4yVq-9UQ1Zj","string":"[[4clojure - Problem 150]]"},{"edit-time:":1614435028046,"uid":"4xj-kSGboKH","string":"[[4clojure - Problem 152]]"},{"edit-time:":1614435028046,"uid":"W_kN5zMJw9T","string":"[[4clojure - Problem 153]]"},{"edit-time:":1614435028046,"uid":"dX7AGejMGSe","string":"[[4clojure - Problem 156]]"}]}],"title":"4clojure - Problems"},{"create-time":1614435028046,"edit-time:":1614435028046,"uid":"zbxCFpCmRv0","children":[{"edit-time:":1614435028046,"uid":"oL_bUHO0t3U","string":"**Title:** Nothing but the Truth"},{"edit-time:":1614435028046,"uid":"c_3AnGW6KmD","string":"**URL:** https://www.4clojure.com/problem/1"},{"edit-time:":1614435028046,"uid":"AtE6IYZ24Qx","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028046,"uid":"9GUVTSK65i4","string":"Difficulty: Elementary"}]},{"edit-time:":1614435028047,"uid":"WnWthBL1avU","string":"**Syntax**:","children":[{"edit-time:":1614435028047,"uid":"E4CUA-Kspny","string":"```clojure\n(= ...)```"},{"edit-time:":1614435028047,"uid":"oT5nf0AIbSd","string":"```clojure\n(not ...)```"}]},{"edit-time:":1614435028047,"uid":"-2VoXxF-F_I","string":"**Problem:**","children":[{"edit-time:":1614435028047,"uid":"ioYJHlp0Euh","string":"```clojure\n; This is a clojure form.\n; Enter a value which will make the form evaluate to true.\n; Don't over think it! If you are confused, see the getting started page.\n; Hint: true is equal to true.\n\n(= __ true)```"}]}],"title":"4clojure - Problem 1"},{"create-time":1614435028047,"edit-time:":1614435028047,"uid":"MSgwHqj_78J","children":[{"edit-time:":1614435028047,"uid":"itVvRhF-ZEY","string":"**Title:** Simple Math"},{"edit-time:":1614435028047,"uid":"1n_mNuRXFyJ","string":"**URL:** https://www.4clojure.com/problem/2"},{"edit-time:":1614435028047,"uid":"HYfm4KTCh9v","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028047,"uid":"B19iYIBnbr3","string":"Difficulty: Elementary"}]},{"edit-time:":1614435028047,"uid":"kA5naCXH0eb","string":"**Syntax**:","children":[{"edit-time:":1614435028047,"uid":"VXmHDCOaX6X","string":"```clojure\n(* ...)```"}]},{"edit-time:":1614435028047,"uid":"vS59Z1tyXOG","string":"**Problem:**","children":[{"edit-time:":1614435028047,"uid":"EzJBkBMLT5R","string":"```clojure\n; If you are not familiar with polish notation, simple arithmetic might seem confusing.\n; \n; Note: Enter only enough to fill in the blank (in this case, a single number) - do not retype the whole problem.\n\n(= (- 10 (* 2 3)) __)```"}]}],"title":"4clojure - Problem 2"},{"create-time":1614435028047,"edit-time:":1614435028047,"uid":"bj4B91jXWqH","children":[{"edit-time:":1614435028047,"uid":"cSh4Gc5_03z","string":"**Title:** Intro to Strings"},{"edit-time:":1614435028047,"uid":"5O5vfP7M5UI","string":"**URL:** https://www.4clojure.com/problem/3"},{"edit-time:":1614435028047,"uid":"rGxdrxSJmEq","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028047,"uid":"9rRp-uh0Ywk","string":"Difficulty: Elementary"}]},{"edit-time:":1614435028047,"uid":"H9YeQYDAhiQ","string":"**Problem:**","children":[{"edit-time:":1614435028047,"uid":"MDXl02yL_He","string":"```clojure\n; Clojure strings are Java strings.\n; This means that you can use any of the Java string methods on Clojure strings.\n\n(= __ (.toUpperCase \"hello world\"))```"}]}],"title":"4clojure - Problem 3"},{"create-time":1614435028047,"edit-time:":1614435028047,"uid":"TYLt59W_AkR","children":[{"edit-time:":1614435028047,"uid":"hhERtGSl4m3","string":"**Title:** Intro to Lists"},{"edit-time:":1614435028047,"uid":"ZI1xYRrv7Kb","string":"**URL:** https://www.4clojure.com/problem/4"},{"edit-time:":1614435028047,"uid":"s5EMWhF-rLZ","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028047,"uid":"p-vFEDL_7QZ","string":"Difficulty: Elementary"}]},{"edit-time:":1614435028047,"uid":"QLwyi9LRRhj","string":"**Syntax**:","children":[{"edit-time:":1614435028047,"uid":"xeNZMSI7Pnu","string":"```clojure\n(list ...)```"}]},{"edit-time:":1614435028047,"uid":"ie7tytOFpcx","string":"**Problem:**","children":[{"edit-time:":1614435028047,"uid":"h4PjRFKDixD","string":"```clojure\n; Lists can be constructed with either a function or a quoted form.\n\n(= (list __) '(:a :b :c))```"}]}],"title":"4clojure - Problem 4"},{"create-time":1614435028047,"edit-time:":1614435028047,"uid":"5Z1FSS6okMj","children":[{"edit-time:":1614435028047,"uid":"E7KUydYu3TJ","string":"**Title:** Lists: conj"},{"edit-time:":1614435028047,"uid":"oZNMqrhb593","string":"**URL:** https://www.4clojure.com/problem/5"},{"edit-time:":1614435028047,"uid":"kVOobAbZ-xS","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028047,"uid":"gklPwSrDMpz","string":"Difficulty: Elementary"}]},{"edit-time:":1614435028047,"uid":"_SKmRCIkgJD","string":"**Syntax**:","children":[{"edit-time:":1614435028047,"uid":"Nk_MvLr67JE","string":"```clojure\n(conj ...)```"}]},{"edit-time:":1614435028047,"uid":"SyNRRavRTMF","string":"**Problem:**","children":[{"edit-time:":1614435028047,"uid":"eHTfTMZDWzV","string":"```clojure\n; When operating on a list, the conj function will return a new list with one or more items \"added\" to the front.\n; \n; Note that there are two test cases, but you are expected to supply only one answer, which will cause all the tests to pass.\n\n(= __ (conj '(2 3 4) 1))\n\n\t\n(= __ (conj '(3 4) 2 1))```"}]}],"title":"4clojure - Problem 5"},{"create-time":1614435028047,"edit-time:":1614435028047,"uid":"aZmCKzoKCHI","children":[{"edit-time:":1614435028047,"uid":"UiFVs-FFEwG","string":"**Title:** Intro to Vectors"},{"edit-time:":1614435028047,"uid":"MU4UMH_P12M","string":"**URL:** https://www.4clojure.com/problem/6"},{"edit-time:":1614435028047,"uid":"m_jKmIkGDvb","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028047,"uid":"j6j7kisbRZs","string":"Difficulty: Elementary"}]},{"edit-time:":1614435028047,"uid":"O2CpjgEgFQj","string":"**Syntax**:","children":[{"edit-time:":1614435028047,"uid":"d3uzpth7OsA","string":"```clojure\n(vec ...)```"},{"edit-time:":1614435028047,"uid":"1YnfEw3G_dC","string":"```clojure\n(vector ...)```"}]},{"edit-time:":1614435028047,"uid":"z7tYWLBdXCN","string":"**Problem:**","children":[{"edit-time:":1614435028047,"uid":"cJRP3cstUO1","string":"```clojure\n; Vectors can be constructed several ways.\n; You can compare them with lists.\n; \n; \n; Note: the brackets [] surrounding the blanks __ are part of the test case.\n\n(= [__] (list :a :b :c) (vec '(:a :b :c)) (vector :a :b :c))```"}]}],"title":"4clojure - Problem 6"},{"create-time":1614435028047,"edit-time:":1614435028047,"uid":"1EKmzNLiSd2","children":[{"edit-time:":1614435028047,"uid":"vCuTO8DLSxv","string":"**Title:** Vectors: conj"},{"edit-time:":1614435028047,"uid":"cZ96os3539A","string":"**URL:** https://www.4clojure.com/problem/7"},{"edit-time:":1614435028047,"uid":"elFpSKqbFSn","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028047,"uid":"KP-FKPst14p","string":"Difficulty: Elementary"}]},{"edit-time:":1614435028047,"uid":"-ECN4KmbAXk","string":"**Problem:**","children":[{"edit-time:":1614435028047,"uid":"TJV-gx1fTLd","string":"```clojure\n; When operating on a Vector, the conj function will return a new vector with one or more items \"added\" to the end.\n\n(= __ (conj [1 2 3] 4))\n\n\t\n(= __ (conj [1 2] 3 4))```"}]}],"title":"4clojure - Problem 7"},{"create-time":1614435028047,"edit-time:":1614435028047,"uid":"MOtZ5odfkem","children":[{"edit-time:":1614435028047,"uid":"-Ixw06c5u7R","string":"**Title:** Intro to Sets"},{"edit-time:":1614435028047,"uid":"En6DJ7ATarl","string":"**URL:** https://www.4clojure.com/problem/8"},{"edit-time:":1614435028047,"uid":"IQMxb4Sj9w0","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028047,"uid":"zhnDjJ9Lk4X","string":"Difficulty: Elementary"}]},{"edit-time:":1614435028047,"uid":"XbK_ZCTsG6K","string":"**Syntax**:","children":[{"edit-time:":1614435028047,"uid":"CfmQkZbFpzT","string":"```clojure\n(set ...)```"}]},{"edit-time:":1614435028047,"uid":"alaXK07LKq6","string":"**Problem:**","children":[{"edit-time:":1614435028047,"uid":"0UzqoaY7-SB","string":"```clojure\n; Sets are collections of unique values.\n\n(= __ (set '(:a :a :b :c :c :c :c :d :d)))\n\n\t\n(= __ (clojure.set/union #{:a :b :c} #{:b :c :d}))```"}]}],"title":"4clojure - Problem 8"},{"create-time":1614435028047,"edit-time:":1614435028047,"uid":"n3l9aqhgFc9","children":[{"edit-time:":1614435028047,"uid":"odeA75dORat","string":"**Title:** Sets: conj"},{"edit-time:":1614435028047,"uid":"SlnbGms44YI","string":"**URL:** https://www.4clojure.com/problem/9"},{"edit-time:":1614435028047,"uid":"GkEgGS1D7uU","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028047,"uid":"Ur4Q1_xc-P4","string":"Difficulty: Elementary"}]},{"edit-time:":1614435028047,"uid":"9P6vlP739LC","string":"**Problem:**","children":[{"edit-time:":1614435028047,"uid":"EqjebV5nGe7","string":"```clojure\n; When operating on a set, the conj function returns a new set with one or more keys \"added\".\n\n(= #{1 2 3 4} (conj #{1 4 3} __))```"}]}],"title":"4clojure - Problem 9"},{"create-time":1614435028047,"edit-time:":1614435028047,"uid":"6YS4IcPhog1","children":[{"edit-time:":1614435028047,"uid":"xn8RXraRTV4","string":"**Title:** Intro to Maps"},{"edit-time:":1614435028047,"uid":"4cl15E8_reS","string":"**URL:** https://www.4clojure.com/problem/10"},{"edit-time:":1614435028047,"uid":"71UoVJ1170f","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028047,"uid":"CcEJavPuQLH","string":"Difficulty: Elementary"}]},{"edit-time:":1614435028047,"uid":"4PFKLu8rfeM","string":"**Syntax**:","children":[{"edit-time:":1614435028047,"uid":"XgAQVQuuiFK","string":"```clojure\n(hash-map ...)```"}]},{"edit-time:":1614435028048,"uid":"EeqfY61m_lD","string":"**Problem:**","children":[{"edit-time:":1614435028048,"uid":"pY-TVM8ku_z","string":"```clojure\n; Maps store key-value pairs.\n; Both maps and keywords can be used as lookup functions.\n; Commas can be used to make maps more readable, but they are not required.\n\n(= __ ((hash-map :a 10, :b 20, :c 30) :b))\n\n\t\n(= __ (:b {:a 10, :b 20, :c 30}))```"}]}],"title":"4clojure - Problem 10"},{"create-time":1614435028048,"edit-time:":1614435028048,"uid":"wzfHrAYSdYS","children":[{"edit-time:":1614435028048,"uid":"07QDpPLRn_6","string":"**Title:** Maps: conj"},{"edit-time:":1614435028048,"uid":"phuBE7LJtKP","string":"**URL:** https://www.4clojure.com/problem/11"},{"edit-time:":1614435028048,"uid":"6uYUm4RR301","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028048,"uid":"BXcB_3BuBqo","string":"Difficulty: Elementary"}]},{"edit-time:":1614435028048,"uid":"7hcglsqplXn","string":"**Problem:**","children":[{"edit-time:":1614435028048,"uid":"8RoP7xMNJaa","string":"```clojure\n; When operating on a map, the conj function returns a new map with one or more key-value pairs \"added\".\n\n(= {:a 1, :b 2, :c 3} (conj {:a 1} __ [:c 3]))```"}]}],"title":"4clojure - Problem 11"},{"create-time":1614435028048,"edit-time:":1614435028048,"uid":"QyrAg3qhifa","children":[{"edit-time:":1614435028048,"uid":"FgQEzNJPION","string":"**Title:** Intro to Sequences"},{"edit-time:":1614435028048,"uid":"pP_k7FNLqGX","string":"**URL:** https://www.4clojure.com/problem/12"},{"edit-time:":1614435028048,"uid":"HbhgjKoNwRB","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028048,"uid":"uW0LbqQCDeg","string":"Difficulty: Elementary"}]},{"edit-time:":1614435028048,"uid":"qDMb2YXxL9N","string":"**Syntax**:","children":[{"edit-time:":1614435028048,"uid":"KA5QGoO8U3t","string":"```clojure\n(first ...)```"},{"edit-time:":1614435028048,"uid":"X4Pwh8lkC9r","string":"```clojure\n(second ...)```"},{"edit-time:":1614435028048,"uid":"1ZajIgeNx1P","string":"```clojure\n(last ...)```"}]},{"edit-time:":1614435028048,"uid":"blEcVuf5s-e","string":"**Problem:**","children":[{"edit-time:":1614435028048,"uid":"_2t49uYtvTr","string":"```clojure\n; All Clojure collections support sequencing.\n; You can operate on sequences with functions like first, second, and last.\n\n(= __ (first '(3 2 1)))\n\n\t\n(= __ (second [2 3 4]))\n\n\t\n(= __ (last (list 1 2 3)))```"}]}],"title":"4clojure - Problem 12"},{"create-time":1614435028048,"edit-time:":1614435028048,"uid":"yzAXMEREjZu","children":[{"edit-time:":1614435028048,"uid":"C_U8CrjrttN","string":"**Title:** Sequences: rest"},{"edit-time:":1614435028048,"uid":"AIEinaj9Vpb","string":"**URL:** https://www.4clojure.com/problem/13"},{"edit-time:":1614435028048,"uid":"9PoS5ZljZUt","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028048,"uid":"bfBgKzO0MLO","string":"Difficulty: Elementary"}]},{"edit-time:":1614435028048,"uid":"4mWQaVqjVYQ","string":"**Syntax**:","children":[{"edit-time:":1614435028048,"uid":"PKpIIhPfozD","string":"```clojure\n(rest ...)```"}]},{"edit-time:":1614435028048,"uid":"JNOhaZGrwz4","string":"**Problem:**","children":[{"edit-time:":1614435028048,"uid":"SN97OJIgbSO","string":"```clojure\n; The rest function will return all the items of a sequence except the first.\n\n(= __ (rest [10 20 30 40]))```"}]}],"title":"4clojure - Problem 13"},{"create-time":1614435028048,"edit-time:":1614435028048,"uid":"xc5glHawgfF","children":[{"edit-time:":1614435028048,"uid":"RadPRwK2eSe","string":"**Title:** Intro to Functions"},{"edit-time:":1614435028048,"uid":"-BEcKUKSzM9","string":"**URL:** https://www.4clojure.com/problem/14"},{"edit-time:":1614435028048,"uid":"GU_Q6iNMSU5","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028048,"uid":"9IDLNAZcuI8","string":"Difficulty: Elementary"}]},{"edit-time:":1614435028048,"uid":"_QvU2whpShm","string":"**Syntax**:","children":[{"edit-time:":1614435028048,"uid":"YAXqUsPaaGE","string":"```clojure\n(fn ...)```"},{"edit-time:":1614435028048,"uid":"X5Jeei0D8bq","string":"```clojure\n(partial ...)```"}]},{"edit-time:":1614435028048,"uid":"rfvs2ScA3aS","string":"**Problem:**","children":[{"edit-time:":1614435028048,"uid":"eBSI7E3FQt8","string":"```clojure\n; Clojure has many different ways to create functions.\n\n(= __ ((fn add-five [x] (+ x 5)) 3))\n\n\t\n(= __ ((fn [x] (+ x 5)) 3))\n\n\t\n(= __ (#(+ % 5) 3))\n\n\t\n(= __ ((partial + 5) 3))```"}]}],"title":"4clojure - Problem 14"},{"create-time":1614435028048,"edit-time:":1614435028048,"uid":"6gQswH_FhxO","children":[{"edit-time:":1614435028048,"uid":"INqUjoYt5ct","string":"**Title:** Double Down"},{"edit-time:":1614435028048,"uid":"5YML4hG_ba9","string":"**URL:** https://www.4clojure.com/problem/15"},{"edit-time:":1614435028048,"uid":"IMf3qBGoVGj","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028048,"uid":"P3ZQM4nujJw","string":"Difficulty: Elementary"}]},{"edit-time:":1614435028048,"uid":"d7egNfVSVf2","string":"**Problem:**","children":[{"edit-time:":1614435028048,"uid":"LqKYyicgV2d","string":"```clojure\n; Write a function which doubles a number.\n\n(= (__ 2) 4)\n\n\t\n(= (__ 3) 6)\n\n\t\n(= (__ 11) 22)\n\n\t\n(= (__ 7) 14)```"}]}],"title":"4clojure - Problem 15"},{"create-time":1614435028048,"edit-time:":1614435028048,"uid":"kLEm2bACDrc","children":[{"edit-time:":1614435028048,"uid":"YdNor-goiJH","string":"**Title:** Hello World"},{"edit-time:":1614435028048,"uid":"_27cu1ZSqnh","string":"**URL:** https://www.4clojure.com/problem/16"},{"edit-time:":1614435028048,"uid":"1q9NQnaq3qj","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028048,"uid":"i8M0Xww-FVy","string":"Difficulty: Elementary"}]},{"edit-time:":1614435028048,"uid":"otCas5WABvl","string":"**Problem:**","children":[{"edit-time:":1614435028048,"uid":"GIG6ZBL8Oj9","string":"```clojure\n; Write a function which returns a personalized greeting.\n\n(= (__ \"Dave\") \"Hello, Dave!\")\n\n\t\n(= (__ \"Jenn\") \"Hello, Jenn!\")\n\n\t\n(= (__ \"Rhea\") \"Hello, Rhea!\")```"}]}],"title":"4clojure - Problem 16"},{"create-time":1614435028048,"edit-time:":1614435028048,"uid":"GnB51s7mRz4","children":[{"edit-time:":1614435028048,"uid":"BuBr2Y-No9q","string":"**Title:** Sequences: map"},{"edit-time:":1614435028048,"uid":"skTO4oT3m-Y","string":"**URL:** https://www.4clojure.com/problem/17"},{"edit-time:":1614435028048,"uid":"mSMPtkH8t6H","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028048,"uid":"0pBQ9wMJrQB","string":"Difficulty: Elementary"}]},{"edit-time:":1614435028048,"uid":"U8KNhE5RoeV","string":"**Syntax**:","children":[{"edit-time:":1614435028048,"uid":"0S_z0tfmxlD","string":"```clojure\n(map ...)```"}]},{"edit-time:":1614435028048,"uid":"93CzSl3_wcZ","string":"**Problem:**","children":[{"edit-time:":1614435028048,"uid":"UlrqHOCEtSG","string":"```clojure\n; The map function takes two arguments: a function (f) and a sequence (s).\n; Map returns a new sequence consisting of the result of applying f to each item of s.\n; Do not confuse the map function with the map data structure.\n\n(= __ (map #(+ % 5) '(1 2 3)))```"}]}],"title":"4clojure - Problem 17"},{"create-time":1614435028048,"edit-time:":1614435028048,"uid":"EjEQaFco1Kw","children":[{"edit-time:":1614435028048,"uid":"hWaJp7zmUIw","string":"**Title:** Sequences: filter"},{"edit-time:":1614435028048,"uid":"0FccAW6H2JK","string":"**URL:** https://www.4clojure.com/problem/18"},{"edit-time:":1614435028048,"uid":"EL_SL7foVe4","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028048,"uid":"pjhw6s8irMH","string":"Difficulty: Elementary"}]},{"edit-time:":1614435028048,"uid":"MLtHZOMLXWF","string":"**Syntax**:","children":[{"edit-time:":1614435028048,"uid":"BSQ7jKESsKG","string":"```clojure\n(filter ...)```"},{"edit-time:":1614435028048,"uid":"YF7g0q8hJKX","string":"```clojure\n(> ...)```"}]},{"edit-time:":1614435028048,"uid":"HQRuiWI8PM6","string":"**Problem:**","children":[{"edit-time:":1614435028048,"uid":"ZvhCE32Q7Vl","string":"```clojure\n; The filter function takes two arguments: a predicate function (f) and a sequence (s).\n; Filter returns a new sequence consisting of all the items of s for which (f item) returns true.\n\n(= __ (filter #(> % 5) '(3 4 5 6 7)))```"}]}],"title":"4clojure - Problem 18"},{"create-time":1614435028048,"edit-time:":1614435028048,"uid":"dTGKT9HHrfq","children":[{"edit-time:":1614435028048,"uid":"kcS2L7tzlee","string":"**Title:** Last Element"},{"edit-time:":1614435028048,"uid":"a5QMFIub1pF","string":"**URL:** https://www.4clojure.com/problem/19"},{"edit-time:":1614435028048,"uid":"ld2AyX8KTux","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028048,"uid":"IOnCJyoMhT9","string":"Difficulty: Easy"},{"edit-time:":1614435028048,"uid":"C3zhAUZa6LB","string":"Topics: seqs core-functions"}]},{"edit-time:":1614435028048,"uid":"V5TudFUmGkH","string":"**Problem:**","children":[{"edit-time:":1614435028048,"uid":"9KZ65sCf0c_","string":"```clojure\n; Write a function which returns the last element in a sequence.\n\n; Special Restrictions:\n; last\n\n(= (__ [1 2 3 4 5]) 5)\n\n\t\n(= (__ '(5 4 3)) 3)\n\n\t\n(= (__ [\"b\" \"c\" \"d\"]) \"d\")```"}]}],"title":"4clojure - Problem 19"},{"create-time":1614435028048,"edit-time:":1614435028048,"uid":"7aVvIzqm8ph","children":[{"edit-time:":1614435028048,"uid":"gSXLlm_9fl2","string":"**Title:** Penultimate Element"},{"edit-time:":1614435028048,"uid":"WhEOpiOPZ1C","string":"**URL:** https://www.4clojure.com/problem/20"},{"edit-time:":1614435028048,"uid":"aJb4l2kdFxu","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028048,"uid":"pQglzDhde05","string":"Difficulty: Easy"},{"edit-time:":1614435028048,"uid":"nmtjcFCeFxl","string":"Topics: seqs"}]},{"edit-time:":1614435028048,"uid":"oqXK2iBJ61s","string":"**Problem:**","children":[{"edit-time:":1614435028048,"uid":"pbe92GTW1Vc","string":"```clojure\n; Write a function which returns the second to last element from a sequence.\n\n(= (__ (list 1 2 3 4 5)) 4)\n\n\t\n(= (__ [\"a\" \"b\" \"c\"]) \"b\")\n\n\t\n(= (__ [[1 2] [3 4]]) [1 2])```"}]}],"title":"4clojure - Problem 20"},{"create-time":1614435028048,"edit-time:":1614435028048,"uid":"0MDEE9GfWr7","children":[{"edit-time:":1614435028048,"uid":"QdcmTZwNhyX","string":"**Title:** Nth Element"},{"edit-time:":1614435028048,"uid":"rSQgf2Xbans","string":"**URL:** https://www.4clojure.com/problem/21"},{"edit-time:":1614435028048,"uid":"iBDmm7Mhxvx","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028048,"uid":"R7F5GKkHrEy","string":"Difficulty: Easy"},{"edit-time:":1614435028048,"uid":"XcVFJt4L4QF","string":"Topics: seqs core-functions"}]},{"edit-time:":1614435028048,"uid":"duq5BT6UwgR","string":"**Problem:**","children":[{"edit-time:":1614435028048,"uid":"vtqV8ZEGVyz","string":"```clojure\n; Write a function which returns the Nth element from a sequence.\n\n; Special Restrictions:\n; nth\n\n(= (__ '(4 5 6 7) 2) 6)\n\n\t\n(= (__ [:a :b :c] 0) :a)\n\n\t\n(= (__ [1 2 3 4] 1) 2)\n\n\t\n(= (__ '([1 2] [3 4] [5 6]) 2) [5 6])```"}]}],"title":"4clojure - Problem 21"},{"create-time":1614435028048,"edit-time:":1614435028048,"uid":"0PO2KAjuCri","children":[{"edit-time:":1614435028048,"uid":"SlI7Wan31Gn","string":"**Title:** Count a Sequence"},{"edit-time:":1614435028048,"uid":"692i9ZTNG1M","string":"**URL:** https://www.4clojure.com/problem/22"},{"edit-time:":1614435028048,"uid":"-MZVN81G2xq","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028048,"uid":"Mf1Fm5p-2N9","string":"Difficulty: Easy"},{"edit-time:":1614435028048,"uid":"79V9aAEnWu2","string":"Topics: seqs core-functions"}]},{"edit-time:":1614435028048,"uid":"mcpF0JI6P-H","string":"**Problem:**","children":[{"edit-time:":1614435028048,"uid":"-m5kwKDMHxr","string":"```clojure\n; Write a function which returns the total number of elements in a sequence.\n\n; Special Restrictions:\n; count\n\n(= (__ '(1 2 3 3 1)) 5)\n\n\t\n(= (__ \"Hello World\") 11)\n\n\t\n(= (__ [[1 2] [3 4] [5 6]]) 3)\n\n\t\n(= (__ '(13)) 1)\n\n\t\n(= (__ '(:a :b :c)) 3)```"}]}],"title":"4clojure - Problem 22"},{"create-time":1614435028048,"edit-time:":1614435028048,"uid":"THuFOWyXydP","children":[{"edit-time:":1614435028048,"uid":"yIPN0CAp6z3","string":"**Title:** Reverse a Sequence"},{"edit-time:":1614435028048,"uid":"T9v0Eipf_ld","string":"**URL:** https://www.4clojure.com/problem/23"},{"edit-time:":1614435028048,"uid":"zzxaDp-0xLo","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028048,"uid":"EaZ5m-RP_de","string":"Difficulty: Easy"},{"edit-time:":1614435028048,"uid":"2mJBxSh1bub","string":"Topics: seqs core-functions"}]},{"edit-time:":1614435028048,"uid":"SlPCpHxPlTl","string":"**Syntax**:","children":[{"edit-time:":1614435028048,"uid":"9xjlUct9fYF","string":"```clojure\n(sorted-set ...)```"}]},{"edit-time:":1614435028048,"uid":"QwnYv94aVkc","string":"**Problem:**","children":[{"edit-time:":1614435028048,"uid":"bYQmcVGz4Py","string":"```clojure\n; Write a function which reverses a sequence.\n\n; Special Restrictions:\n; reverse\n; rseq\n\n(= (__ [1 2 3 4 5]) [5 4 3 2 1])\n\n\t\n(= (__ (sorted-set 5 7 2 7)) '(7 5 2))\n\n\t\n(= (__ [[1 2][3 4][5 6]]) [[5 6][3 4][1 2]])```"}]}],"title":"4clojure - Problem 23"},{"create-time":1614435028048,"edit-time:":1614435028048,"uid":"LFdUCsN6SH1","children":[{"edit-time:":1614435028048,"uid":"hKG-DiTjQ0u","string":"**Title:** Sum It All Up"},{"edit-time:":1614435028048,"uid":"X5th0xdxvJE","string":"**URL:** https://www.4clojure.com/problem/24"},{"edit-time:":1614435028048,"uid":"_Vmt99ZqhmC","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028048,"uid":"ppgmwzv36ds","string":"Difficulty: Easy"},{"edit-time:":1614435028048,"uid":"t5fy7D3M-C2","string":"Topics: seqs"}]},{"edit-time:":1614435028048,"uid":"aiuN0Hhz6aO","string":"**Problem:**","children":[{"edit-time:":1614435028048,"uid":"el8xyXnt1Tn","string":"```clojure\n; Write a function which returns the sum of a sequence of numbers.\n\n(= (__ [1 2 3]) 6)\n\n\t\n(= (__ (list 0 -2 5 5)) 8)\n\n\t\n(= (__ #{4 2 1}) 7)\n\n\t\n(= (__ '(0 0 -1)) -1)\n\n\t\n(= (__ '(1 10 3)) 14)```"}]}],"title":"4clojure - Problem 24"},{"create-time":1614435028048,"edit-time:":1614435028048,"uid":"_v1bJTHX_DT","children":[{"edit-time:":1614435028048,"uid":"ItK4WWl-uBf","string":"**Title:** Find the odd numbers"},{"edit-time:":1614435028048,"uid":"93guecYyMPV","string":"**URL:** https://www.4clojure.com/problem/25"},{"edit-time:":1614435028048,"uid":"LVNrx1nYOO7","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028048,"uid":"5eD7zb6FjCl","string":"Difficulty: Easy"},{"edit-time:":1614435028048,"uid":"H02ADhNMhGR","string":"Topics: seqs"}]},{"edit-time:":1614435028048,"uid":"FPtSBEjKRnf","string":"**Problem:**","children":[{"edit-time:":1614435028048,"uid":"k4QNaqBaVbK","string":"```clojure\n; Write a function which returns only the odd numbers from a sequence.\n\n(= (__ #{1 2 3 4 5}) '(1 3 5))\n\n\t\n(= (__ [4 2 1 6]) '(1))\n\n\t\n(= (__ [2 2 4 6]) '())\n\n\t\n(= (__ [1 1 1 3]) '(1 1 1 3))```"}]}],"title":"4clojure - Problem 25"},{"create-time":1614435028048,"edit-time:":1614435028048,"uid":"Vg_Wn3OMwS1","children":[{"edit-time:":1614435028048,"uid":"5hAdYFtlUly","string":"**Title:** Fibonacci Sequence"},{"edit-time:":1614435028048,"uid":"KXIfhpudh4M","string":"**URL:** https://www.4clojure.com/problem/26"},{"edit-time:":1614435028048,"uid":"lQ-k7kaFIEK","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028048,"uid":"4SN3fFXyrH5","string":"Difficulty: Easy"},{"edit-time:":1614435028048,"uid":"IWX2vqB-p4s","string":"Topics: Fibonacci seqs"}]},{"edit-time:":1614435028048,"uid":"MBttGbz3wt2","string":"**Problem:**","children":[{"edit-time:":1614435028048,"uid":"YgXmFrKEsqn","string":"```clojure\n; Write a function which returns the first X fibonacci numbers.\n\n(= (__ 3) '(1 1 2))\n\n\t\n(= (__ 6) '(1 1 2 3 5 8))\n\n\t\n(= (__ 8) '(1 1 2 3 5 8 13 21))```"}]}],"title":"4clojure - Problem 26"},{"create-time":1614435028048,"edit-time:":1614435028048,"uid":"4NnfgBMauvO","children":[{"edit-time:":1614435028048,"uid":"9ry1gYS0NEu","string":"**Title:** Palindrome Detector"},{"edit-time:":1614435028049,"uid":"t3OMCXbB13e","string":"**URL:** https://www.4clojure.com/problem/27"},{"edit-time:":1614435028049,"uid":"DaqXi1Bc130","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028049,"uid":"jpiro_YKJPN","string":"Difficulty: Easy"},{"edit-time:":1614435028049,"uid":"wYfkesFgmnG","string":"Topics: seqs"}]},{"edit-time:":1614435028049,"uid":"PO2HF8Fp2uN","string":"**Problem:**","children":[{"edit-time:":1614435028049,"uid":"Vu55VD5FrRU","string":"```clojure\n; Write a function which returns true if the given sequence is a palindrome.\n; \n; Hint: \"racecar\" does not equal '(\\r \\a \\c \\e \\c \\a \\r)\n\n(false? (__ '(1 2 3 4 5)))\n\n\t\n(true? (__ \"racecar\"))\n\n\t\n(true? (__ [:foo :bar :foo]))\n\n\t\n(true? (__ '(1 1 3 3 1 1)))\n\n\t\n(false? (__ '(:a :b :c)))```"}]}],"title":"4clojure - Problem 27"},{"create-time":1614435028049,"edit-time:":1614435028049,"uid":"2DwDWl4QapG","children":[{"edit-time:":1614435028049,"uid":"qQiruHF25W-","string":"**Title:** Flatten a Sequence"},{"edit-time:":1614435028049,"uid":"0AAwlf05id-","string":"**URL:** https://www.4clojure.com/problem/28"},{"edit-time:":1614435028049,"uid":"JZkkwyUWcuo","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028049,"uid":"H9yNUrDd_l-","string":"Difficulty: Easy"},{"edit-time:":1614435028049,"uid":"kCcqucrWWTK","string":"Topics: seqs core-functions"}]},{"edit-time:":1614435028049,"uid":"qz6o0XqCoJi","string":"**Problem:**","children":[{"edit-time:":1614435028049,"uid":"-9xxaF8rSpB","string":"```clojure\n; Write a function which flattens a sequence.\n\n; Special Restrictions:\n; flatten\n\n(= (__ '((1 2) 3 [4 [5 6]])) '(1 2 3 4 5 6))\n\n\t\n(= (__ [\"a\" [\"b\"] \"c\"]) '(\"a\" \"b\" \"c\"))\n\n\t\n(= (__ '((((:a))))) '(:a))```"}]}],"title":"4clojure - Problem 28"},{"create-time":1614435028049,"edit-time:":1614435028049,"uid":"jmscU5EwSNt","children":[{"edit-time:":1614435028049,"uid":"kG74TVFEN8F","string":"**Title:** Get the Caps"},{"edit-time:":1614435028049,"uid":"ZlXiOSV1bYT","string":"**URL:** https://www.4clojure.com/problem/29"},{"edit-time:":1614435028049,"uid":"LNEOGWEKShG","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028049,"uid":"X392gdp0Y2O","string":"Difficulty: Easy"},{"edit-time:":1614435028049,"uid":"CKQbsFHRYoK","string":"Topics: strings"}]},{"edit-time:":1614435028049,"uid":"H2F9cuChmEv","string":"**Syntax**:","children":[{"edit-time:":1614435028049,"uid":"_BgfnaFuCUP","string":"```clojure\n(empty ...)```"}]},{"edit-time:":1614435028049,"uid":"MQF-AQxVW44","string":"**Problem:**","children":[{"edit-time:":1614435028049,"uid":"hhkGfx0aw80","string":"```clojure\n; Write a function which takes a string and returns a new string containing only the capital letters.\n\n(= (__ \"HeLlO, WoRlD!\") \"HLOWRD\")\n\n\t\n(empty? (__ \"nothing\"))\n\n\t\n(= (__ \"$#A(*&987Zf\") \"AZ\")```"}]}],"title":"4clojure - Problem 29"},{"create-time":1614435028049,"edit-time:":1614435028049,"uid":"U2QHQnLgSfz","children":[{"edit-time:":1614435028049,"uid":"-hmRcixFieA","string":"**Title:** Compress a Sequence"},{"edit-time:":1614435028049,"uid":"Lhs3o6MU2Be","string":"**URL:** https://www.4clojure.com/problem/30"},{"edit-time:":1614435028049,"uid":"iZ4kSH9KbLu","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028049,"uid":"DrPi1FN_3lL","string":"Difficulty: Easy"},{"edit-time:":1614435028049,"uid":"uu1y4mKJBWt","string":"Topics: seqs"}]},{"edit-time:":1614435028049,"uid":"BMvmKX182UT","string":"**Syntax**:","children":[{"edit-time:":1614435028049,"uid":"fnGHDDXCbCm","string":"```clojure\n(apply ...)```"},{"edit-time:":1614435028049,"uid":"LUL077Hkh2u","string":"```clojure\n(str ...)```"}]},{"edit-time:":1614435028049,"uid":"AupSMeZOHW2","string":"**Problem:**","children":[{"edit-time:":1614435028049,"uid":"2VMNPXzWzDx","string":"```clojure\n; Write a function which removes consecutive duplicates from a sequence.\n\n(= (apply str (__ \"Leeeeeerrroyyy\")) \"Leroy\")\n\n\t\n(= (__ [1 1 2 3 3 2 2 3]) '(1 2 3 2 3))\n\n\t\n(= (__ [[1 2] [1 2] [3 4] [1 2]]) '([1 2] [3 4] [1 2]))```"}]}],"title":"4clojure - Problem 30"},{"create-time":1614435028049,"edit-time:":1614435028049,"uid":"Thbzquif1xu","children":[{"edit-time:":1614435028049,"uid":"A3DAsMRqT8O","string":"**Title:** Pack a Sequence"},{"edit-time:":1614435028049,"uid":"A7ZDoZhXtLG","string":"**URL:** https://www.4clojure.com/problem/31"},{"edit-time:":1614435028049,"uid":"mahz_MZoU-0","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028049,"uid":"AG43Vav9opg","string":"Difficulty: Easy"},{"edit-time:":1614435028049,"uid":"IGk7Ak_XWPt","string":"Topics: seqs"}]},{"edit-time:":1614435028049,"uid":"KJpfWx5IIYy","string":"**Problem:**","children":[{"edit-time:":1614435028049,"uid":"cOwU1xZTCtS","string":"```clojure\n; Write a function which packs consecutive duplicates into sub-lists.\n\n(= (__ [1 1 2 1 1 1 3 3]) '((1 1) (2) (1 1 1) (3 3)))\n\n\t\n(= (__ [:a :a :b :b :c]) '((:a :a) (:b :b) (:c)))\n\n\t\n(= (__ [[1 2] [1 2] [3 4]]) '(([1 2] [1 2]) ([3 4])))```"}]}],"title":"4clojure - Problem 31"},{"create-time":1614435028049,"edit-time:":1614435028049,"uid":"SdUPowe4Iqn","children":[{"edit-time:":1614435028049,"uid":"XVbmMnEVXoV","string":"**Title:** Duplicate a Sequence"},{"edit-time:":1614435028049,"uid":"4LU9jeaWZ6M","string":"**URL:** https://www.4clojure.com/problem/32"},{"edit-time:":1614435028049,"uid":"Pq-pTE4-Qn2","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028049,"uid":"pqIGib72vQu","string":"Difficulty: Easy"},{"edit-time:":1614435028049,"uid":"DNlGQE0F_F0","string":"Topics: seqs"}]},{"edit-time:":1614435028049,"uid":"E_kCHHD5lRs","string":"**Problem:**","children":[{"edit-time:":1614435028049,"uid":"zrImSDQyFUc","string":"```clojure\n; Write a function which duplicates each element of a sequence.\n\n(= (__ [1 2 3]) '(1 1 2 2 3 3))\n\n\t\n(= (__ [:a :a :b :b]) '(:a :a :a :a :b :b :b :b))\n\n\t\n(= (__ [[1 2] [3 4]]) '([1 2] [1 2] [3 4] [3 4]))\n\n\t\n(= (__ [[1 2] [3 4]]) '([1 2] [1 2] [3 4] [3 4]))```"}]}],"title":"4clojure - Problem 32"},{"create-time":1614435028049,"edit-time:":1614435028049,"uid":"KuGtABJHsZ7","children":[{"edit-time:":1614435028049,"uid":"oxCJrFKgLcw","string":"**Title:** Replicate a Sequence"},{"edit-time:":1614435028049,"uid":"aU3te4UHsJp","string":"**URL:** https://www.4clojure.com/problem/33"},{"edit-time:":1614435028049,"uid":"AxgC5ffFSPo","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028049,"uid":"IUdKDNumbwm","string":"Difficulty: Easy"},{"edit-time:":1614435028049,"uid":"XD8w-8YdHIk","string":"Topics: seqs"}]},{"edit-time:":1614435028049,"uid":"Izs1ZODhRjt","string":"**Problem:**","children":[{"edit-time:":1614435028049,"uid":"KkI-vYpuOVY","string":"```clojure\n; Write a function which replicates each element of a sequence a variable number of times.\n\n(= (__ [1 2 3] 2) '(1 1 2 2 3 3))\n\n\t\n(= (__ [:a :b] 4) '(:a :a :a :a :b :b :b :b))\n\n\t\n(= (__ [4 5 6] 1) '(4 5 6))\n\n\t\n(= (__ [[1 2] [3 4]] 2) '([1 2] [1 2] [3 4] [3 4]))\n\n\t\n(= (__ [44 33] 2) [44 44 33 33])```"}]}],"title":"4clojure - Problem 33"},{"create-time":1614435028049,"edit-time:":1614435028049,"uid":"3U7nFCo2kMv","children":[{"edit-time:":1614435028049,"uid":"bPYCasdTpli","string":"**Title:** Implement range"},{"edit-time:":1614435028049,"uid":"W696VuQbcMe","string":"**URL:** https://www.4clojure.com/problem/34"},{"edit-time:":1614435028049,"uid":"1sVa7Y3MtR-","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028049,"uid":"Xgxnpyqp2VO","string":"Difficulty: Easy"},{"edit-time:":1614435028049,"uid":"Y_7x4lueg4P","string":"Topics: seqs core-functions"}]},{"edit-time:":1614435028049,"uid":"piC381m7cOD","string":"**Problem:**","children":[{"edit-time:":1614435028049,"uid":"tOdj0Rqp0wt","string":"```clojure\n; Write a function which creates a list of all integers in a given range.\n\n; Special Restrictions:\n; range\n\n(= (__ 1 4) '(1 2 3))\n\n\t\n(= (__ -2 2) '(-2 -1 0 1))\n\n\t\n(= (__ 5 8) '(5 6 7))```"}]}],"title":"4clojure - Problem 34"},{"create-time":1614435028049,"edit-time:":1614435028049,"uid":"PEbMH7f3bcF","children":[{"edit-time:":1614435028049,"uid":"L7xnpSFK5fS","string":"**Title:** Local bindings"},{"edit-time:":1614435028049,"uid":"p4GMISjjrJB","string":"**URL:** https://www.4clojure.com/problem/35"},{"edit-time:":1614435028049,"uid":"jr9K1eOyPEA","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028049,"uid":"DtU200Q2jxQ","string":"Difficulty: Elementary"},{"edit-time:":1614435028049,"uid":"es2pTcDolyp","string":"Topics: syntax"}]},{"edit-time:":1614435028049,"uid":"li4-lq9evCs","string":"**Syntax**:","children":[{"edit-time:":1614435028049,"uid":"LWNax3_rRdz","string":"```clojure\n(/ ...)```"}]},{"edit-time:":1614435028049,"uid":"xIXNcPtOe7p","string":"**Problem:**","children":[{"edit-time:":1614435028049,"uid":"7Vb-1OF2msv","string":"```clojure\n; Clojure lets you give local names to values using the special let-form.\n\n(= __ (let [x 5] (+ 2 x)))\n\n\t\n(= __ (let [x 3, y 10] (- y x)))\n\n\t\n(= __ (let [x 21] (let [y 3] (/ x y))))```"}]}],"title":"4clojure - Problem 35"},{"create-time":1614435028049,"edit-time:":1614435028049,"uid":"1HK7WJYWxT_","children":[{"edit-time:":1614435028049,"uid":"RQ_70j5dpwx","string":"**Title:** Let it Be"},{"edit-time:":1614435028049,"uid":"v6zM04xjKF1","string":"**URL:** https://www.4clojure.com/problem/36"},{"edit-time:":1614435028049,"uid":"WQJnBRKecVH","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028049,"uid":"-VSJVII5Etk","string":"Difficulty: Elementary"},{"edit-time:":1614435028049,"uid":"_DD4bnbdrwy","string":"Topics: math syntax"}]},{"edit-time:":1614435028049,"uid":"9Np0uI3y8K3","string":"**Problem:**","children":[{"edit-time:":1614435028049,"uid":"AV5QZR39vQg","string":"```clojure\n; Can you bind x, y, and z so that these are all true?\n\n(= 10 (let __ (+ x y)))\n\n\t\n(= 4 (let __ (+ y z)))\n\n\t\n(= 1 (let __ z))```"}]}],"title":"4clojure - Problem 36"},{"create-time":1614435028049,"edit-time:":1614435028049,"uid":"azONKcq9dB1","children":[{"edit-time:":1614435028049,"uid":"XZwun7Ed6Wb","string":"**Title:** Regular Expressions"},{"edit-time:":1614435028049,"uid":"qctBq3jUM19","string":"**URL:** https://www.4clojure.com/problem/37"},{"edit-time:":1614435028049,"uid":"5AvH-JSW9W-","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028049,"uid":"wK5BZJpacsa","string":"Difficulty: Elementary"},{"edit-time:":1614435028049,"uid":"m25SvTc00Jo","string":"Topics: regex syntax"}]},{"edit-time:":1614435028049,"uid":"gO7z8i6TUcL","string":"**Syntax**:","children":[{"edit-time:":1614435028049,"uid":"qetHq1GUs4J","string":"```clojure\n(re-seq ...)```"}]},{"edit-time:":1614435028049,"uid":"kVMOCNqzpmF","string":"**Problem:**","children":[{"edit-time:":1614435028049,"uid":"sqfA9lBKXFC","string":"```clojure\n; Regex patterns are supported with a special reader macro.\n\n(= __ (apply str (re-seq #\"[A-Z]+\" \"bA1B3Ce \")))```"}]}],"title":"4clojure - Problem 37"},{"create-time":1614435028049,"edit-time:":1614435028049,"uid":"myaT8aTKboe","children":[{"edit-time:":1614435028049,"uid":"RSeT0JZSpML","string":"**Title:** Maximum value"},{"edit-time:":1614435028049,"uid":"_BbLuc-t3Mg","string":"**URL:** https://www.4clojure.com/problem/38"},{"edit-time:":1614435028049,"uid":"LQW2MKIOuiQ","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028049,"uid":"8T8b9jQFZj5","string":"Difficulty: Easy"},{"edit-time:":1614435028049,"uid":"x3HrZV20ABZ","string":"Topics: core-functions"}]},{"edit-time:":1614435028049,"uid":"9yPLqOmMczz","string":"**Problem:**","children":[{"edit-time:":1614435028049,"uid":"1BrENYJjb-k","string":"```clojure\n; Write a function which takes a variable number of parameters and returns the maximum value.\n\n; Special Restrictions:\n; max\n; max-key\n\n(= (__ 1 8 3 4) 8)\n\n\t\n(= (__ 30 20) 30)\n\n\t\n(= (__ 45 67 11) 67)```"}]}],"title":"4clojure - Problem 38"},{"create-time":1614435028049,"edit-time:":1614435028049,"uid":"_7ESJlFKPwR","children":[{"edit-time:":1614435028049,"uid":"gh3lR84VUAH","string":"**Title:** Interleave Two Seqs"},{"edit-time:":1614435028049,"uid":"178OB4pdt8v","string":"**URL:** https://www.4clojure.com/problem/39"},{"edit-time:":1614435028049,"uid":"VIsyjCKbucp","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028049,"uid":"6Of4HC-xbqZ","string":"Difficulty: Easy"},{"edit-time:":1614435028049,"uid":"rMxY_JtZnjs","string":"Topics: seqs core-functions"}]},{"edit-time:":1614435028049,"uid":"t9_vOEbrvdb","string":"**Problem:**","children":[{"edit-time:":1614435028049,"uid":"--q2gqSMKhk","string":"```clojure\n; Write a function which takes two sequences and returns the first item from each, then the second item from each, then the third, etc.\n\n; Special Restrictions:\n; interleave\n\n(= (__ [1 2 3] [:a :b :c]) '(1 :a 2 :b 3 :c))\n\n\t\n(= (__ [1 2] [3 4 5 6]) '(1 3 2 4))\n\n\t\n(= (__ [1 2 3 4] [5]) [1 5])\n\n\t\n(= (__ [30 20] [25 15]) [30 25 20 15])```"}]}],"title":"4clojure - Problem 39"},{"create-time":1614435028049,"edit-time:":1614435028049,"uid":"lT1e6HFiSMO","children":[{"edit-time:":1614435028049,"uid":"aqyXegBvcWC","string":"**Title:** Interpose a Seq"},{"edit-time:":1614435028049,"uid":"1XlXnneTV4v","string":"**URL:** https://www.4clojure.com/problem/40"},{"edit-time:":1614435028049,"uid":"oWqEyNbSog1","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028049,"uid":"s1lo3VNMHNE","string":"Difficulty: Easy"},{"edit-time:":1614435028049,"uid":"34h7NvEmpbq","string":"Topics: seqs core-functions"}]},{"edit-time:":1614435028049,"uid":"q5jLn5TVspm","string":"**Problem:**","children":[{"edit-time:":1614435028049,"uid":"IWZ1MxgXodE","string":"```clojure\n; Write a function which separates the items of a sequence by an arbitrary value.\n\n; Special Restrictions:\n; interpose\n\n(= (__ 0 [1 2 3]) [1 0 2 0 3])\n\n\t\n(= (apply str (__ \", \" [\"one\" \"two\" \"three\"])) \"one, two, three\")\n\n\t\n(= (__ :z [:a :b :c :d]) [:a :z :b :z :c :z :d])```"}]}],"title":"4clojure - Problem 40"},{"create-time":1614435028049,"edit-time:":1614435028049,"uid":"OL4V1f5Doeo","children":[{"edit-time:":1614435028049,"uid":"BBWWtef6wrW","string":"**Title:** Drop Every Nth Item"},{"edit-time:":1614435028049,"uid":"6NyFAt5yWMW","string":"**URL:** https://www.4clojure.com/problem/41"},{"edit-time:":1614435028049,"uid":"g86PubGA6In","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028049,"uid":"mRqfTnXnYv7","string":"Difficulty: Easy"},{"edit-time:":1614435028049,"uid":"sKvyQYtMmH0","string":"Topics: seqs"}]},{"edit-time:":1614435028049,"uid":"mco7u7T1SAS","string":"**Problem:**","children":[{"edit-time:":1614435028049,"uid":"xNum1a-wo2F","string":"```clojure\n; Write a function which drops every Nth item from a sequence.\n\n(= (__ [1 2 3 4 5 6 7 8] 3) [1 2 4 5 7 8])\n\n\t\n(= (__ [:a :b :c :d :e :f] 2) [:a :c :e])\n\n\t\n(= (__ [1 2 3 4 5 6] 4) [1 2 3 5 6])```"}]}],"title":"4clojure - Problem 41"},{"create-time":1614435028049,"edit-time:":1614435028049,"uid":"yAAecmtS-6J","children":[{"edit-time:":1614435028049,"uid":"-n315JEOqQB","string":"**Title:** Factorial Fun"},{"edit-time:":1614435028049,"uid":"VCn3aVaWBrr","string":"**URL:** https://www.4clojure.com/problem/42"},{"edit-time:":1614435028049,"uid":"1ETVeK3U7sk","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028049,"uid":"7OXxyyOtH-k","string":"Difficulty: Easy"},{"edit-time:":1614435028049,"uid":"lEFFt39hOmT","string":"Topics: math"}]},{"edit-time:":1614435028049,"uid":"03hSkDAohND","string":"**Problem:**","children":[{"edit-time:":1614435028049,"uid":"Omp94MLVevJ","string":"```clojure\n; Write a function which calculates factorials.\n\n(= (__ 1) 1)\n\n\t\n(= (__ 3) 6)\n\n\t\n(= (__ 5) 120)\n\n\t\n(= (__ 8) 40320)```"}]}],"title":"4clojure - Problem 42"},{"create-time":1614435028049,"edit-time:":1614435028049,"uid":"il2lZViCvPh","children":[{"edit-time:":1614435028049,"uid":"sHUGG7ZImhl","string":"**Title:** Reverse Interleave"},{"edit-time:":1614435028049,"uid":"U84Q9iYXgXr","string":"**URL:** https://www.4clojure.com/problem/43"},{"edit-time:":1614435028049,"uid":"FBTiZSZy4Ho","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028049,"uid":"Akg0rjU7a4q","string":"Difficulty: Medium"},{"edit-time:":1614435028049,"uid":"xqlZ_AbfGZm","string":"Topics: seqs"}]},{"edit-time:":1614435028049,"uid":"OhE8p3A4aDl","string":"**Syntax**:","children":[{"edit-time:":1614435028049,"uid":"yZyKfqNSFZc","string":"```clojure\n(range ...)```"}]},{"edit-time:":1614435028049,"uid":"D-dC1BJ9OzR","string":"**Problem:**","children":[{"edit-time:":1614435028049,"uid":"M7lOY2luVZI","string":"```clojure\n; Write a function which reverses the interleave process into x number of subsequences.\n\n(= (__ [1 2 3 4 5 6] 2) '((1 3 5) (2 4 6)))\n\n\t\n(= (__ (range 9) 3) '((0 3 6) (1 4 7) (2 5 8)))\n\n\t\n(= (__ (range 10) 5) '((0 5) (1 6) (2 7) (3 8) (4 9)))```"}]}],"title":"4clojure - Problem 43"},{"create-time":1614435028049,"edit-time:":1614435028049,"uid":"jj0U8eG88py","children":[{"edit-time:":1614435028049,"uid":"KCuRzA5BLUO","string":"**Title:** Rotate Sequence"},{"edit-time:":1614435028049,"uid":"Bx1bxMPc1Lt","string":"**URL:** https://www.4clojure.com/problem/44"},{"edit-time:":1614435028049,"uid":"1Pzgjcg8xRT","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028049,"uid":"g-2sjIP39_V","string":"Difficulty: Medium"},{"edit-time:":1614435028049,"uid":"VYO8dncav8i","string":"Topics: seqs"}]},{"edit-time:":1614435028049,"uid":"9IpJaLg5Ro4","string":"**Problem:**","children":[{"edit-time:":1614435028049,"uid":"bKU0HshmMTX","string":"```clojure\n; Write a function which can rotate a sequence in either direction.\n\n(= (__ 2 [1 2 3 4 5]) '(3 4 5 1 2))\n\n\t\n(= (__ -2 [1 2 3 4 5]) '(4 5 1 2 3))\n\n\t\n(= (__ 6 [1 2 3 4 5]) '(2 3 4 5 1))\n\n\t\n(= (__ 1 '(:a :b :c)) '(:b :c :a))\n\n\t\n(= (__ -4 '(:a :b :c)) '(:c :a :b))```"}]}],"title":"4clojure - Problem 44"},{"create-time":1614435028049,"edit-time:":1614435028049,"uid":"Q1cNZKecLLH","children":[{"edit-time:":1614435028049,"uid":"ngg215tEfct","string":"**Title:** Intro to Iterate"},{"edit-time:":1614435028049,"uid":"A6Dsa6VITNh","string":"**URL:** https://www.4clojure.com/problem/45"},{"edit-time:":1614435028049,"uid":"SD7U4KTIPCg","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028049,"uid":"YGHT8QUxugh","string":"Difficulty: Easy"},{"edit-time:":1614435028049,"uid":"7-x9_lXU-zZ","string":"Topics: seqs"}]},{"edit-time:":1614435028049,"uid":"4WaepVYwfZF","string":"**Syntax**:","children":[{"edit-time:":1614435028049,"uid":"UW-LpI2fdhj","string":"```clojure\n(take ...)```"},{"edit-time:":1614435028049,"uid":"V2QWMcQROiT","string":"```clojure\n(iterate ...)```"}]},{"edit-time:":1614435028049,"uid":"iR4ExUbZidG","string":"**Problem:**","children":[{"edit-time:":1614435028049,"uid":"PaIdMMwnlf9","string":"```clojure\n; The iterate function can be used to produce an infinite lazy sequence.\n\n(= __ (take 5 (iterate #(+ 3 %) 1)))```"}]}],"title":"4clojure - Problem 45"},{"create-time":1614435028049,"edit-time:":1614435028049,"uid":"G7x0AJ-ohO2","children":[{"edit-time:":1614435028049,"uid":"x6lhDB9nHY7","string":"**Title:** Flipping out"},{"edit-time:":1614435028049,"uid":"sioHB9VvqVa","string":"**URL:** https://www.4clojure.com/problem/46"},{"edit-time:":1614435028049,"uid":"k6FtJG1cZRo","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028049,"uid":"F2HoAcqaE50","string":"Difficulty: Medium"},{"edit-time:":1614435028049,"uid":"ubCQsMXrPsZ","string":"Topics: higher-order-functions"}]},{"edit-time:":1614435028049,"uid":"h4BEoKoH4FR","string":"**Syntax**:","children":[{"edit-time:":1614435028049,"uid":"x-W_OGUXbD7","string":"```clojure\n(nth ...)```"},{"edit-time:":1614435028049,"uid":"5yauxmmIg7D","string":"```clojure\n(quot ...)```"}]},{"edit-time:":1614435028049,"uid":"T3rru_h0Gz0","string":"**Problem:**","children":[{"edit-time:":1614435028049,"uid":"46HZRUSfZA5","string":"```clojure\n; Write a higher-order function which flips the order of the arguments of an input function.\n\n(= 3 ((__ nth) 2 [1 2 3 4 5]))\n\n\t\n(= true ((__ >) 7 8))\n\n\t\n(= 4 ((__ quot) 2 8))\n\n\t\n(= [1 2 3] ((__ take) [1 2 3 4 5] 3))```"}]}],"title":"4clojure - Problem 46"},{"create-time":1614435028049,"edit-time:":1614435028049,"uid":"UYCmE61biH2","children":[{"edit-time:":1614435028049,"uid":"I3RgkEaSZ3Y","string":"**Title:** Contain Yourself"},{"edit-time:":1614435028049,"uid":"dB_im8zw13T","string":"**URL:** https://www.4clojure.com/problem/47"},{"edit-time:":1614435028049,"uid":"IKHui6M9_Xn","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028049,"uid":"KMgx3b-bk_T","string":"Difficulty: Easy"}]},{"edit-time:":1614435028049,"uid":"zjmvsYgcFqN","string":"**Problem:**","children":[{"edit-time:":1614435028049,"uid":"PUHU0kneE6A","string":"```clojure\n; The contains? function checks if a KEY is present in a given collection.\n; This often leads beginner clojurians to use it incorrectly with numerically indexed collections like vectors and lists.\n\n(contains? #{4 5 6} __)\n\n\t\n(contains? [1 1 1 1 1] __)\n\n\t\n(contains? {4 :a 2 :b} __)\n\n\t\n(not (contains? [1 2 4] __))```"}]}],"title":"4clojure - Problem 47"},{"create-time":1614435028049,"edit-time:":1614435028049,"uid":"xEBikETf1ci","children":[{"edit-time:":1614435028049,"uid":"knozi2JqzJ_","string":"**Title:** Intro to some"},{"edit-time:":1614435028049,"uid":"T2oY9-fz5VE","string":"**URL:** https://www.4clojure.com/problem/48"},{"edit-time:":1614435028049,"uid":"4HqwvYbDs8o","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028049,"uid":"OXVEIOnuheM","string":"Difficulty: Easy"}]},{"edit-time:":1614435028049,"uid":"3qfOPPpFzTN","string":"**Syntax**:","children":[{"edit-time:":1614435028049,"uid":"zu2x6dDf9zc","string":"```clojure\n(some ...)```"}]},{"edit-time:":1614435028049,"uid":"gfPr498-3Fg","string":"**Problem:**","children":[{"edit-time:":1614435028049,"uid":"s0UfQ7ERj49","string":"```clojure\n; The some function takes a predicate function and a collection.\n; It returns the first logical true value of (predicate x) where x is an item in the collection.\n\n(= __ (some #{2 7 6} [5 6 7 8]))\n\n\t\n(= __ (some #(when (even? %) %) [5 6 7 8]))```"}]}],"title":"4clojure - Problem 48"},{"create-time":1614435028049,"edit-time:":1614435028049,"uid":"IqwHTMJBUQL","children":[{"edit-time:":1614435028049,"uid":"mWO61CcA5Gi","string":"**Title:** Split a sequence"},{"edit-time:":1614435028049,"uid":"-qObTFvG90v","string":"**URL:** https://www.4clojure.com/problem/49"},{"edit-time:":1614435028049,"uid":"-_YWb1IfQvA","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028049,"uid":"xenG-d2WIgN","string":"Difficulty: Easy"},{"edit-time:":1614435028049,"uid":"PqIlBrnq2LI","string":"Topics: seqs core-functions"}]},{"edit-time:":1614435028049,"uid":"qLpiEESfPw8","string":"**Problem:**","children":[{"edit-time:":1614435028049,"uid":"N2_F-TW0oNX","string":"```clojure\n; Write a function which will split a sequence into two parts.\n\n; Special Restrictions:\n; split-at\n\n(= (__ 3 [1 2 3 4 5 6]) [[1 2 3] [4 5 6]])\n\n\t\n(= (__ 1 [:a :b :c :d]) [[:a] [:b :c :d]])\n\n\t\n(= (__ 2 [[1 2] [3 4] [5 6]]) [[[1 2] [3 4]] [[5 6]]])```"}]}],"title":"4clojure - Problem 49"},{"create-time":1614435028049,"edit-time:":1614435028049,"uid":"OnuiiGSmv1o","children":[{"edit-time:":1614435028049,"uid":"VvBm5Be1OEj","string":"**Title:** Split by Type"},{"edit-time:":1614435028049,"uid":"l0xhvvrvmdT","string":"**URL:** https://www.4clojure.com/problem/50"},{"edit-time:":1614435028049,"uid":"J8YeUbLJjdm","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028049,"uid":"ropMRxfjuvp","string":"Difficulty: Medium"},{"edit-time:":1614435028049,"uid":"jadBmQjI1fn","string":"Topics: seqs"}]},{"edit-time:":1614435028050,"uid":"CoMoJyZZsLq","string":"**Problem:**","children":[{"edit-time:":1614435028049,"uid":"S0xw1534gfy","string":"```clojure\n; Write a function which takes a sequence consisting of items with different types and splits them up into a set of homogeneous sub-sequences.\n; The internal order of each sub-sequence should be maintained, but the sub-sequences themselves can be returned in any order (this is why 'set' is used in the test cases).\n\n(= (set (__ [1 :a 2 :b 3 :c])) #{[1 2 3] [:a :b :c]})\n\n\t\n(= (set (__ [:a \"foo\"  \"bar\" :b])) #{[:a :b] [\"foo\" \"bar\"]})\n\n\t\n(= (set (__ [[1 2] :a [3 4] 5 6 :b])) #{[[1 2] [3 4]] [:a :b] [5 6]})```"}]}],"title":"4clojure - Problem 50"},{"create-time":1614435028050,"edit-time:":1614435028050,"uid":"QtW1xWIJphj","children":[{"edit-time:":1614435028050,"uid":"Wz58OZoT-eu","string":"**Title:** Advanced Destructuring"},{"edit-time:":1614435028050,"uid":"BQExRyZUbtD","string":"**URL:** https://www.4clojure.com/problem/51"},{"edit-time:":1614435028050,"uid":"P_w7vVX91gE","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028050,"uid":"NTvbqbLXB9j","string":"Difficulty: Easy"},{"edit-time:":1614435028050,"uid":"_KmT_facjpb","string":"Topics: destructuring"}]},{"edit-time:":1614435028050,"uid":"xlrfxebDbFu","string":"**Problem:**","children":[{"edit-time:":1614435028050,"uid":"XAg4Ez0LG-A","string":"```clojure\n; Here is an example of some more sophisticated destructuring.\n\n(= [1 2 [3 4 5] [1 2 3 4 5]] (let [[a b & c :as d] __] [a b c d]))```"}]}],"title":"4clojure - Problem 51"},{"create-time":1614435028050,"edit-time:":1614435028050,"uid":"0EwfLlttmt0","children":[{"edit-time:":1614435028050,"uid":"SRNk0toAvI7","string":"**Title:** Intro to Destructuring"},{"edit-time:":1614435028050,"uid":"jQFe1HQIdkb","string":"**URL:** https://www.4clojure.com/problem/52"},{"edit-time:":1614435028050,"uid":"E9XXwVOdnRb","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028050,"uid":"pEL6wJI8W4g","string":"Difficulty: Elementary"},{"edit-time:":1614435028050,"uid":"L6sr05InEpj","string":"Topics: destructuring"}]},{"edit-time:":1614435028050,"uid":"XqyLEjCcnuz","string":"**Problem:**","children":[{"edit-time:":1614435028050,"uid":"03uYWrjsx5K","string":"```clojure\n; Let bindings and function parameter lists support destructuring.\n\n(= [2 4] (let [[a b c d e] [0 1 2 3 4]] __))```"}]}],"title":"4clojure - Problem 52"},{"create-time":1614435028050,"edit-time:":1614435028050,"uid":"z4HUVo3BiRJ","children":[{"edit-time:":1614435028050,"uid":"vPED1y3ZjNs","string":"**Title:** Longest Increasing Sub-Seq"},{"edit-time:":1614435028050,"uid":"2b6atbO6IXI","string":"**URL:** https://www.4clojure.com/problem/53"},{"edit-time:":1614435028050,"uid":"WGNBc4NS5EF","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028050,"uid":"5itZpG2gRID","string":"Difficulty: Hard"},{"edit-time:":1614435028050,"uid":"YgzdmheaX7O","string":"Topics: seqs"}]},{"edit-time:":1614435028050,"uid":"xBPHugjAvZ7","string":"**Problem:**","children":[{"edit-time:":1614435028050,"uid":"2pH_wm_Nrsn","string":"```clojure\n; Given a vector of integers, find the longest consecutive sub-sequence of increasing numbers.\n; If two sub-sequences have the same length, use the one that occurs first.\n; An increasing sub-sequence must have a length of 2 or greater to qualify.\n\n(= (__ [1 0 1 2 3 0 4 5]) [0 1 2 3])\n\n\t\n(= (__ [5 6 1 3 2 7]) [5 6])\n\n\t\n(= (__ [2 3 3 4 5]) [3 4 5])\n\n\t\n(= (__ [7 6 5 4]) [])```"}]}],"title":"4clojure - Problem 53"},{"create-time":1614435028050,"edit-time:":1614435028050,"uid":"N57srCujOuA","children":[{"edit-time:":1614435028050,"uid":"J0Cp5_V2h0F","string":"**Title:** Partition a Sequence"},{"edit-time:":1614435028050,"uid":"Iv2HHZkdxO4","string":"**URL:** https://www.4clojure.com/problem/54"},{"edit-time:":1614435028050,"uid":"56S9b_TlhFY","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028050,"uid":"3ZnfK8tHgH3","string":"Difficulty: Medium"},{"edit-time:":1614435028050,"uid":"8IlZY-hGUbI","string":"Topics: seqs core-functions"}]},{"edit-time:":1614435028050,"uid":"iXFvGCiYZpM","string":"**Problem:**","children":[{"edit-time:":1614435028050,"uid":"AOaG36UJT_R","string":"```clojure\n; Write a function which returns a sequence of lists of x items each.\n; Lists of less than x items should not be returned.\n\n; Special Restrictions:\n; partition\n; partition-all\n\n(= (__ 3 (range 9)) '((0 1 2) (3 4 5) (6 7 8)))\n\n\t\n(= (__ 2 (range 8)) '((0 1) (2 3) (4 5) (6 7)))\n\n\t\n(= (__ 3 (range 8)) '((0 1 2) (3 4 5)))```"}]}],"title":"4clojure - Problem 54"},{"create-time":1614435028050,"edit-time:":1614435028050,"uid":"Su1jtzl89lx","children":[{"edit-time:":1614435028050,"uid":"5DtBv850mnd","string":"**Title:** Count Occurrences"},{"edit-time:":1614435028050,"uid":"CEHH8iQLX_4","string":"**URL:** https://www.4clojure.com/problem/55"},{"edit-time:":1614435028050,"uid":"9fDrGtiYvZI","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028050,"uid":"xw2nbAue9uG","string":"Difficulty: Medium"},{"edit-time:":1614435028050,"uid":"FjzmJ2LpLA5","string":"Topics: seqs core-functions"}]},{"edit-time:":1614435028050,"uid":"hyUR9kDV2IZ","string":"**Problem:**","children":[{"edit-time:":1614435028050,"uid":"bBAfFg0NQcq","string":"```clojure\n; Write a function which returns a map containing the number of occurences of each distinct item in a sequence.\n\n; Special Restrictions:\n; frequencies\n\n(= (__ [1 1 2 3 2 1 1]) {1 4, 2 2, 3 1})\n\n\t\n(= (__ [:b :a :b :a :b]) {:a 2, :b 3})\n\n\t\n(= (__ '([1 2] [1 3] [1 3])) {[1 2] 1, [1 3] 2})```"}]}],"title":"4clojure - Problem 55"},{"create-time":1614435028050,"edit-time:":1614435028050,"uid":"2pImJ6Xotbu","children":[{"edit-time:":1614435028050,"uid":"8LznK8DMK6S","string":"**Title:** Find Distinct Items"},{"edit-time:":1614435028050,"uid":"gcBAFdjiNXA","string":"**URL:** https://www.4clojure.com/problem/56"},{"edit-time:":1614435028050,"uid":"sZKS0Qlu7P4","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028050,"uid":"v_svTpbd55I","string":"Difficulty: Medium"},{"edit-time:":1614435028050,"uid":"bu6RtMOzN9B","string":"Topics: seqs core-functions"}]},{"edit-time:":1614435028050,"uid":"CHPBn2aY_vS","string":"**Problem:**","children":[{"edit-time:":1614435028050,"uid":"fEIcz9MuVWS","string":"```clojure\n; Write a function which removes the duplicates from a sequence.\n; Order of the items must be maintained.\n\n; Special Restrictions:\n; distinct\n\n(= (__ [1 2 1 3 1 2 4]) [1 2 3 4])\n\n\t\n(= (__ [:a :a :b :b :c :c]) [:a :b :c])\n\n\t\n(= (__ '([2 4] [1 2] [1 3] [1 3])) '([2 4] [1 2] [1 3]))\n\n\t\n(= (__ (range 50)) (range 50))```"}]}],"title":"4clojure - Problem 56"},{"create-time":1614435028050,"edit-time:":1614435028050,"uid":"etEcDZ6uScW","children":[{"edit-time:":1614435028050,"uid":"LIJ6Qe55ImM","string":"**Title:** Simple Recursion"},{"edit-time:":1614435028050,"uid":"7U4oA6E4Hqd","string":"**URL:** https://www.4clojure.com/problem/57"},{"edit-time:":1614435028050,"uid":"RXvqgoGpvbk","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028050,"uid":"yAGj84ix_J6","string":"Difficulty: Elementary"},{"edit-time:":1614435028050,"uid":"YXgxQgLguOl","string":"Topics: recursion"}]},{"edit-time:":1614435028050,"uid":"Sgjz8Kru_RH","string":"**Syntax**:","children":[{"edit-time:":1614435028050,"uid":"AubrujMUqCi","string":"```clojure\n(dec ...)```"}]},{"edit-time:":1614435028050,"uid":"6M1NsVHM5bI","string":"**Problem:**","children":[{"edit-time:":1614435028050,"uid":"fpvA5F5m8sJ","string":"```clojure\n; A recursive function is a function which calls itself.\n; This is one of the fundamental techniques used in functional programming.\n\n(= __ ((fn foo [x] (when (> x 0) (conj (foo (dec x)) x))) 5))```"}]}],"title":"4clojure - Problem 57"},{"create-time":1614435028050,"edit-time:":1614435028050,"uid":"xeLtSuSQyDF","children":[{"edit-time:":1614435028050,"uid":"OetOHYe94py","string":"**Title:** Function Composition"},{"edit-time:":1614435028050,"uid":"KB4KKlMYj1j","string":"**URL:** https://www.4clojure.com/problem/58"},{"edit-time:":1614435028050,"uid":"2DDOFL54juJ","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028050,"uid":"pFbvcA13PHJ","string":"Difficulty: Medium"},{"edit-time:":1614435028050,"uid":"ve_Izupb2YQ","string":"Topics: higher-order-functions core-functions"}]},{"edit-time:":1614435028050,"uid":"2wkkedYhflP","string":"**Syntax**:","children":[{"edit-time:":1614435028050,"uid":"fHhHEU0GjBc","string":"```clojure\n(reverse ...)```"},{"edit-time:":1614435028050,"uid":"-ALCNu-TmXU","string":"```clojure\n(mod ...)```"}]},{"edit-time:":1614435028050,"uid":"hQuuyQ3dxQS","string":"**Problem:**","children":[{"edit-time:":1614435028050,"uid":"sBwV5VUQNvh","string":"```clojure\n; Write a function which allows you to create function compositions.\n; The parameter list should take a variable number of functions, and create a function that applies them from right-to-left.\n\n; Special Restrictions:\n; comp\n\n(= [3 2 1] ((__ rest reverse) [1 2 3 4]))\n\n\t\n(= 5 ((__ (partial + 3) second) [1 2 3 4]))\n\n\t\n(= true ((__ zero? #(mod % 8) +) 3 5 7 9))\n\n\t\n(= \"HELLO\" ((__ #(.toUpperCase %) #(apply str %) take) 5 \"hello world\"))```"}]}],"title":"4clojure - Problem 58"},{"create-time":1614435028050,"edit-time:":1614435028050,"uid":"6AXJYP9a39M","children":[{"edit-time:":1614435028050,"uid":"E0JgkKnF4UJ","string":"**Title:** Juxtaposition"},{"edit-time:":1614435028050,"uid":"OyxztFc-ezC","string":"**URL:** https://www.4clojure.com/problem/59"},{"edit-time:":1614435028050,"uid":"JmPbP5Hk0bU","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028050,"uid":"mKR642gyff4","string":"Difficulty: Medium"},{"edit-time:":1614435028050,"uid":"xoeRwou3HBA","string":"Topics: higher-order-functions core-functions"}]},{"edit-time:":1614435028050,"uid":"gB9CxMRV_0A","string":"**Syntax**:","children":[{"edit-time:":1614435028050,"uid":"v11enl6JcGW","string":"```clojure\n(min ...)```"},{"edit-time:":1614435028050,"uid":"ZN7_CfMysS_","string":"```clojure\n(count ...)```"}]},{"edit-time:":1614435028050,"uid":"5CV4hik6Hwj","string":"**Problem:**","children":[{"edit-time:":1614435028050,"uid":"lSE2dPshbk3","string":"```clojure\n; Take a set of functions and return a new function that takes a variable number of arguments and returns a sequence containing the result of applying each function left-to-right to the argument list.\n\n; Special Restrictions:\n; juxt\n\n(= [21 6 1] ((__ + max min) 2 3 5 1 6 4))\n\n\t\n(= [\"HELLO\" 5] ((__ #(.toUpperCase %) count) \"hello\"))\n\n\t\n(= [2 6 4] ((__ :a :c :b) {:a 2, :b 4, :c 6, :d 8 :e 10}))```"}]}],"title":"4clojure - Problem 59"},{"create-time":1614435028050,"edit-time:":1614435028050,"uid":"j8eRWz9pxS1","children":[{"edit-time:":1614435028050,"uid":"OrlcsGhQ-hT","string":"**Title:** Sequence Reductions"},{"edit-time:":1614435028050,"uid":"GNPkMH4YZsu","string":"**URL:** https://www.4clojure.com/problem/60"},{"edit-time:":1614435028050,"uid":"t7-psexBfxJ","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028050,"uid":"CuumvI2sDLR","string":"Difficulty: Medium"},{"edit-time:":1614435028050,"uid":"THr5Sl3tlBz","string":"Topics: seqs core-functions"}]},{"edit-time:":1614435028050,"uid":"ErzjPKme0Ng","string":"**Syntax**:","children":[{"edit-time:":1614435028050,"uid":"2izi3iN6hpR","string":"```clojure\n(reduce ...)```"}]},{"edit-time:":1614435028050,"uid":"3ywGp6Gpso7","string":"**Problem:**","children":[{"edit-time:":1614435028050,"uid":"7qs-tCgZq-D","string":"```clojure\n; Write a function which behaves like reduce, but returns each intermediate value of the reduction.\n; Your function must accept either two or three arguments, and the return sequence must be lazy.\n\n; Special Restrictions:\n; reductions\n\n(= (take 5 (__ + (range))) [0 1 3 6 10])\n\n\t\n(= (__ conj [1] [2 3 4]) [[1] [1 2] [1 2 3] [1 2 3 4]])\n\n\t\n(= (last (__ * 2 [3 4 5])) (reduce * 2 [3 4 5]) 120)```"}]}],"title":"4clojure - Problem 60"},{"create-time":1614435028050,"edit-time:":1614435028050,"uid":"naAlrfCsqJG","children":[{"edit-time:":1614435028050,"uid":"6Jrdwcv6KLx","string":"**Title:** Map Construction"},{"edit-time:":1614435028050,"uid":"pQBAO921ivD","string":"**URL:** https://www.4clojure.com/problem/61"},{"edit-time:":1614435028050,"uid":"V1stn5KsPEj","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028050,"uid":"JqLvBppO0_m","string":"Difficulty: Easy"},{"edit-time:":1614435028050,"uid":"I3NL4pVPuSo","string":"Topics: core-functions"}]},{"edit-time:":1614435028050,"uid":"cmw13OORXxV","string":"**Problem:**","children":[{"edit-time:":1614435028050,"uid":"S1kab0rFSTt","string":"```clojure\n; Write a function which takes a vector of keys and a vector of values and constructs a map from them.\n\n; Special Restrictions:\n; zipmap\n\n(= (__ [:a :b :c] [1 2 3]) {:a 1, :b 2, :c 3})\n\n\t\n(= (__ [1 2 3 4] [\"one\" \"two\" \"three\"]) {1 \"one\", 2 \"two\", 3 \"three\"})\n\n\t\n(= (__ [:foo :bar] [\"foo\" \"bar\" \"baz\"]) {:foo \"foo\", :bar \"bar\"})```"}]}],"title":"4clojure - Problem 61"},{"create-time":1614435028050,"edit-time:":1614435028050,"uid":"g-i3p_n0umg","children":[{"edit-time:":1614435028050,"uid":"kmj4YxtjpBE","string":"**Title:** Re-implement Iterate"},{"edit-time:":1614435028050,"uid":"mMDhQf9FtVM","string":"**URL:** https://www.4clojure.com/problem/62"},{"edit-time:":1614435028050,"uid":"TEWFoGt_bIt","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028050,"uid":"QkyfSUoOhSG","string":"Difficulty: Easy"},{"edit-time:":1614435028050,"uid":"wXJqRJA4Ctb","string":"Topics: seqs core-functions"}]},{"edit-time:":1614435028050,"uid":"Gfp_bN3GGjV","string":"**Syntax**:","children":[{"edit-time:":1614435028050,"uid":"lTisDsRHqSt","string":"```clojure\n(inc ...)```"},{"edit-time:":1614435028050,"uid":"zRIIEYFfawh","string":"```clojure\n(cycle ...)```"}]},{"edit-time:":1614435028050,"uid":"_rsiUccXrzC","string":"**Problem:**","children":[{"edit-time:":1614435028050,"uid":"08p8JCXkZHd","string":"```clojure\n; Given a side-effect free function f and an initial value x write a function which returns an infinite lazy sequence of x, (f x), (f (f x)), (f (f (f x))), etc.\n\n; Special Restrictions:\n; iterate\n\n(= (take 5 (__ #(* 2 %) 1)) [1 2 4 8 16])\n\n\t\n(= (take 100 (__ inc 0)) (take 100 (range)))\n\n\t\n(= (take 9 (__ #(inc (mod % 3)) 1)) (take 9 (cycle [1 2 3])))```"}]}],"title":"4clojure - Problem 62"},{"create-time":1614435028050,"edit-time:":1614435028050,"uid":"uRuYBsxyIha","children":[{"edit-time:":1614435028050,"uid":"FwgD17yjhBg","string":"**Title:** Group a Sequence"},{"edit-time:":1614435028050,"uid":"yUgsi-wwwkY","string":"**URL:** https://www.4clojure.com/problem/63"},{"edit-time:":1614435028050,"uid":"ErzazYDDjJt","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028050,"uid":"H8HxROfn2yq","string":"Difficulty: Easy"},{"edit-time:":1614435028050,"uid":"7AKkQFCM_xI","string":"Topics: core-functions"}]},{"edit-time:":1614435028050,"uid":"FcFfjdto394","string":"**Problem:**","children":[{"edit-time:":1614435028050,"uid":"yWLpH9qJoVX","string":"```clojure\n; Given a function f and a sequence s, write a function which returns a map.\n; The keys should be the values of f applied to each item in s.\n; The value at each key should be a vector of corresponding items in the order they appear in s.\n\n; Special Restrictions:\n; group-by\n\n(= (__ #(> % 5) [1 3 6 8]) {false [1 3], true [6 8]})\n\n\t\n(= (__ #(apply / %) [[1 2] [2 4] [4 6] [3 6]])\n   {1/2 [[1 2] [2 4] [3 6]], 2/3 [[4 6]]})\n\n\t\n(= (__ count [[1] [1 2] [3] [1 2 3] [2 3]])\n   {1 [[1] [3]], 2 [[1 2] [2 3]], 3 [[1 2 3]]})```"}]}],"title":"4clojure - Problem 63"},{"create-time":1614435028050,"edit-time:":1614435028050,"uid":"_5C3Wnw3BMJ","children":[{"edit-time:":1614435028050,"uid":"__Ah_QzZr5-","string":"**Title:** Intro to Reduce"},{"edit-time:":1614435028050,"uid":"sAzUHnQzMNU","string":"**URL:** https://www.4clojure.com/problem/64"},{"edit-time:":1614435028050,"uid":"LXRefPxzUgm","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028050,"uid":"N-S2E7bFiW6","string":"Difficulty: Elementary"},{"edit-time:":1614435028050,"uid":"tSqCLbBbRsK","string":"Topics: seqs"}]},{"edit-time:":1614435028050,"uid":"3xJop7FVyGY","string":"**Problem:**","children":[{"edit-time:":1614435028050,"uid":"i1iv1EVwWvx","string":"```clojure\n; Reduce takes a 2 argument function and an optional starting value.\n; It then applies the function to the first 2 items in the sequence (or the starting value and the first element of the sequence).\n; In the next iteration the function will be called on the previous return value and the next item from the sequence, thus reducing the entire collection to one value.\n; Don't worry, it's not as complicated as it sounds.\n\n(= 15 (reduce __ [1 2 3 4 5]))\n\n\t\n(=  0 (reduce __ []))\n\n\t\n(=  6 (reduce __ 1 [2 3]))```"}]}],"title":"4clojure - Problem 64"},{"create-time":1614435028050,"edit-time:":1614435028050,"uid":"_mhJsX_jwkf","children":[{"edit-time:":1614435028050,"uid":"kSi1-ynNJET","string":"**Title:** Black Box Testing"},{"edit-time:":1614435028050,"uid":"nAnHzb0x0rT","string":"**URL:** https://www.4clojure.com/problem/65"},{"edit-time:":1614435028050,"uid":"eoLg2_YstX9","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028050,"uid":"2r0sP8HPFDO","string":"Difficulty: Medium"},{"edit-time:":1614435028050,"uid":"NXg_rJatNpL","string":"Topics: seqs testing"}]},{"edit-time:":1614435028050,"uid":"RaTABEHSngQ","string":"**Syntax**:","children":[{"edit-time:":1614435028050,"uid":"MLnohP_vMKD","string":"```clojure\n(rand-int ...)```"}]},{"edit-time:":1614435028050,"uid":"fk3HN6HOxhc","string":"**Problem:**","children":[{"edit-time:":1614435028050,"uid":"Ydmfs67DarX","string":"```clojure\n; Clojure has many sequence types, which act in subtly different ways.\n; The core functions typically convert them into a uniform \"sequence\" type and work with them that way, but it can be important to understand the behavioral and performance differences so that you know which kind is appropriate for your application.\n; \n; \n; Write a function which takes a collection and returns one of :map, :set, :list, or :vector - describing the type of collection it was given.\n; You won't be allowed to inspect their class or use the built-in predicates like list? - the point is to poke at them and understand their behavior.\n\n; Special Restrictions:\n; class\n; type\n; Class\n; vector?\n; sequential?\n; list?\n; seq?\n; map?\n; set?\n; instance?\n; getClass\n\n(= :map (__ {:a 1, :b 2}))\n\n\t\n(= :list (__ (range (rand-int 20))))\n\n\t\n(= :vector (__ [1 2 3 4 5 6]))\n\n\t\n(= :set (__ #{10 (rand-int 5)}))\n\n\t\n(= [:map :set :vector :list] (map __ [{} #{} [] ()]))```"}]}],"title":"4clojure - Problem 65"},{"create-time":1614435028050,"edit-time:":1614435028050,"uid":"LYH_HGh3Com","children":[{"edit-time:":1614435028050,"uid":"kCXyk04jeAS","string":"**Title:** Greatest Common Divisor"},{"edit-time:":1614435028050,"uid":"zFvolrf8w8z","string":"**URL:** https://www.4clojure.com/problem/66"},{"edit-time:":1614435028050,"uid":"xpsUUTya4U9","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028050,"uid":"jMGDrlRL0tb","string":"Difficulty: Easy"}]},{"edit-time:":1614435028050,"uid":"B1dgJOn1M_o","string":"**Problem:**","children":[{"edit-time:":1614435028050,"uid":"RDDME41DmM4","string":"```clojure\n; Given two integers, write a function which returns the greatest common divisor.\n\n(= (__ 2 4) 2)\n\n\t\n(= (__ 10 5) 5)\n\n\t\n(= (__ 5 7) 1)\n\n\t\n(= (__ 1023 858) 33)```"}]}],"title":"4clojure - Problem 66"},{"create-time":1614435028050,"edit-time:":1614435028050,"uid":"iSuvaEl3MOE","children":[{"edit-time:":1614435028050,"uid":"8qNgx3joHZB","string":"**Title:** Prime Numbers"},{"edit-time:":1614435028050,"uid":"m8g4HgNl-UR","string":"**URL:** https://www.4clojure.com/problem/67"},{"edit-time:":1614435028050,"uid":"L69r_mgC3l2","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028050,"uid":"XN6tLax9d1h","string":"Difficulty: Medium"},{"edit-time:":1614435028050,"uid":"ovnVcgYPP1v","string":"Topics: primes"}]},{"edit-time:":1614435028050,"uid":"xHXKQakpdco","string":"**Problem:**","children":[{"edit-time:":1614435028050,"uid":"nE7sNcDMZ8F","string":"```clojure\n; Write a function which returns the first x number of prime numbers.\n\n(= (__ 2) [2 3])\n\n\t\n(= (__ 5) [2 3 5 7 11])\n\n\t\n(= (last (__ 100)) 541)```"}]}],"title":"4clojure - Problem 67"},{"create-time":1614435028050,"edit-time:":1614435028050,"uid":"ObapQft_CE0","children":[{"edit-time:":1614435028050,"uid":"gEkQm82TQAK","string":"**Title:** Recurring Theme"},{"edit-time:":1614435028050,"uid":"SG6P06ZRhG0","string":"**URL:** https://www.4clojure.com/problem/68"},{"edit-time:":1614435028050,"uid":"J9aDIPj6bWv","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028050,"uid":"TG45uaoxg2B","string":"Difficulty: Elementary"},{"edit-time:":1614435028050,"uid":"DW8u1NzXaMH","string":"Topics: recursion"}]},{"edit-time:":1614435028050,"uid":"_iY0rw3F-CC","string":"**Problem:**","children":[{"edit-time:":1614435028050,"uid":"r23F6dNovkK","string":"```clojure\n; Clojure only has one non-stack-consuming looping construct: recur.\n; Either a function or a loop can be used as the recursion point.\n; Either way, recur rebinds the bindings of the recursion point to the values it is passed.\n; Recur must be called from the tail-position, and calling it elsewhere will result in an error.\n\n(= __\n  (loop [x 5\n         result []]\n    (if (> x 0)\n      (recur (dec x) (conj result (+ 2 x)))\n      result)))```"}]}],"title":"4clojure - Problem 68"},{"create-time":1614435028050,"edit-time:":1614435028050,"uid":"Oj0vYXnXY-e","children":[{"edit-time:":1614435028050,"uid":"UEdmlwtg4R6","string":"**Title:** Merge with a Function"},{"edit-time:":1614435028050,"uid":"BwyfDjhqioD","string":"**URL:** https://www.4clojure.com/problem/69"},{"edit-time:":1614435028050,"uid":"g-IIUHtHZ1s","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028050,"uid":"SeoOmd1D5T7","string":"Difficulty: Medium"},{"edit-time:":1614435028050,"uid":"kyrCuOLSCM-","string":"Topics: core-functions"}]},{"edit-time:":1614435028050,"uid":"zLmH9WPJp3H","string":"**Syntax**:","children":[{"edit-time:":1614435028050,"uid":"koBZopXBM8u","string":"```clojure\n(concat ...)```"}]},{"edit-time:":1614435028050,"uid":"2On3uGj92yf","string":"**Problem:**","children":[{"edit-time:":1614435028050,"uid":"U11yZT2C0kz","string":"```clojure\n; Write a function which takes a function f and a variable number of maps.\n; Your function should return a map that consists of the rest of the maps conj-ed onto the first.\n; If a key occurs in more than one map, the mapping(s) from the latter (left-to-right) should be combined with the mapping in the result by calling (f val-in-result val-in-latter).\n\n; Special Restrictions:\n; merge-with\n\n(= (__ * {:a 2, :b 3, :c 4} {:a 2} {:b 2} {:c 5})\n   {:a 4, :b 6, :c 20})\n\n\t\n(= (__ - {1 10, 2 20} {1 3, 2 10, 3 15})\n   {1 7, 2 10, 3 15})\n\n\t\n(= (__ concat {:a [3], :b [6]} {:a [4 5], :c [8 9]} {:b [7]})\n   {:a [3 4 5], :b [6 7], :c [8 9]})```"}]}],"title":"4clojure - Problem 69"},{"create-time":1614435028050,"edit-time:":1614435028050,"uid":"mBusBgCfZw2","children":[{"edit-time:":1614435028050,"uid":"0079tS9uzBb","string":"**Title:** Word Sorting"},{"edit-time:":1614435028050,"uid":"JkCRihMGOmw","string":"**URL:** https://www.4clojure.com/problem/70"},{"edit-time:":1614435028050,"uid":"C7mg3RWR0FL","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028050,"uid":"kMFzCxolrhO","string":"Difficulty: Medium"},{"edit-time:":1614435028050,"uid":"qZftjFC577d","string":"Topics: sorting"}]},{"edit-time:":1614435028050,"uid":"bcdezR35Kkt","string":"**Problem:**","children":[{"edit-time:":1614435028050,"uid":"SMZ2cvQ_I6F","string":"```clojure\n; Write a function that splits a sentence up into a sorted list of words.\n; Capitalization should not affect sort order and punctuation should be ignored.\n\n(= (__  \"Have a nice day.\")\n   [\"a\" \"day\" \"Have\" \"nice\"])\n\n\t\n(= (__  \"Clojure is a fun language!\")\n   [\"a\" \"Clojure\" \"fun\" \"is\" \"language\"])\n\n\t\n(= (__  \"Fools fall for foolish follies.\")\n   [\"fall\" \"follies\" \"foolish\" \"Fools\" \"for\"])```"}]}],"title":"4clojure - Problem 70"},{"create-time":1614435028050,"edit-time:":1614435028050,"uid":"XDsZl-M1P-P","children":[{"edit-time:":1614435028050,"uid":"ORVDDOjR8kN","string":"**Title:** Rearranging Code: ->"},{"edit-time:":1614435028050,"uid":"1cKXUtCqeSM","string":"**URL:** https://www.4clojure.com/problem/71"},{"edit-time:":1614435028050,"uid":"nMUy1wtm2Do","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028050,"uid":"Ee6wVml7Pir","string":"Difficulty: Elementary"}]},{"edit-time:":1614435028050,"uid":"OGCRQmDyqJz","string":"**Syntax**:","children":[{"edit-time:":1614435028050,"uid":"u8Dtxgh1LCM","string":"```clojure\n(sort ...)```"}]},{"edit-time:":1614435028051,"uid":"IIAUJu7T39p","string":"**Problem:**","children":[{"edit-time:":1614435028051,"uid":"Ysq41ETOwnd","string":"```clojure\n; The -> macro threads an expression x through a variable number of forms.\n; First, x is inserted as the second item in the first form, making a list of it if it is not a list already.\n; Then the first form is inserted as the second item in the second form, making a list of that form if necessary.\n; This process continues for all the forms.\n; Using -> can sometimes make your code more readable.\n\n(= (__ (sort (rest (reverse [2 5 4 1 3 6]))))\n   (-> [2 5 4 1 3 6] (reverse) (rest) (sort) (__))\n   5)```"}]}],"title":"4clojure - Problem 71"},{"create-time":1614435028051,"edit-time:":1614435028051,"uid":"5cGK6n5x3ae","children":[{"edit-time:":1614435028051,"uid":"HJeEKhGkzTA","string":"**Title:** Rearranging Code: ->>"},{"edit-time:":1614435028051,"uid":"l7zvrJwhOOr","string":"**URL:** https://www.4clojure.com/problem/72"},{"edit-time:":1614435028051,"uid":"GUEcWM5IZ82","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028051,"uid":"DKzTKYZRxGj","string":"Difficulty: Elementary"}]},{"edit-time:":1614435028051,"uid":"9HYExqnS0q3","string":"**Syntax**:","children":[{"edit-time:":1614435028051,"uid":"RK_CNg1T6fm","string":"```clojure\n(drop ...)```"},{"edit-time:":1614435028051,"uid":"MVu-KumoMNl","string":"```clojure\n(+ ...)```"}]},{"edit-time:":1614435028051,"uid":"zU6yPaKYwRV","string":"**Problem:**","children":[{"edit-time:":1614435028051,"uid":"VKqNpy0nSfH","string":"```clojure\n; The ->> macro threads an expression x through a variable number of forms.\n; First, x is inserted as the last item in the first form, making a list of it if it is not a list already.\n; Then the first form is inserted as the last item in the second form, making a list of that form if necessary.\n; This process continues for all the forms.\n; Using ->> can sometimes make your code more readable.\n\n(= (__ (map inc (take 3 (drop 2 [2 5 4 1 3 6]))))\n   (->> [2 5 4 1 3 6] (drop 2) (take 3) (map inc) (__))\n   11)```"}]}],"title":"4clojure - Problem 72"},{"create-time":1614435028051,"edit-time:":1614435028051,"uid":"OYcVqrQ04sg","children":[{"edit-time:":1614435028051,"uid":"F6kggWmCklu","string":"**Title:** Analyze a Tic-Tac-Toe Board"},{"edit-time:":1614435028051,"uid":"JjNO0XS9l95","string":"**URL:** https://www.4clojure.com/problem/73"},{"edit-time:":1614435028051,"uid":"vMR_7PIHpw4","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028051,"uid":"nU_Fmo0Sga3","string":"Difficulty: Hard"},{"edit-time:":1614435028051,"uid":"kgN4A7oYgxv","string":"Topics: game"}]},{"edit-time:":1614435028051,"uid":"8Dn6qVJNP-t","string":"**Problem:**","children":[{"edit-time:":1614435028051,"uid":"sH2qhTYQqUm","string":"```clojure\n; A tic-tac-toe board is represented by a two dimensional vector.\n; X is represented by :x, O is represented by :o, and empty is represented by :e.\n; A player wins by placing three Xs or three Os in a horizontal, vertical, or diagonal row.\n; Write a function which analyzes a tic-tac-toe board and returns :x if X has won, :o if O has won, and nil if neither player has won.\n\n(= nil (__ [[:e :e :e]\n            [:e :e :e]\n            [:e :e :e]]))\n\n\t\n(= :x (__ [[:x :e :o]\n           [:x :e :e]\n           [:x :e :o]]))\n\n\t\n(= :o (__ [[:e :x :e]\n           [:o :o :o]\n           [:x :e :x]]))\n\n\t\n(= nil (__ [[:x :e :o]\n            [:x :x :e]\n            [:o :x :o]]))\n\n\t\n(= :x (__ [[:x :e :e]\n           [:o :x :e]\n           [:o :e :x]]))\n\n\t\n(= :o (__ [[:x :e :o]\n           [:x :o :e]\n           [:o :e :x]]))\n\n\t\n(= nil (__ [[:x :o :x]\n            [:x :o :x]\n            [:o :x :o]]))```"}]}],"title":"4clojure - Problem 73"},{"create-time":1614435028051,"edit-time:":1614435028051,"uid":"Sojp7vJb4J0","children":[{"edit-time:":1614435028051,"uid":"VUsjsOUuD7p","string":"**Title:** Filter Perfect Squares"},{"edit-time:":1614435028051,"uid":"8ALcYIyDQs7","string":"**URL:** https://www.4clojure.com/problem/74"},{"edit-time:":1614435028051,"uid":"56Iz1ALOUt8","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028051,"uid":"8_wnhxPfcuU","string":"Difficulty: Medium"}]},{"edit-time:":1614435028051,"uid":"9gr8CV8O3Bf","string":"**Problem:**","children":[{"edit-time:":1614435028051,"uid":"DCOZ2Ij3udC","string":"```clojure\n; Given a string of comma separated integers, write a function which returns a new comma separated string that only contains the numbers which are perfect squares.\n\n(= (__ \"4,5,6,7,8,9\") \"4,9\")\n\n\t\n(= (__ \"15,16,25,36,37\") \"16,25,36\")```"}]}],"title":"4clojure - Problem 74"},{"create-time":1614435028051,"edit-time:":1614435028051,"uid":"zTjz5dzw2XH","children":[{"edit-time:":1614435028051,"uid":"HTjYiX7C1fY","string":"**Title:** Euler's Totient Function"},{"edit-time:":1614435028051,"uid":"P17V2o1lhsC","string":"**URL:** https://www.4clojure.com/problem/75"},{"edit-time:":1614435028051,"uid":"ZJxblU7Xtu8","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028051,"uid":"-AG4RoFCCCw","string":"Difficulty: Medium"}]},{"edit-time:":1614435028051,"uid":"pJW3WN-DjJ9","string":"**Problem:**","children":[{"edit-time:":1614435028051,"uid":"yuTAGH6dVd2","string":"```clojure\n; Two numbers are coprime if their greatest common divisor equals 1.\n; Euler's totient function f(x) is defined as the number of positive integers less than x which are coprime to x.\n; The special case f(1) equals 1.\n; Write a function which calculates Euler's totient function.\n\n(= (__ 1) 1)\n\n\t\n(= (__ 10) (count '(1 3 7 9)) 4)\n\n\t\n(= (__ 40) 16)\n\n\t\n(= (__ 99) 60)```"}]}],"title":"4clojure - Problem 75"},{"create-time":1614435028051,"edit-time:":1614435028051,"uid":"G5Z313qaxBo","children":[{"edit-time:":1614435028051,"uid":"j1HnseDbVqh","string":"**Title:** Intro to Trampoline"},{"edit-time:":1614435028051,"uid":"pKd54OPryOe","string":"**URL:** https://www.4clojure.com/problem/76"},{"edit-time:":1614435028051,"uid":"h6pmSjEj-aa","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028051,"uid":"ZsEsh5QEFn0","string":"Difficulty: Medium"},{"edit-time:":1614435028051,"uid":"ztSt08D5Aja","string":"Topics: recursion"}]},{"edit-time:":1614435028051,"uid":"QSJyngN-5sg","string":"**Syntax**:","children":[{"edit-time:":1614435028051,"uid":"sWetWC1exNj","string":"```clojure\n(trampoline ...)```"}]},{"edit-time:":1614435028051,"uid":"uHq0qDv2s8H","string":"**Problem:**","children":[{"edit-time:":1614435028051,"uid":"3vXgyQGwR6z","string":"```clojure\n; The trampoline function takes a function f and a variable number of parameters.\n; Trampoline calls f with any parameters that were supplied.\n; If f returns a function, trampoline calls that function with no arguments.\n; This is repeated, until the return value is not a function, and then trampoline returns that non-function value.\n; This is useful for implementing mutually recursive algorithms in a way that won't consume the stack.\n\n(= __\n   (letfn\n     [(foo [x y] #(bar (conj x y) y))\n      (bar [x y] (if (> (last x) 10)\n                   x\n                   #(foo x (+ 2 y))))]\n     (trampoline foo [] 1)))```"}]}],"title":"4clojure - Problem 76"},{"create-time":1614435028051,"edit-time:":1614435028051,"uid":"Ss-4T1kosXW","children":[{"edit-time:":1614435028051,"uid":"XBOmBmxKMoQ","string":"**Title:** Anagram Finder"},{"edit-time:":1614435028051,"uid":"EgIg0Ix7_tC","string":"**URL:** https://www.4clojure.com/problem/77"},{"edit-time:":1614435028051,"uid":"V_sWWuvru5Z","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028051,"uid":"vMdcVBYWDti","string":"Difficulty: Medium"}]},{"edit-time:":1614435028051,"uid":"KJzLDGAKhfh","string":"**Problem:**","children":[{"edit-time:":1614435028051,"uid":"y4wqzEh6zSo","string":"```clojure\n; Write a function which finds all the anagrams in a vector of words.\n; A word x is an anagram of word y if all the letters in x can be rearranged in a different order to form y.\n; Your function should return a set of sets, where each sub-set is a group of words which are anagrams of each other.\n; Each sub-set should have at least two words.\n; Words without any anagrams should not be included in the result.\n\n(= (__ [\"meat\" \"mat\" \"team\" \"mate\" \"eat\"])\n   #{#{\"meat\" \"team\" \"mate\"}})\n\n\t\n(= (__ [\"veer\" \"lake\" \"item\" \"kale\" \"mite\" \"ever\"])\n   #{#{\"veer\" \"ever\"} #{\"lake\" \"kale\"} #{\"mite\" \"item\"}})```"}]}],"title":"4clojure - Problem 77"},{"create-time":1614435028051,"edit-time:":1614435028051,"uid":"kQdCBLlgJXa","children":[{"edit-time:":1614435028051,"uid":"5CSgsjFk9TR","string":"**Title:** Reimplement Trampoline"},{"edit-time:":1614435028051,"uid":"HedaqHQvGo-","string":"**URL:** https://www.4clojure.com/problem/78"},{"edit-time:":1614435028051,"uid":"HU8Dgf8hFla","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028051,"uid":"FwbDzDXDAoi","string":"Difficulty: Medium"},{"edit-time:":1614435028051,"uid":"mxwt7jLz7al","string":"Topics: core-functions"}]},{"edit-time:":1614435028051,"uid":"ZQMq0stPbn4","string":"**Problem:**","children":[{"edit-time:":1614435028051,"uid":"8XrupmUjNcd","string":"```clojure\n; Reimplement the function described in \"Intro to Trampoline\".\n\n; Special Restrictions:\n; trampoline\n\n(= (letfn [(triple [x] #(sub-two (* 3 x)))\n          (sub-two [x] #(stop?(- x 2)))\n          (stop? [x] (if (> x 50) x #(triple x)))]\n    (__ triple 2))\n  82)\n\n\t\n(= (letfn [(my-even? [x] (if (zero? x) true #(my-odd? (dec x))))\n          (my-odd? [x] (if (zero? x) false #(my-even? (dec x))))]\n    (map (partial __ my-even?) (range 6)))\n  [true false true false true false])```"}]}],"title":"4clojure - Problem 78"},{"create-time":1614435028051,"edit-time:":1614435028051,"uid":"IhFj9BQeGVI","children":[{"edit-time:":1614435028051,"uid":"4iXCl_F6Czw","string":"**Title:** Triangle Minimal Path"},{"edit-time:":1614435028051,"uid":"CBgi_ChVoMZ","string":"**URL:** https://www.4clojure.com/problem/79"},{"edit-time:":1614435028051,"uid":"g-1IGvWO8DL","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028051,"uid":"NUWMTTP6U0x","string":"Difficulty: Hard"},{"edit-time:":1614435028051,"uid":"uJaH-OYfGqx","string":"Topics: graph-theory"}]},{"edit-time:":1614435028051,"uid":"ecCrR2MkpSV","string":"**Problem:**","children":[{"edit-time:":1614435028051,"uid":"9BJP4evLEbY","string":"```clojure\n; Write a function which calculates the sum of the minimal path through a triangle.\n; The triangle is represented as a collection of vectors.\n; The path should start at the top of the triangle and move to an adjacent number on the next row until the bottom of the triangle is reached.\n\n(= 7 (__ '([1]\n          [2 4]\n         [5 1 4]\n        [2 3 4 5]))) ; 1->2->1->3\n\n\t\n(= 20 (__ '([3]\n           [2 4]\n          [1 9 3]\n         [9 9 2 4]\n        [4 6 6 7 8]\n       [5 7 3 5 1 4]))) ; 3->4->3->2->7->1```"}]}],"title":"4clojure - Problem 79"},{"create-time":1614435028051,"edit-time:":1614435028051,"uid":"OTSKaNv7wrl","children":[{"edit-time:":1614435028051,"uid":"I0xLzBz_mRK","string":"**Title:** Perfect Numbers"},{"edit-time:":1614435028051,"uid":"3YUgh6jPcOa","string":"**URL:** https://www.4clojure.com/problem/80"},{"edit-time:":1614435028051,"uid":"UYhUJXyKh4c","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028051,"uid":"TB4UyRV4vV8","string":"Difficulty: Medium"}]},{"edit-time:":1614435028051,"uid":"n-rTkC65dea","string":"**Problem:**","children":[{"edit-time:":1614435028051,"uid":"wOEkRn7R_W4","string":"```clojure\n; A number is \"perfect\" if the sum of its divisors equal the number itself.\n; 6 is a perfect number because 1+2+3=6.\n; Write a function which returns true for perfect numbers and false otherwise.\n\n(= (__ 6) true)\n\n\t\n(= (__ 7) false)\n\n\t\n(= (__ 496) true)\n\n\t\n(= (__ 500) false)\n\n\t\n(= (__ 8128) true)```"}]}],"title":"4clojure - Problem 80"},{"create-time":1614435028051,"edit-time:":1614435028051,"uid":"FCVGAGn3v9u","children":[{"edit-time:":1614435028051,"uid":"B34FRNicbmi","string":"**Title:** Set Intersection"},{"edit-time:":1614435028051,"uid":"hmnF499NeM3","string":"**URL:** https://www.4clojure.com/problem/81"},{"edit-time:":1614435028051,"uid":"rC16szXy81K","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028051,"uid":"bLg-x_eCBMe","string":"Difficulty: Easy"},{"edit-time:":1614435028051,"uid":"YQN-pTuiuLF","string":"Topics: set-theory"}]},{"edit-time:":1614435028051,"uid":"kAQUqswC4H2","string":"**Problem:**","children":[{"edit-time:":1614435028051,"uid":"2i2twhxvcd4","string":"```clojure\n; Write a function which returns the intersection of two sets.\n; The intersection is the sub-set of items that each set has in common.\n\n; Special Restrictions:\n; intersection\n\n(= (__ #{0 1 2 3} #{2 3 4 5}) #{2 3})\n\n\t\n(= (__ #{0 1 2} #{3 4 5}) #{})\n\n\t\n(= (__ #{:a :b :c :d} #{:c :e :a :f :d}) #{:a :c :d})```"}]}],"title":"4clojure - Problem 81"},{"create-time":1614435028051,"edit-time:":1614435028051,"uid":"T_CUA_FyuV3","children":[{"edit-time:":1614435028051,"uid":"K3mlXW2Zyow","string":"**Title:** Word Chains"},{"edit-time:":1614435028051,"uid":"Avqpdx-yZbh","string":"**URL:** https://www.4clojure.com/problem/82"},{"edit-time:":1614435028051,"uid":"blNmPyq1mrF","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028051,"uid":"DUvMofriozN","string":"Difficulty: Hard"},{"edit-time:":1614435028051,"uid":"lrsZVhMSRlz","string":"Topics: seqs"}]},{"edit-time:":1614435028051,"uid":"46Q16yLEWm2","string":"**Problem:**","children":[{"edit-time:":1614435028051,"uid":"YSqUfdy4QpT","string":"```clojure\n; A word chain consists of a set of words ordered so that each word differs by only one letter from the words directly before and after it.\n; The one letter difference can be either an insertion, a deletion, or a substitution.\n; Here is an example word chain:.\n; \n; \n; cat -> cot -> coat -> oat -> hat -> hot -> hog -> dog\n; \n; Write a function which takes a sequence of words, and returns true if they can be arranged into one continous word chain, and false if they cannot.\n\n(= true (__ #{\"hat\" \"coat\" \"dog\" \"cat\" \"oat\" \"cot\" \"hot\" \"hog\"}))\n\n\t\n(= false (__ #{\"cot\" \"hot\" \"bat\" \"fat\"}))\n\n\t\n(= false (__ #{\"to\" \"top\" \"stop\" \"tops\" \"toss\"}))\n\n\t\n(= true (__ #{\"spout\" \"do\" \"pot\" \"pout\" \"spot\" \"dot\"}))\n\n\t\n(= true (__ #{\"share\" \"hares\" \"shares\" \"hare\" \"are\"}))\n\n\t\n(= false (__ #{\"share\" \"hares\" \"hare\" \"are\"}))```"}]}],"title":"4clojure - Problem 82"},{"create-time":1614435028051,"edit-time:":1614435028051,"uid":"WQiZIQrLL5Z","children":[{"edit-time:":1614435028051,"uid":"YBiBjTb_n-J","string":"**Title:** A Half-Truth"},{"edit-time:":1614435028051,"uid":"p15sf-v0EVO","string":"**URL:** https://www.4clojure.com/problem/83"},{"edit-time:":1614435028051,"uid":"49gRei_Odfo","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028051,"uid":"K5fS3ot2FIc","string":"Difficulty: Easy"}]},{"edit-time:":1614435028051,"uid":"7srD5uDSwny","string":"**Problem:**","children":[{"edit-time:":1614435028051,"uid":"IimvP_bBAWe","string":"```clojure\n; Write a function which takes a variable number of booleans.\n; Your function should return true if some of the parameters are true, but not all of the parameters are true.\n; Otherwise your function should return false.\n\n(= false (__ false false))\n\n\t\n(= true (__ true false))\n\n\t\n(= false (__ true))\n\n\t\n(= true (__ false true false))\n\n\t\n(= false (__ true true true))\n\n\t\n(= true (__ true true true false))```"}]}],"title":"4clojure - Problem 83"},{"create-time":1614435028051,"edit-time:":1614435028051,"uid":"czMT2a0XQDM","children":[{"edit-time:":1614435028051,"uid":"jhkn4ywbToW","string":"**Title:** Transitive Closure"},{"edit-time:":1614435028051,"uid":"ED2VaL2Qtog","string":"**URL:** https://www.4clojure.com/problem/84"},{"edit-time:":1614435028052,"uid":"7t6xjxh2LMk","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028051,"uid":"tb3nWySbZ3W","string":"Difficulty: Hard"},{"edit-time:":1614435028051,"uid":"N8l2ps2qz0a","string":"Topics: set-theory"}]},{"edit-time:":1614435028052,"uid":"NmzNSlYAygK","string":"**Problem:**","children":[{"edit-time:":1614435028052,"uid":"xCj98kZZiIQ","string":"```clojure\n; Write a function which generates the transitive closure of a binary relation.\n; The relation will be represented as a set of 2 item vectors.\n\n(let [divides #{[8 4] [9 3] [4 2] [27 9]}]\n  (= (__ divides) #{[4 2] [8 4] [8 2] [9 3] [27 9] [27 3]}))\n\n\t\n(let [more-legs\n      #{[\"cat\" \"man\"] [\"man\" \"snake\"] [\"spider\" \"cat\"]}]\n  (= (__ more-legs)\n     #{[\"cat\" \"man\"] [\"cat\" \"snake\"] [\"man\" \"snake\"]\n       [\"spider\" \"cat\"] [\"spider\" \"man\"] [\"spider\" \"snake\"]}))\n\n\t\n(let [progeny\n      #{[\"father\" \"son\"] [\"uncle\" \"cousin\"] [\"son\" \"grandson\"]}]\n  (= (__ progeny)\n     #{[\"father\" \"son\"] [\"father\" \"grandson\"]\n       [\"uncle\" \"cousin\"] [\"son\" \"grandson\"]}))```"}]}],"title":"4clojure - Problem 84"},{"create-time":1614435028052,"edit-time:":1614435028052,"uid":"QDKABwsQFoe","children":[{"edit-time:":1614435028052,"uid":"D5N4AFUbvl1","string":"**Title:** Power Set"},{"edit-time:":1614435028052,"uid":"j6JNge7aOoz","string":"**URL:** https://www.4clojure.com/problem/85"},{"edit-time:":1614435028052,"uid":"487P3gb0Ebc","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028052,"uid":"xu8p0E3q7dK","string":"Difficulty: Medium"},{"edit-time:":1614435028052,"uid":"OV5GNqGOe5-","string":"Topics: set-theory"}]},{"edit-time:":1614435028052,"uid":"xFNDH1LHN6R","string":"**Syntax**:","children":[{"edit-time:":1614435028052,"uid":"Ma2v25usoJX","string":"```clojure\n(into ...)```"}]},{"edit-time:":1614435028052,"uid":"96RjMp6VPcj","string":"**Problem:**","children":[{"edit-time:":1614435028052,"uid":"TcFGVR-cGXV","string":"```clojure\n; Write a function which generates the power set of a given set.\n; The power set of a set x is the set of all subsets of x, including the empty set and x itself.\n\n(= (__ #{1 :a}) #{#{1 :a} #{:a} #{} #{1}})\n\n\t\n(= (__ #{}) #{#{}})\n\n\t\n(= (__ #{1 2 3})\n   #{#{} #{1} #{2} #{3} #{1 2} #{1 3} #{2 3} #{1 2 3}})\n\n\t\n(= (count (__ (into #{} (range 10)))) 1024)```"}]}],"title":"4clojure - Problem 85"},{"create-time":1614435028052,"edit-time:":1614435028052,"uid":"nvqpMkA9ryw","children":[{"edit-time:":1614435028052,"uid":"5Ed7RjbVr7D","string":"**Title:** Happy numbers"},{"edit-time:":1614435028052,"uid":"zuu5NWlxzZq","string":"**URL:** https://www.4clojure.com/problem/86"},{"edit-time:":1614435028052,"uid":"oC_XAmmWycC","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028052,"uid":"xqbsvgWoNbm","string":"Difficulty: Medium"},{"edit-time:":1614435028052,"uid":"8Fpw6XXFnBn","string":"Topics: math"}]},{"edit-time:":1614435028052,"uid":"z-b89pXZs9N","string":"**Problem:**","children":[{"edit-time:":1614435028052,"uid":"eCjVOyvp_4L","string":"```clojure\n; Happy numbers are positive integers that follow a particular formula: take each individual digit, square it, and then sum the squares to get a new number.\n; Repeat with the new number and eventually, you might get to a number whose squared sum is 1.\n; This is a happy number.\n; An unhappy number (or sad number) is one that loops endlessly.\n; Write a function that determines if a number is happy or not.\n\n(= (__ 7) true)\n\n\t\n(= (__ 986543210) true)\n\n\t\n(= (__ 2) false)\n\n\t\n(= (__ 3) false)```"}]}],"title":"4clojure - Problem 86"},{"create-time":1614435028052,"edit-time:":1614435028052,"uid":"A11SndgQCbg","children":[{"edit-time:":1614435028052,"uid":"89oozY-FzYR","string":"**Title:** Symmetric Difference"},{"edit-time:":1614435028052,"uid":"DI6N4H-dWCK","string":"**URL:** https://www.4clojure.com/problem/88"},{"edit-time:":1614435028052,"uid":"bej-FEaieZ0","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028052,"uid":"kB85BKn1FMO","string":"Difficulty: Easy"},{"edit-time:":1614435028052,"uid":"yDV9PiVZmTu","string":"Topics: set-theory"}]},{"edit-time:":1614435028052,"uid":"3B5RtvfFdes","string":"**Problem:**","children":[{"edit-time:":1614435028052,"uid":"6S2uhclGI8u","string":"```clojure\n; Write a function which returns the symmetric difference of two sets.\n; The symmetric difference is the set of items belonging to one but not both of the two sets.\n\n(= (__ #{1 2 3 4 5 6} #{1 3 5 7}) #{2 4 6 7})\n\n\t\n(= (__ #{:a :b :c} #{}) #{:a :b :c})\n\n\t\n(= (__ #{} #{4 5 6}) #{4 5 6})\n\n\t\n(= (__ #{[1 2] [2 3]} #{[2 3] [3 4]}) #{[1 2] [3 4]})```"}]}],"title":"4clojure - Problem 88"},{"create-time":1614435028052,"edit-time:":1614435028052,"uid":"x5a4Tr0y_h1","children":[{"edit-time:":1614435028052,"uid":"k4hJwOuwJ2k","string":"**Title:** Graph Tour"},{"edit-time:":1614435028052,"uid":"igGTKfFme7A","string":"**URL:** https://www.4clojure.com/problem/89"},{"edit-time:":1614435028052,"uid":"JfduAuNjcbJ","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028052,"uid":"0zavdNf75qv","string":"Difficulty: Hard"},{"edit-time:":1614435028052,"uid":"dCUZqfrP-BM","string":"Topics: graph-theory"}]},{"edit-time:":1614435028052,"uid":"VNZZSAYH3Di","string":"**Problem:**","children":[{"edit-time:":1614435028052,"uid":"PvkMTsaXQdu","string":"```clojure\n; Starting with a graph you must write a function that returns true if it is possible to make a tour of the graph in which every edge is visited exactly once.\n; \n; The graph is represented by a vector of tuples, where each tuple represents a single edge.\n; \n; The rules are:\n; \n; - You can start at any node.\n; - You must visit each edge exactly once.\n; - All edges are undirected.\n\n(= true (__ [[:a :b]]))\n\n\t\n(= false (__ [[:a :a] [:b :b]]))\n\n\t\n(= false (__ [[:a :b] [:a :b] [:a :c] [:c :a]\n               [:a :d] [:b :d] [:c :d]]))\n\n\t\n(= true (__ [[1 2] [2 3] [3 4] [4 1]]))\n\n\t\n(= true (__ [[:a :b] [:a :c] [:c :b] [:a :e]\n              [:b :e] [:a :d] [:b :d] [:c :e]\n              [:d :e] [:c :f] [:d :f]]))\n\n\t\n(= false (__ [[1 2] [2 3] [2 4] [2 5]]))```"}]}],"title":"4clojure - Problem 89"},{"create-time":1614435028052,"edit-time:":1614435028052,"uid":"piz9ySjJvD9","children":[{"edit-time:":1614435028052,"uid":"wZKSX18cO--","string":"**Title:** Cartesian Product"},{"edit-time:":1614435028052,"uid":"B-tbiMHJgV9","string":"**URL:** https://www.4clojure.com/problem/90"},{"edit-time:":1614435028052,"uid":"Tzd13Zqhikf","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028052,"uid":"lnn39jEXz3u","string":"Difficulty: Easy"},{"edit-time:":1614435028052,"uid":"uY2gnGsHgAJ","string":"Topics: set-theory"}]},{"edit-time:":1614435028052,"uid":"6w5eiwT5SKY","string":"**Problem:**","children":[{"edit-time:":1614435028052,"uid":"q2j5cFbIn8F","string":"```clojure\n; Write a function which calculates the Cartesian product of two sets.\n\n(= (__ #{\"ace\" \"king\" \"queen\"} #{\"♠\" \"♥\" \"♦\" \"♣\"})\n   #{[\"ace\"   \"♠\"] [\"ace\"   \"♥\"] [\"ace\"   \"♦\"] [\"ace\"   \"♣\"]\n     [\"king\"  \"♠\"] [\"king\"  \"♥\"] [\"king\"  \"♦\"] [\"king\"  \"♣\"]\n     [\"queen\" \"♠\"] [\"queen\" \"♥\"] [\"queen\" \"♦\"] [\"queen\" \"♣\"]})\n\n\t\n(= (__ #{1 2 3} #{4 5})\n   #{[1 4] [2 4] [3 4] [1 5] [2 5] [3 5]})\n\n\t\n(= 300 (count (__ (into #{} (range 10))\n                  (into #{} (range 30)))))```"}]}],"title":"4clojure - Problem 90"},{"create-time":1614435028052,"edit-time:":1614435028052,"uid":"vH5qRSI1IQr","children":[{"edit-time:":1614435028052,"uid":"ZjeivyD8bgZ","string":"**Title:** Graph Connectivity"},{"edit-time:":1614435028052,"uid":"a2f9UGilhkJ","string":"**URL:** https://www.4clojure.com/problem/91"},{"edit-time:":1614435028052,"uid":"0i8Tzg_XRrN","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028052,"uid":"eH6VhW5tOzD","string":"Difficulty: Hard"},{"edit-time:":1614435028052,"uid":"Jq6NKhW_P9R","string":"Topics: graph-theory"}]},{"edit-time:":1614435028052,"uid":"Lx0tP8EO_ZP","string":"**Problem:**","children":[{"edit-time:":1614435028052,"uid":"WoKpc-cjtoQ","string":"```clojure\n; Given a graph, determine whether the graph is connected.\n; A connected graph is such that a path exists between any two given nodes.\n; \n; \n; -Your function must return true if the graph is connected and false otherwise.\n; \n; -You will be given a set of tuples representing the edges of a graph.\n; Each member of a tuple being a vertex/node in the graph.\n; \n; \n; -Each edge is undirected (can be traversed either direction).\n\n(= true (__ #{[:a :a]}))\n\n\t\n(= true (__ #{[:a :b]}))\n\n\t\n(= false (__ #{[1 2] [2 3] [3 1]\n               [4 5] [5 6] [6 4]}))\n\n\t\n(= true (__ #{[1 2] [2 3] [3 1]\n              [4 5] [5 6] [6 4] [3 4]}))\n\n\t\n(= false (__ #{[:a :b] [:b :c] [:c :d]\n               [:x :y] [:d :a] [:b :e]}))\n\n\t\n(= true (__ #{[:a :b] [:b :c] [:c :d]\n              [:x :y] [:d :a] [:b :e] [:x :a]}))```"}]}],"title":"4clojure - Problem 91"},{"create-time":1614435028052,"edit-time:":1614435028052,"uid":"mgO50M2kYWS","children":[{"edit-time:":1614435028052,"uid":"cFFvO1xYNxu","string":"**Title:** Read Roman numerals"},{"edit-time:":1614435028052,"uid":"0sR0Y1Z4zuK","string":"**URL:** https://www.4clojure.com/problem/92"},{"edit-time:":1614435028052,"uid":"oSCIlpxpqKP","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028052,"uid":"89TXGnPkG0t","string":"Difficulty: Hard"},{"edit-time:":1614435028052,"uid":"IBAtveR7Cd9","string":"Topics: strings math"}]},{"edit-time:":1614435028052,"uid":"EX-rMZV5M30","string":"**Problem:**","children":[{"edit-time:":1614435028052,"uid":"-Zvg4zYIwaB","string":"```clojure\n; Roman numerals are easy to recognize, but not everyone knows all the rules necessary to work with them.\n; Write a function to parse a Roman-numeral string and return the number it represents.\n; \n; \n; You can assume that the input will be well-formed, in upper-case, and follow the subtractive principle.\n; You don't need to handle any numbers greater than MMMCMXCIX (3999), the largest number representable with ordinary letters.\n\n(= 14 (__ \"XIV\"))\n\n\t\n(= 827 (__ \"DCCCXXVII\"))\n\n\t\n(= 3999 (__ \"MMMCMXCIX\"))\n\n\t\n(= 48 (__ \"XLVIII\"))```"}]}],"title":"4clojure - Problem 92"},{"create-time":1614435028052,"edit-time:":1614435028052,"uid":"j8Fr4pyZl6j","children":[{"edit-time:":1614435028052,"uid":"LRUJ_LwFL1I","string":"**Title:** Partially Flatten a Sequence"},{"edit-time:":1614435028052,"uid":"BBTiHqQiWuH","string":"**URL:** https://www.4clojure.com/problem/93"},{"edit-time:":1614435028052,"uid":"RVJ3h73Uzqi","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028052,"uid":"1KmIb715AUD","string":"Difficulty: Medium"},{"edit-time:":1614435028052,"uid":"8ZHR4ERUf1S","string":"Topics: seqs"}]},{"edit-time:":1614435028052,"uid":"dnuV-63buRc","string":"**Problem:**","children":[{"edit-time:":1614435028052,"uid":"8OwvFB9zWtO","string":"```clojure\n; Write a function which flattens any nested combination of sequential things (lists, vectors, etc.\n; ), but maintains the lowest level sequential items.\n; The result should be a sequence of sequences with only one level of nesting.\n\n(= (__ [[\"Do\"] [\"Nothing\"]])\n   [[\"Do\"] [\"Nothing\"]])\n\n\t\n(= (__ [[[[:a :b]]] [[:c :d]] [:e :f]])\n   [[:a :b] [:c :d] [:e :f]])\n\n\t\n(= (__ '((1 2)((3 4)((((5 6)))))))\n   '((1 2)(3 4)(5 6)))```"}]}],"title":"4clojure - Problem 93"},{"create-time":1614435028052,"edit-time:":1614435028052,"uid":"7E_NT8_gTeR","children":[{"edit-time:":1614435028052,"uid":"L959adyJqsd","string":"**Title:** Game of Life"},{"edit-time:":1614435028052,"uid":"9wr5x0kJsV8","string":"**URL:** https://www.4clojure.com/problem/94"},{"edit-time:":1614435028052,"uid":"Mg8oKxxrI3h","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028052,"uid":"gzosIWQfugN","string":"Difficulty: Hard"},{"edit-time:":1614435028052,"uid":"d8W4U3vj3WN","string":"Topics: game"}]},{"edit-time:":1614435028052,"uid":"48mwjB0z6XG","string":"**Problem:**","children":[{"edit-time:":1614435028052,"uid":"-dEVubdrBgH","string":"```clojure\n; The game of life is a cellular automaton devised by mathematician John Conway.\n; \n; The 'board' consists of both live (#) and dead ( ) cells.\n; Each cell interacts with its eight neighbours (horizontal, vertical, diagonal), and its next state is dependent on the following rules:.\n; \n; \n; 1) Any live cell with fewer than two live neighbours dies, as if caused by under-population.\n; 2) Any live cell with two or three live neighbours lives on to the next generation.\n; 3) Any live cell with more than three live neighbours dies, as if by overcrowding.\n; 4) Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.\n; \n; Write a function that accepts a board, and returns a board representing the next generation of cells.\n\n(= (__ [\"      \"  \n        \" ##   \"\n        \" ##   \"\n        \"   ## \"\n        \"   ## \"\n        \"      \"])\n   [\"      \"  \n    \" ##   \"\n    \" #    \"\n    \"    # \"\n    \"   ## \"\n    \"      \"])\n\n\t\n(= (__ [\"     \"\n        \"     \"\n        \" ### \"\n        \"     \"\n        \"     \"])\n   [\"     \"\n    \"  #  \"\n    \"  #  \"\n    \"  #  \"\n    \"     \"])\n\n\t\n(= (__ [\"      \"\n        \"      \"\n        \"  ### \"\n        \" ###  \"\n        \"      \"\n        \"      \"])\n   [\"      \"\n    \"   #  \"\n    \" #  # \"\n    \" #  # \"\n    \"  #   \"\n    \"      \"])```"}]}],"title":"4clojure - Problem 94"},{"create-time":1614435028052,"edit-time:":1614435028052,"uid":"ld8MJQGgbLP","children":[{"edit-time:":1614435028052,"uid":"y8hmbAgr5pq","string":"**Title:** To Tree, or not to Tree"},{"edit-time:":1614435028052,"uid":"6LAAwv9TgIk","string":"**URL:** https://www.4clojure.com/problem/95"},{"edit-time:":1614435028053,"uid":"pxBza52E52S","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028052,"uid":"y1VcioLASOE","string":"Difficulty: Easy"},{"edit-time:":1614435028052,"uid":"7Vu4UrU_dzY","string":"Topics: trees"}]},{"edit-time:":1614435028053,"uid":"ByVSuvidkZz","string":"**Problem:**","children":[{"edit-time:":1614435028053,"uid":"H-DM8YVrdys","string":"```clojure\n; Write a predicate which checks whether or not a given sequence represents a binary tree.\n; Each node in the tree must have a value, a left child, and a right child.\n\n(= (__ '(:a (:b nil nil) nil))\n   true)\n\n\t\n(= (__ '(:a (:b nil nil)))\n   false)\n\n\t\n(= (__ [1 nil [2 [3 nil nil] [4 nil nil]]])\n   true)\n\n\t\n(= (__ [1 [2 nil nil] [3 nil nil] [4 nil nil]])\n   false)\n\n\t\n(= (__ [1 [2 [3 [4 nil nil] nil] nil] nil])\n   true)\n\n\t\n(= (__ [1 [2 [3 [4 false nil] nil] nil] nil])\n   false)\n\n\t\n(= (__ '(:a nil ()))\n   false)```"}]}],"title":"4clojure - Problem 95"},{"create-time":1614435028053,"edit-time:":1614435028053,"uid":"NFFU6P8QdYF","children":[{"edit-time:":1614435028053,"uid":"RbAy6U-TU9r","string":"**Title:** Beauty is Symmetry"},{"edit-time:":1614435028053,"uid":"mF-sLcRzlwN","string":"**URL:** https://www.4clojure.com/problem/96"},{"edit-time:":1614435028053,"uid":"yK6HtAoLESC","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028053,"uid":"Iq4QR2jhDUT","string":"Difficulty: Easy"},{"edit-time:":1614435028053,"uid":"1crhAdJCMX4","string":"Topics: trees"}]},{"edit-time:":1614435028053,"uid":"JajUmckwCN4","string":"**Problem:**","children":[{"edit-time:":1614435028053,"uid":"UaAHGaLeNvG","string":"```clojure\n; Let us define a binary tree as \"symmetric\" if the left half of the tree is the mirror image of the right half of the tree.\n; Write a predicate to determine whether or not a given binary tree is symmetric.\n; (see To Tree, or not to Tree for a reminder on the tree representation we're using).\n\n(= (__ '(:a (:b nil nil) (:b nil nil))) true)\n\n\t\n(= (__ '(:a (:b nil nil) nil)) false)\n\n\t\n(= (__ '(:a (:b nil nil) (:c nil nil))) false)\n\n\t\n(= (__ [1 [2 nil [3 [4 [5 nil nil] [6 nil nil]] nil]]\n          [2 [3 nil [4 [6 nil nil] [5 nil nil]]] nil]])\n   true)\n\n\t\n(= (__ [1 [2 nil [3 [4 [5 nil nil] [6 nil nil]] nil]]\n          [2 [3 nil [4 [5 nil nil] [6 nil nil]]] nil]])\n   false)\n\n\t\n(= (__ [1 [2 nil [3 [4 [5 nil nil] [6 nil nil]] nil]]\n          [2 [3 nil [4 [6 nil nil] nil]] nil]])\n   false)```"}]}],"title":"4clojure - Problem 96"},{"create-time":1614435028053,"edit-time:":1614435028053,"uid":"5ZcQt_Oq5fi","children":[{"edit-time:":1614435028053,"uid":"pVlh9QIz-DD","string":"**Title:** Pascal's Triangle"},{"edit-time:":1614435028053,"uid":"TPsARJdwILr","string":"**URL:** https://www.4clojure.com/problem/97"},{"edit-time:":1614435028053,"uid":"2lIlJtnfDC4","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028053,"uid":"5S7C58lUkBY","string":"Difficulty: Easy"}]},{"edit-time:":1614435028053,"uid":"8o7Zu9ENISY","string":"**Problem:**","children":[{"edit-time:":1614435028053,"uid":"03Pl2laiCDq","string":"```clojure\n; Pascal's triangle is a triangle of numbers computed using the following rules:\n; \n; - The first row is 1.\n; - Each successive row is computed by adding together adjacent numbers in the row above, and adding a 1 to the beginning and end of the row.\n; \n; Write a function which returns the nth row of Pascal's Triangle.\n\n(= (__ 1) [1])\n\n\t\n(= (map __ (range 1 6))\n   [     [1]\n        [1 1]\n       [1 2 1]\n      [1 3 3 1]\n     [1 4 6 4 1]])\n\n\t\n(= (__ 11)\n   [1 10 45 120 210 252 210 120 45 10 1])```"}]}],"title":"4clojure - Problem 97"},{"create-time":1614435028053,"edit-time:":1614435028053,"uid":"PhOz0DndHAu","children":[{"edit-time:":1614435028053,"uid":"9v1OiR0j5We","string":"**Title:** Equivalence Classes"},{"edit-time:":1614435028053,"uid":"hH36k9Z8WGn","string":"**URL:** https://www.4clojure.com/problem/98"},{"edit-time:":1614435028053,"uid":"HrUZJkEtDjB","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028053,"uid":"90G-nYXKb9N","string":"Difficulty: Medium"}]},{"edit-time:":1614435028053,"uid":"8BZ29RRWVOy","string":"**Syntax**:","children":[{"edit-time:":1614435028053,"uid":"Y3ZB7MeYhfo","string":"```clojure\n(rem ...)```"},{"edit-time:":1614435028053,"uid":"OBS6Ry5KgV9","string":"```clojure\n(identity ...)```"},{"edit-time:":1614435028053,"uid":"UtxHqsJte8d","string":"```clojure\n(constantly ...)```"}]},{"edit-time:":1614435028053,"uid":"_d3dlJwcm2d","string":"**Problem:**","children":[{"edit-time:":1614435028053,"uid":"z9xGw3hvg3-","string":"```clojure\n; A function f defined on a domain D induces an equivalence relation on D, as follows: a is equivalent to b with respect to f if and only if (f a) is equal to (f b).\n; Write a function with arguments f and D that computes the equivalence classes of D with respect to f.\n\n(= (__ #(* % %) #{-2 -1 0 1 2})\n   #{#{0} #{1 -1} #{2 -2}})\n\n\t\n(= (__ #(rem % 3) #{0 1 2 3 4 5 })\n   #{#{0 3} #{1 4} #{2 5}})\n\n\t\n(= (__ identity #{0 1 2 3 4})\n   #{#{0} #{1} #{2} #{3} #{4}})\n\n\t\n(= (__ (constantly true) #{0 1 2 3 4})\n   #{#{0 1 2 3 4}})```"}]}],"title":"4clojure - Problem 98"},{"create-time":1614435028053,"edit-time:":1614435028053,"uid":"K4mOXRfjADt","children":[{"edit-time:":1614435028053,"uid":"qY2aKXF5EQZ","string":"**Title:** Product Digits"},{"edit-time:":1614435028053,"uid":"Ec-pnn4K-3Q","string":"**URL:** https://www.4clojure.com/problem/99"},{"edit-time:":1614435028053,"uid":"4MznQ-oUbqY","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028053,"uid":"XhFpGg1DT0W","string":"Difficulty: Easy"},{"edit-time:":1614435028053,"uid":"k6oERXXzq7W","string":"Topics: math seqs"}]},{"edit-time:":1614435028053,"uid":"Tsg1epFZJMi","string":"**Problem:**","children":[{"edit-time:":1614435028053,"uid":"DjapbeT1RAJ","string":"```clojure\n; Write a function which multiplies two numbers and returns the result as a sequence of its digits.\n\n(= (__ 1 1) [1])\n\n\t\n(= (__ 99 9) [8 9 1])\n\n\t\n(= (__ 999 99) [9 8 9 0 1])```"}]}],"title":"4clojure - Problem 99"},{"create-time":1614435028053,"edit-time:":1614435028053,"uid":"apmYznMB6tl","children":[{"edit-time:":1614435028053,"uid":"o2NIKUaCSis","string":"**Title:** Least Common Multiple"},{"edit-time:":1614435028053,"uid":"jG0G-emDxL-","string":"**URL:** https://www.4clojure.com/problem/100"},{"edit-time:":1614435028053,"uid":"RBK9KWVdcsU","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028053,"uid":"nxg1PMj-sY4","string":"Difficulty: Easy"},{"edit-time:":1614435028053,"uid":"moBsGqI1xfF","string":"Topics: math"}]},{"edit-time:":1614435028053,"uid":"eZbJCj4Bh50","string":"**Syntax**:","children":[{"edit-time:":1614435028053,"uid":"-9OnzUzNnbd","string":"```clojure\n(== ...)```"}]},{"edit-time:":1614435028053,"uid":"Ohl1mBn1AHW","string":"**Problem:**","children":[{"edit-time:":1614435028053,"uid":"6IFWUtaW8Q7","string":"```clojure\n; Write a function which calculates the least common multiple.\n; Your function should accept a variable number of positive integers or ratios.\n\n(== (__ 2 3) 6)\n\n\t\n(== (__ 5 3 7) 105)\n\n\t\n(== (__ 1/3 2/5) 2)\n\n\t\n(== (__ 3/4 1/6) 3/2)\n\n\t\n(== (__ 7 5/7 2 3/5) 210)```"}]}],"title":"4clojure - Problem 100"},{"create-time":1614435028053,"edit-time:":1614435028053,"uid":"sXU6V8SfRXw","children":[{"edit-time:":1614435028053,"uid":"pCKQrmakRPU","string":"**Title:** Levenshtein Distance"},{"edit-time:":1614435028053,"uid":"NvKXth74oHP","string":"**URL:** https://www.4clojure.com/problem/101"},{"edit-time:":1614435028053,"uid":"P6sOKU7XwuJ","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028053,"uid":"LXwGJEGqi1h","string":"Difficulty: Hard"},{"edit-time:":1614435028053,"uid":"zOJ7oTwxzoS","string":"Topics: seqs"}]},{"edit-time:":1614435028053,"uid":"hMauSDCemRa","string":"**Problem:**","children":[{"edit-time:":1614435028053,"uid":"tAkHpPvsoc1","string":"```clojure\n; Given two sequences x and y, calculate the Levenshtein distance of x and y, i.\n; e.\n; the minimum number of edits needed to transform x into y.\n; The allowed edits are:.\n; \n; \n; - insert a single item\n; - delete a single item\n; - replace a single item with another item\n; \n; WARNING: Some of the test cases may timeout if you write an inefficient solution!\n\n(= (__ \"kitten\" \"sitting\") 3)\n\n\t\n(= (__ \"closure\" \"clojure\") (__ \"clojure\" \"closure\") 1)\n\n\t\n(= (__ \"xyx\" \"xyyyx\") 2)\n\n\t\n(= (__ \"\" \"123456\") 6)\n\n\t\n(= (__ \"Clojure\" \"Clojure\") (__ \"\" \"\") (__ [] []) 0)\n\n\t\n(= (__ [1 2 3 4] [0 2 3 4 5]) 2)\n\n\t\n(= (__ '(:a :b :c :d) '(:a :d)) 2)\n\n\t\n(= (__ \"ttttattttctg\" \"tcaaccctaccat\") 10)\n\n\t\n(= (__ \"gaattctaatctc\" \"caaacaaaaaattt\") 9)```"}]}],"title":"4clojure - Problem 101"},{"create-time":1614435028053,"edit-time:":1614435028053,"uid":"2y8brzyXpTf","children":[{"edit-time:":1614435028053,"uid":"GG7u6hpg1fA","string":"**Title:** intoCamelCase"},{"edit-time:":1614435028053,"uid":"FtNXFaGzWEE","string":"**URL:** https://www.4clojure.com/problem/102"},{"edit-time:":1614435028053,"uid":"gh24tHLlcYV","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028053,"uid":"zhH32fPZy_f","string":"Difficulty: Medium"},{"edit-time:":1614435028053,"uid":"zpbW76mYpr-","string":"Topics: strings"}]},{"edit-time:":1614435028053,"uid":"iwCz0HE6i65","string":"**Problem:**","children":[{"edit-time:":1614435028053,"uid":"-7TNETimPU0","string":"```clojure\n; When working with java, you often need to create an object with fieldsLikeThis, but you'd rather work with a hashmap that has :keys-like-this until it's time to convert.\n; Write a function which takes lower-case hyphen-separated strings and converts them to camel-case strings.\n\n(= (__ \"something\") \"something\")\n\n\t\n(= (__ \"multi-word-key\") \"multiWordKey\")\n\n\t\n(= (__ \"leaveMeAlone\") \"leaveMeAlone\")```"}]}],"title":"4clojure - Problem 102"},{"create-time":1614435028053,"edit-time:":1614435028053,"uid":"VjgTaAkgqMc","children":[{"edit-time:":1614435028053,"uid":"7MDQEXWd9yr","string":"**Title:** Generating k-combinations"},{"edit-time:":1614435028053,"uid":"LilRNY8eO5Q","string":"**URL:** https://www.4clojure.com/problem/103"},{"edit-time:":1614435028053,"uid":"HARrELgNNGh","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028053,"uid":"psc8MTqoq87","string":"Difficulty: Medium"},{"edit-time:":1614435028053,"uid":"HbaZO3NgBVU","string":"Topics: seqs combinatorics"}]},{"edit-time:":1614435028053,"uid":"_5Hs1zu-Gyl","string":"**Problem:**","children":[{"edit-time:":1614435028053,"uid":"6kCRxarHV4I","string":"```clojure\n; Given a sequence S consisting of n elements generate all k-combinations of S, i.\n; e.\n; generate all possible sets consisting of k distinct elements taken from S.\n; The number of k-combinations for a sequence is equal to the binomial coefficient.\n\n(= (__ 1 #{4 5 6}) #{#{4} #{5} #{6}})\n\n\t\n(= (__ 10 #{4 5 6}) #{})\n\n\t\n(= (__ 2 #{0 1 2}) #{#{0 1} #{0 2} #{1 2}})\n\n\t\n(= (__ 3 #{0 1 2 3 4}) #{#{0 1 2} #{0 1 3} #{0 1 4} #{0 2 3} #{0 2 4}\n                         #{0 3 4} #{1 2 3} #{1 2 4} #{1 3 4} #{2 3 4}})\n\n\t\n(= (__ 4 #{[1 2 3] :a \"abc\" \"efg\"}) #{#{[1 2 3] :a \"abc\" \"efg\"}})\n\n\t\n(= (__ 2 #{[1 2 3] :a \"abc\" \"efg\"}) #{#{[1 2 3] :a} #{[1 2 3] \"abc\"} #{[1 2 3] \"efg\"}\n                                    #{:a \"abc\"} #{:a \"efg\"} #{\"abc\" \"efg\"}})```"}]}],"title":"4clojure - Problem 103"},{"create-time":1614435028053,"edit-time:":1614435028053,"uid":"OWtLL0--lri","children":[{"edit-time:":1614435028053,"uid":"Jau-OJT3SAE","string":"**Title:** Write Roman Numerals"},{"edit-time:":1614435028053,"uid":"jfM1kR7lBFY","string":"**URL:** https://www.4clojure.com/problem/104"},{"edit-time:":1614435028053,"uid":"XPH0xkdP812","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028053,"uid":"5vuetgaQN8K","string":"Difficulty: Medium"},{"edit-time:":1614435028053,"uid":"yNXGArx0oit","string":"Topics: strings math"}]},{"edit-time:":1614435028053,"uid":"PWtbVZURNOq","string":"**Problem:**","children":[{"edit-time:":1614435028053,"uid":"1iF5vT_pF8H","string":"```clojure\n; This is the inverse of Problem 92, but much easier.\n; Given an integer smaller than 4000, return the corresponding roman numeral in uppercase, adhering to the subtractive principle.\n\n(= \"I\" (__ 1))\n\n\t\n(= \"XXX\" (__ 30))\n\n\t\n(= \"IV\" (__ 4))\n\n\t\n(= \"CXL\" (__ 140))\n\n\t\n(= \"DCCCXXVII\" (__ 827))\n\n\t\n(= \"MMMCMXCIX\" (__ 3999))\n\n\t\n(= \"XLVIII\" (__ 48))```"}]}],"title":"4clojure - Problem 104"},{"create-time":1614435028053,"edit-time:":1614435028053,"uid":"ulAYtwCqxWv","children":[{"edit-time:":1614435028053,"uid":"3k_1FrAmWp1","string":"**Title:** Identify keys and values"},{"edit-time:":1614435028053,"uid":"0z1QiRiCwVH","string":"**URL:** https://www.4clojure.com/problem/105"},{"edit-time:":1614435028053,"uid":"BRYPX8dlPiY","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028053,"uid":"o4P2-G_Yt23","string":"Difficulty: Medium"},{"edit-time:":1614435028053,"uid":"T_qz2ftk3xe","string":"Topics: maps seqs"}]},{"edit-time:":1614435028053,"uid":"Y4AlBMXt3LN","string":"**Problem:**","children":[{"edit-time:":1614435028053,"uid":"-0fIsR0JJg-","string":"```clojure\n; Given an input sequence of keywords and numbers, create a map such that each key in the map is a keyword, and the value is a sequence of all the numbers (if any) between it and the next keyword in the sequence.\n\n(= {} (__ []))\n\n\t\n(= {:a [1]} (__ [:a 1]))\n\n\t\n(= {:a [1], :b [2]} (__ [:a 1, :b 2]))\n\n\t\n(= {:a [1 2 3], :b [], :c [4]} (__ [:a 1 2 3 :b :c 4]))```"}]}],"title":"4clojure - Problem 105"},{"create-time":1614435028053,"edit-time:":1614435028053,"uid":"wacV91CG9YA","children":[{"edit-time:":1614435028053,"uid":"zxG03dScawf","string":"**Title:** Number Maze"},{"edit-time:":1614435028053,"uid":"iHlNwDkqR_L","string":"**URL:** https://www.4clojure.com/problem/106"},{"edit-time:":1614435028053,"uid":"FvmK1S5GV-f","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028053,"uid":"g2Ibz588E5z","string":"Difficulty: Hard"},{"edit-time:":1614435028053,"uid":"zhmz_mM2GmM","string":"Topics: numbers"}]},{"edit-time:":1614435028053,"uid":"z9Q1xOrdRBL","string":"**Problem:**","children":[{"edit-time:":1614435028053,"uid":"Y9vpp4TLfg4","string":"```clojure\n; Given a pair of numbers, the start and end point, find a path between the two using only three possible operations:\n; double\n; halve (odd numbers cannot be halved)\n; add 2\n; Find the shortest path through the \"maze\".\n; Because there are multiple shortest paths, you must return the length of the shortest path, not the path itself.\n\n(= 1 (__ 1 1))  ; 1\n\n\t\n(= 3 (__ 3 12)) ; 3 6 12\n\n\t\n(= 3 (__ 12 3)) ; 12 6 3\n\n\t\n(= 3 (__ 5 9))  ; 5 7 9\n\n\t\n(= 9 (__ 9 2))  ; 9 18 20 10 12 6 8 4 2\n\n\t\n(= 5 (__ 9 12)) ; 9 11 22 24 12```"}]}],"title":"4clojure - Problem 106"},{"create-time":1614435028053,"edit-time:":1614435028053,"uid":"SaCd9z9XvC4","children":[{"edit-time:":1614435028053,"uid":"nC265_NBkkT","string":"**Title:** Simple closures"},{"edit-time:":1614435028053,"uid":"wAr-QVyqiaK","string":"**URL:** https://www.4clojure.com/problem/107"},{"edit-time:":1614435028053,"uid":"Hwk7jlqKIh0","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028053,"uid":"pILQc15By4n","string":"Difficulty: Easy"},{"edit-time:":1614435028053,"uid":"_s0dnqm1QCw","string":"Topics: higher-order-functions math"}]},{"edit-time:":1614435028053,"uid":"ZgW_UOuZgw2","string":"**Problem:**","children":[{"edit-time:":1614435028053,"uid":"9AkDufSH7zA","string":"```clojure\n; Lexical scope and first-class functions are two of the most basic building blocks of a functional language like Clojure.\n; When you combine the two together, you get something very powerful called lexical closures.\n; With these, you can exercise a great deal of control over the lifetime of your local bindings, saving their values for use later, long after the code you're running now has finished.\n; \n; \n; It can be hard to follow in the abstract, so let's build a simple closure.\n; Given a positive integer n, return a function (f x) which computes xn.\n; Observe that the effect of this is to preserve the value of n for use outside the scope in which it is defined.\n\n(= 256 ((__ 2) 16),\n       ((__ 8) 2))\n\n\t\n(= [1 8 27 64] (map (__ 3) [1 2 3 4]))\n\n\t\n(= [1 2 4 8 16] (map #((__ %) 2) [0 1 2 3 4]))```"}]}],"title":"4clojure - Problem 107"},{"create-time":1614435028053,"edit-time:":1614435028053,"uid":"gtH1KHJKZQF","children":[{"edit-time:":1614435028053,"uid":"XyuMJQicqcf","string":"**Title:** Lazy Searching"},{"edit-time:":1614435028053,"uid":"IJRMVHVSMlA","string":"**URL:** https://www.4clojure.com/problem/108"},{"edit-time:":1614435028053,"uid":"6d_xtocZwtX","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028053,"uid":"ukJ6l86Xlk7","string":"Difficulty: Medium"},{"edit-time:":1614435028053,"uid":"aVOvu2LsTpX","string":"Topics: seqs sorting"}]},{"edit-time:":1614435028053,"uid":"YBR40pQangQ","string":"**Syntax**:","children":[{"edit-time:":1614435028053,"uid":"cpBuVeQyIGG","string":"```clojure\n(bit-and ...)```"}]},{"edit-time:":1614435028053,"uid":"4d9frDdodnW","string":"**Problem:**","children":[{"edit-time:":1614435028053,"uid":"U48S7DT-Gfh","string":"```clojure\n; Given any number of sequences, each sorted from smallest to largest, find the smallest single number which appears in all of the sequences.\n; The sequences may be infinite, so be careful to search lazily.\n\n(= 3 (__ [3 4 5]))\n\n\t\n(= 4 (__ [1 2 3 4 5 6 7] [0.5 3/2 4 19]))\n\n\t\n(= 7 (__ (range) (range 0 100 7/6) [2 3 5 7 11 13]))\n\n\t\n(= 64 (__ (map #(* % % %) (range)) ;; perfect cubes\n          (filter #(zero? (bit-and % (dec %))) (range)) ;; powers of 2\n          (iterate inc 20))) ;; at least as large as 20```"}]}],"title":"4clojure - Problem 108"},{"create-time":1614435028053,"edit-time:":1614435028053,"uid":"eFhaRM2XoLj","children":[{"edit-time:":1614435028053,"uid":"cbi28BugxOV","string":"**Title:** Sequence of pronunciations"},{"edit-time:":1614435028053,"uid":"sQbekDQDspW","string":"**URL:** https://www.4clojure.com/problem/110"},{"edit-time:":1614435028053,"uid":"EmUPgeeHbTp","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028053,"uid":"J6bLvCleiH5","string":"Difficulty: Medium"},{"edit-time:":1614435028053,"uid":"n0YjOQA2zbk","string":"Topics: seqs"}]},{"edit-time:":1614435028054,"uid":"IZ3P-SIGdtO","string":"**Problem:**","children":[{"edit-time:":1614435028054,"uid":"RlTu-cEXJQc","string":"```clojure\n; Write a function that returns a lazy sequence of \"pronunciations\" of a sequence of numbers.\n; A pronunciation of each element in the sequence consists of the number of repeating identical numbers and the number itself.\n; For example, [1 1] is pronounced as [2 1] (\"two ones\"), which in turn is pronounced as [1 2 1 1] (\"one two, one one\").\n; \n; \n; Your function should accept an initial sequence of numbers, and return an infinite lazy sequence of pronunciations, each element being a pronunciation of the previous element.\n\n(= [[1 1] [2 1] [1 2 1 1]] (take 3 (__ [1])))\n\n\t\n(= [3 1 2 4] (first (__ [1 1 1 4 4])))\n\n\t\n(= [1 1 1 3 2 1 3 2 1 1] (nth (__ [1]) 6))\n\n\t\n(= 338 (count (nth (__ [3 2]) 15)))```"}]}],"title":"4clojure - Problem 110"},{"create-time":1614435028054,"edit-time:":1614435028054,"uid":"VPVoEwQrjyi","children":[{"edit-time:":1614435028054,"uid":"cp86YWYt8GP","string":"**Title:** Crossword puzzle"},{"edit-time:":1614435028054,"uid":"3rFtMWyr7Vu","string":"**URL:** https://www.4clojure.com/problem/111"},{"edit-time:":1614435028054,"uid":"3aHoyB1n-iy","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028054,"uid":"IBEEOgVjMAz","string":"Difficulty: Hard"},{"edit-time:":1614435028054,"uid":"4cC0YNqInQL","string":"Topics: game"}]},{"edit-time:":1614435028054,"uid":"Y_khkjlmcRW","string":"**Problem:**","children":[{"edit-time:":1614435028054,"uid":"FL2SuF1bflH","string":"```clojure\n; Write a function that takes a string and a partially-filled crossword puzzle board, and determines if the input string can be legally placed onto the board.\n; \n; The crossword puzzle board consists of a collection of partially-filled rows.\n; Empty spaces are denoted with an underscore (_), unusable spaces are denoted with a hash symbol (#), and pre-filled spaces have a character in place; the whitespace characters are for legibility and should be ignored.\n; \n; \n; For a word to be legally placed on the board:\n; - It may use empty spaces (underscores)\n; - It may use but must not conflict with any pre-filled characters.\n; - It must not use any unusable spaces (hashes).\n; - There must be no empty spaces (underscores) or extra characters before or after the word (the word may be bound by unusable spaces though).\n; - Characters are not case-sensitive.\n; - Words may be placed vertically (proceeding top-down only), or horizontally (proceeding left-right only).\n\n(= true  (__ \"the\" [\"_ # _ _ e\"]))\n\n\t\n(= false (__ \"the\" [\"c _ _ _\"\n                    \"d _ # e\"\n                    \"r y _ _\"]))\n\n\t\n(= true  (__ \"joy\" [\"c _ _ _\"\n                    \"d _ # e\"\n                    \"r y _ _\"]))\n\n\t\n(= false (__ \"joy\" [\"c o n j\"\n                    \"_ _ y _\"\n                    \"r _ _ #\"]))\n\n\t\n(= true  (__ \"clojure\" [\"_ _ _ # j o y\"\n                        \"_ _ o _ _ _ _\"\n                        \"_ _ f _ # _ _\"]))```"}]}],"title":"4clojure - Problem 111"},{"create-time":1614435028054,"edit-time:":1614435028054,"uid":"E65_eD5NIgc","children":[{"edit-time:":1614435028054,"uid":"5Q2s7GNMJ5u","string":"**Title:** Sequs Horribilis"},{"edit-time:":1614435028054,"uid":"W6RNas2syUZ","string":"**URL:** https://www.4clojure.com/problem/112"},{"edit-time:":1614435028054,"uid":"giwv6uzveM2","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028054,"uid":"-eFPlziGi38","string":"Difficulty: Medium"},{"edit-time:":1614435028054,"uid":"iGs6rYSKjBh","string":"Topics: seqs"}]},{"edit-time:":1614435028054,"uid":"OpKY-20wH3L","string":"**Problem:**","children":[{"edit-time:":1614435028054,"uid":"rAe9D6750Ik","string":"```clojure\n; Create a function which takes an integer and a nested collection of integers as arguments.\n; Analyze the elements of the input collection and return a sequence which maintains the nested structure, and which includes all elements starting from the head whose sum is less than or equal to the input integer.\n\n(=  (__ 10 [1 2 [3 [4 5] 6] 7])\n   '(1 2 (3 (4))))\n\n\t\n(=  (__ 30 [1 2 [3 [4 [5 [6 [7 8]] 9]] 10] 11])\n   '(1 2 (3 (4 (5 (6 (7)))))))\n\n\t\n(=  (__ 9 (range))\n   '(0 1 2 3))\n\n\t\n(=  (__ 1 [[[[[1]]]]])\n   '(((((1))))))\n\n\t\n(=  (__ 0 [1 2 [3 [4 5] 6] 7])\n   '())\n\n\t\n(=  (__ 0 [0 0 [0 [0]]])\n   '(0 0 (0 (0))))\n\n\t\n(=  (__ 1 [-10 [1 [2 3 [4 5 [6 7 [8]]]]]])\n   '(-10 (1 (2 3 (4)))))```"}]}],"title":"4clojure - Problem 112"},{"create-time":1614435028054,"edit-time:":1614435028054,"uid":"7XkW2hnI4_g","children":[{"edit-time:":1614435028054,"uid":"0OLLmyhXXgI","string":"**Title:** Making Data Dance"},{"edit-time:":1614435028054,"uid":"uPujL33XLQ3","string":"**URL:** https://www.4clojure.com/problem/113"},{"edit-time:":1614435028054,"uid":"vLHvJIfpAhI","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028054,"uid":"scn05rW8kRb","string":"Difficulty: Hard"},{"edit-time:":1614435028054,"uid":"YgWmE14NY92","string":"Topics: types"}]},{"edit-time:":1614435028054,"uid":"hw0FwbbpAn9","string":"**Syntax**:","children":[{"edit-time:":1614435028054,"uid":"NmqjHLMxIC9","string":"```clojure\n(seq ...)```"},{"edit-time:":1614435028054,"uid":"3MR4DUwkjs8","string":"```clojure\n(repeat ...)```"}]},{"edit-time:":1614435028054,"uid":"8gkkZ4doEFH","string":"**Problem:**","children":[{"edit-time:":1614435028054,"uid":"v7lognBoKcF","string":"```clojure\n; Write a function that takes a variable number of integer arguments.\n; If the output is coerced into a string, it should return a comma (and space) separated list of the inputs sorted smallest to largest.\n; If the output is coerced into a sequence, it should return a seq of unique input elements in the same order as they were entered.\n\n; Special Restrictions:\n; proxy\n\n(= \"1, 2, 3\" (str (__ 2 1 3)))\n\n\t\n(= '(2 1 3) (seq (__ 2 1 3)))\n\n\t\n(= '(2 1 3) (seq (__ 2 1 3 3 1 2)))\n\n\t\n(= '(1) (seq (apply __ (repeat 5 1))))\n\n\t\n(= \"1, 1, 1, 1, 1\" (str (apply __ (repeat 5 1))))\n\n\t\n(and (= nil (seq (__)))\n     (=  \"\" (str (__))))```"}]}],"title":"4clojure - Problem 113"},{"create-time":1614435028054,"edit-time:":1614435028054,"uid":"Z5HErPG4J9O","children":[{"edit-time:":1614435028054,"uid":"EoRnOnYNgVi","string":"**Title:** Global take-while"},{"edit-time:":1614435028054,"uid":"_3rZXmHj_Nu","string":"**URL:** https://www.4clojure.com/problem/114"},{"edit-time:":1614435028054,"uid":"Wnksvqordcz","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028054,"uid":"vvqwLofHtyH","string":"Difficulty: Medium"},{"edit-time:":1614435028054,"uid":"OqIVWBLqzKY","string":"Topics: seqs higher-order-functions"}]},{"edit-time:":1614435028054,"uid":"mT2cJZqhl9G","string":"**Problem:**","children":[{"edit-time:":1614435028054,"uid":"fUiY-OXedt9","string":"```clojure\n; take-while is great for filtering sequences, but it limited: you can only examine a single item of the sequence at a time.\n; What if you need to keep track of some state as you go over the sequence?.\n; \n; \n; Write a function which accepts an integer n, a predicate p, and a sequence.\n; It should return a lazy sequence of items in the list up to, but not including, the nth item that satisfies the predicate.\n\n(= [2 3 5 7 11 13]\n   (__ 4 #(= 2 (mod % 3))\n         [2 3 5 7 11 13 17 19 23]))\n\n\t\n(= [\"this\" \"is\" \"a\" \"sentence\"]\n   (__ 3 #(some #{\\i} %)\n         [\"this\" \"is\" \"a\" \"sentence\" \"i\" \"wrote\"]))\n\n\t\n(= [\"this\" \"is\"]\n   (__ 1 #{\"a\"}\n         [\"this\" \"is\" \"a\" \"sentence\" \"i\" \"wrote\"]))```"}]}],"title":"4clojure - Problem 114"},{"create-time":1614435028054,"edit-time:":1614435028054,"uid":"uAo1QUcspxm","children":[{"edit-time:":1614435028054,"uid":"qNdXxCevzEh","string":"**Title:** The Balance of N"},{"edit-time:":1614435028054,"uid":"vWuiRtsrtrG","string":"**URL:** https://www.4clojure.com/problem/115"},{"edit-time:":1614435028054,"uid":"5yiX0TwUlqT","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028054,"uid":"ca088KaNpLa","string":"Difficulty: Medium"},{"edit-time:":1614435028054,"uid":"N7YEs8dnpq6","string":"Topics: math"}]},{"edit-time:":1614435028054,"uid":"ilC6xcEn5ye","string":"**Problem:**","children":[{"edit-time:":1614435028054,"uid":"2Sq8EEfQ3EX","string":"```clojure\n; A balanced number is one whose component digits have the same sum on the left and right halves of the number.\n; Write a function which accepts an integer n, and returns true iff n is balanced.\n\n(= true (__ 11))\n\n\t\n(= true (__ 121))\n\n\t\n(= false (__ 123))\n\n\t\n(= true (__ 0))\n\n\t\n(= false (__ 88099))\n\n\t\n(= true (__ 89098))\n\n\t\n(= true (__ 89089))\n\n\t\n(= (take 20 (filter __ (range)))\n   [0 1 2 3 4 5 6 7 8 9 11 22 33 44 55 66 77 88 99 101])```"}]}],"title":"4clojure - Problem 115"},{"create-time":1614435028054,"edit-time:":1614435028054,"uid":"kKTOq3ob43s","children":[{"edit-time:":1614435028054,"uid":"kyQjhfmKxzY","string":"**Title:** Prime Sandwich"},{"edit-time:":1614435028054,"uid":"7fbmAvl6J3a","string":"**URL:** https://www.4clojure.com/problem/116"},{"edit-time:":1614435028054,"uid":"gjMRD2SfsV1","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028054,"uid":"wjtg86yMhql","string":"Difficulty: Medium"},{"edit-time:":1614435028054,"uid":"yuBTy34c-Qv","string":"Topics: math"}]},{"edit-time:":1614435028054,"uid":"ST2T49DcnuM","string":"**Problem:**","children":[{"edit-time:":1614435028054,"uid":"MsQc-FT2tng","string":"```clojure\n; A balanced prime is a prime number which is also the mean of the primes directly before and after it in the sequence of valid primes.\n; Create a function which takes an integer n, and returns true iff it is a balanced prime.\n\n(= false (__ 4))\n\n\t\n(= true (__ 563))\n\n\t\n(= 1103 (nth (filter __ (range)) 15))```"}]}],"title":"4clojure - Problem 116"},{"create-time":1614435028054,"edit-time:":1614435028054,"uid":"aGQj49qNQ6a","children":[{"edit-time:":1614435028054,"uid":"oZj4Yw7yaZa","string":"**Title:** For Science!"},{"edit-time:":1614435028054,"uid":"DbA-W083Fl5","string":"**URL:** https://www.4clojure.com/problem/117"},{"edit-time:":1614435028054,"uid":"bY66rl-4_Dg","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028054,"uid":"vnK9N-D2Zqb","string":"Difficulty: Hard"},{"edit-time:":1614435028054,"uid":"irKJ1iH2te1","string":"Topics: game"}]},{"edit-time:":1614435028054,"uid":"0HfRE4Tvb70","string":"**Problem:**","children":[{"edit-time:":1614435028054,"uid":"YFiXibq6RUi","string":"```clojure\n; A mad scientist with tenure has created an experiment tracking mice in a maze.\n; Several mazes have been randomly generated, and you've been tasked with writing a program to determine the mazes in which it's possible for the mouse to reach the cheesy endpoint.\n; Write a function which accepts a maze in the form of a collection of rows, each row is a string where:.\n; \n; spaces represent areas where the mouse can walk freely\n; hashes (#) represent walls where the mouse can not walk\n; M represents the mouse's starting point\n; C represents the cheese which the mouse must reach\n; The mouse is not allowed to travel diagonally in the maze (only up/down/left/right), nor can he escape the edge of the maze.\n; Your function must return true iff the maze is solvable by the mouse.\n\n(= true  (__ [\"M   C\"]))\n\n\t\n(= false (__ [\"M # C\"]))\n\n\t\n(= true  (__ [\"#######\"\n              \"#     #\"\n              \"#  #  #\"\n              \"#M # C#\"\n              \"#######\"]))\n\n\t\n(= false (__ [\"########\"\n              \"#M  #  #\"\n              \"#   #  #\"\n              \"# # #  #\"\n              \"#   #  #\"\n              \"#  #   #\"\n              \"#  # # #\"\n              \"#  #   #\"\n              \"#  #  C#\"\n              \"########\"]))\n\n\t\n(= false (__ [\"M     \"\n              \"      \"\n              \"      \"\n              \"      \"\n              \"    ##\"\n              \"    #C\"]))\n\n\t\n(= true  (__ [\"C######\"\n              \" #     \"\n              \" #   # \"\n              \" #   #M\"\n              \"     # \"]))\n\n\t\n(= true  (__ [\"C# # # #\"\n              \"        \"\n              \"# # # # \"\n              \"        \"\n              \" # # # #\"\n              \"        \"\n              \"# # # #M\"]))```"}]}],"title":"4clojure - Problem 117"},{"create-time":1614435028054,"edit-time:":1614435028054,"uid":"lS_OnIlBTro","children":[{"edit-time:":1614435028054,"uid":"ONZPL3zRYUq","string":"**Title:** Re-implement Map"},{"edit-time:":1614435028054,"uid":"p4Z5EM9_Iiy","string":"**URL:** https://www.4clojure.com/problem/118"},{"edit-time:":1614435028054,"uid":"6rAMkY0bEso","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028054,"uid":"EG5mLb6Zh7C","string":"Difficulty: Easy"},{"edit-time:":1614435028054,"uid":"wwQoY60NafA","string":"Topics: core-seqs"}]},{"edit-time:":1614435028054,"uid":"OBDlNvKDr1D","string":"**Problem:**","children":[{"edit-time:":1614435028054,"uid":"ha4Om_GXqlc","string":"```clojure\n; Map is one of the core elements of a functional programming language.\n; Given a function f and an input sequence s, return a lazy sequence of (f x) for each element x in s.\n\n; Special Restrictions:\n; map\n; map-indexed\n; mapcat\n; for\n\n(= [3 4 5 6 7]\n   (__ inc [2 3 4 5 6]))\n\n\t\n(= (repeat 10 nil)\n   (__ (fn [_] nil) (range 10)))\n\n\t\n(= [1000000 1000001]\n   (->> (__ inc (range))\n        (drop (dec 1000000))\n        (take 2)))```"}]}],"title":"4clojure - Problem 118"},{"create-time":1614435028054,"edit-time:":1614435028054,"uid":"U7P4jMygJXJ","children":[{"edit-time:":1614435028054,"uid":"LE68s5cfCf3","string":"**Title:** Win at Tic-Tac-Toe"},{"edit-time:":1614435028054,"uid":"_PxnnlvpJs3","string":"**URL:** https://www.4clojure.com/problem/119"},{"edit-time:":1614435028054,"uid":"fjnWNNw5yI4","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028054,"uid":"2D9aOE37bqH","string":"Difficulty: Hard"},{"edit-time:":1614435028054,"uid":"my98MTAuxg3","string":"Topics: game"}]},{"edit-time:":1614435028054,"uid":"LDZFDDGbsTl","string":"**Problem:**","children":[{"edit-time:":1614435028054,"uid":"XGaa0-kB7nu","string":"```clojure\n; As in Problem 73, a tic-tac-toe board is represented by a two dimensional vector.\n; X is represented by :x, O is represented by :o, and empty is represented by :e.\n; Create a function that accepts a game piece and board as arguments, and returns a set (possibly empty) of all valid board placements of the game piece which would result in an immediate win.\n; \n; \n; Board coordinates should be as in calls to get-in.\n; For example, [0 1] is the topmost row, center position.\n\n(= (__ :x [[:o :e :e] \n           [:o :x :o] \n           [:x :x :e]])\n   #{[2 2] [0 1] [0 2]})\n\n\t\n(= (__ :x [[:x :o :o] \n           [:x :x :e] \n           [:e :o :e]])\n   #{[2 2] [1 2] [2 0]})\n\n\t\n(= (__ :x [[:x :e :x] \n           [:o :x :o] \n           [:e :o :e]])\n   #{[2 2] [0 1] [2 0]})\n\n\t\n(= (__ :x [[:x :x :o] \n           [:e :e :e] \n           [:e :e :e]])\n   #{})\n\n\t\n(= (__ :o [[:x :x :o] \n           [:o :e :o] \n           [:x :e :e]])\n   #{[2 2] [1 1]})```"}]}],"title":"4clojure - Problem 119"},{"create-time":1614435028054,"edit-time:":1614435028054,"uid":"Ux0YsmCFf6s","children":[{"edit-time:":1614435028054,"uid":"PhslAlvJHm6","string":"**Title:** Sum of square of digits"},{"edit-time:":1614435028054,"uid":"04IMFpp6cbV","string":"**URL:** https://www.4clojure.com/problem/120"},{"edit-time:":1614435028054,"uid":"u3oll6Y9onj","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028054,"uid":"K2QZd6RLM7Z","string":"Difficulty: Easy"},{"edit-time:":1614435028054,"uid":"_vHtvmgteEj","string":"Topics: math"}]},{"edit-time:":1614435028054,"uid":"wKDAn7GYmXH","string":"**Problem:**","children":[{"edit-time:":1614435028054,"uid":"dfQ28W6KevR","string":"```clojure\n; Write a function which takes a collection of integers as an argument.\n; Return the count of how many elements are smaller than the sum of their squared component digits.\n; For example: 10 is larger than 1 squared plus 0 squared; whereas 15 is smaller than 1 squared plus 5 squared.\n\n(= 8 (__ (range 10)))\n\n\t\n(= 19 (__ (range 30)))\n\n\t\n(= 50 (__ (range 100)))\n\n\t\n(= 50 (__ (range 1000)))```"}]}],"title":"4clojure - Problem 120"},{"create-time":1614435028054,"edit-time:":1614435028054,"uid":"pcw34lZHw93","children":[{"edit-time:":1614435028054,"uid":"r_dNcMdivdJ","string":"**Title:** Universal Computation Engine"},{"edit-time:":1614435028054,"uid":"8OXcByDV3_d","string":"**URL:** https://www.4clojure.com/problem/121"},{"edit-time:":1614435028054,"uid":"jmuYxNLBUmt","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028054,"uid":"DqBc7aHejaP","string":"Difficulty: Medium"},{"edit-time:":1614435028054,"uid":"42BUT8sWd6Q","string":"Topics: functions"}]},{"edit-time:":1614435028054,"uid":"SDGL7XbdyMw","string":"**Problem:**","children":[{"edit-time:":1614435028054,"uid":"nXbTnjESgzI","string":"```clojure\n; Given a mathematical formula in prefix notation, return a function that calculates the value of the formula.\n; The formula can contain nested calculations using the four basic mathematical operators, numeric constants, and symbols representing variables.\n; The returned function has to accept a single parameter containing the map of variable names to their values.\n\n; Special Restrictions:\n; eval\n; resolve\n\n(= 2 ((__ '(/ a b))\n      '{b 8 a 16}))\n\n\t\n(= 8 ((__ '(+ a b 2))\n      '{a 2 b 4}))\n\n\t\n(= [6 0 -4]\n     (map (__ '(* (+ 2 a)\n                  (- 10 b)))\n            '[{a 1 b 8}\n              {b 5 a -2}\n              {a 2 b 11}]))\n\n\t\n(= 1 ((__ '(/ (+ x 2)\n              (* 3 (+ y 1))))\n      '{x 4 y 1}))```"}]}],"title":"4clojure - Problem 121"},{"create-time":1614435028054,"edit-time:":1614435028054,"uid":"jpySMLFq9oJ","children":[{"edit-time:":1614435028054,"uid":"8R7Mhok5w8P","string":"**Title:** Read a binary number"},{"edit-time:":1614435028054,"uid":"TJQgEHu9LIn","string":"**URL:** https://www.4clojure.com/problem/122"},{"edit-time:":1614435028054,"uid":"d43BtMGhRTm","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028054,"uid":"nYAQEyjH8bQ","string":"Difficulty: Easy"}]},{"edit-time:":1614435028054,"uid":"o1F2TpH3L-2","string":"**Problem:**","children":[{"edit-time:":1614435028054,"uid":"zlyLptXdfn0","string":"```clojure\n; Convert a binary number, provided in the form of a string, to its numerical value.\n\n(= 0     (__ \"0\"))\n\n\t\n(= 7     (__ \"111\"))\n\n\t\n(= 8     (__ \"1000\"))\n\n\t\n(= 9     (__ \"1001\"))\n\n\t\n(= 255   (__ \"11111111\"))\n\n\t\n(= 1365  (__ \"10101010101\"))\n\n\t\n(= 65535 (__ \"1111111111111111\"))```"}]}],"title":"4clojure - Problem 122"},{"create-time":1614435028054,"edit-time:":1614435028054,"uid":"KbB_zAlZGnk","children":[{"edit-time:":1614435028054,"uid":"x_fOFQnMpi5","string":"**Title:** Analyze Reversi"},{"edit-time:":1614435028054,"uid":"XQTsrdVl5uc","string":"**URL:** https://www.4clojure.com/problem/124"},{"edit-time:":1614435028054,"uid":"Xm18qX1dnSf","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028054,"uid":"NxuubPrLwti","string":"Difficulty: Hard"},{"edit-time:":1614435028054,"uid":"cK5y6W1i_pi","string":"Topics: game"}]},{"edit-time:":1614435028054,"uid":"A1vhaRbEUH8","string":"**Problem:**","children":[{"edit-time:":1614435028054,"uid":"r4u8RzeTZLf","string":"```clojure\n; Reversi is normally played on an 8 by 8 board.\n; In this problem, a 4 by 4 board is represented as a two-dimensional vector with black, white, and empty pieces represented by 'b, 'w, and 'e, respectively.\n; Create a function that accepts a game board and color as arguments, and returns a map of legal moves for that color.\n; Each key should be the coordinates of a legal move, and its value a set of the coordinates of the pieces flipped by that move.\n; \n; \n; Board coordinates should be as in calls to get-in.\n; For example, [0 1] is the topmost row, second column from the left.\n\n(= {[1 3] #{[1 2]}, [0 2] #{[1 2]}, [3 1] #{[2 1]}, [2 0] #{[2 1]}}\n   (__ '[[e e e e]\n         [e w b e]\n         [e b w e]\n         [e e e e]] 'w))\n\n\t\n(= {[3 2] #{[2 2]}, [3 0] #{[2 1]}, [1 0] #{[1 1]}}\n   (__ '[[e e e e]\n         [e w b e]\n         [w w w e]\n         [e e e e]] 'b))\n\n\t\n(= {[0 3] #{[1 2]}, [1 3] #{[1 2]}, [3 3] #{[2 2]}, [2 3] #{[2 2]}}\n   (__ '[[e e e e]\n         [e w b e]\n         [w w b e]\n         [e e b e]] 'w))\n\n\t\n(= {[0 3] #{[2 1] [1 2]}, [1 3] #{[1 2]}, [2 3] #{[2 1] [2 2]}}\n   (__ '[[e e w e]\n         [b b w e]\n         [b w w e]\n         [b w w w]] 'b))```"}]}],"title":"4clojure - Problem 124"},{"create-time":1614435028054,"edit-time:":1614435028054,"uid":"RBYVCT9fvH9","children":[{"edit-time:":1614435028054,"uid":"cQXgLxG12Cw","string":"**Title:** Gus' Quinundrum"},{"edit-time:":1614435028054,"uid":"cqd5avnKNFY","string":"**URL:** https://www.4clojure.com/problem/125"},{"edit-time:":1614435028054,"uid":"x-K2ubZbKhd","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028054,"uid":"HZ4Irv-dgFx","string":"Difficulty: Hard"},{"edit-time:":1614435028054,"uid":"3JjLKr7phtY","string":"Topics: logic fun brain-teaser"}]},{"edit-time:":1614435028054,"uid":"iZX96yEA9Zt","string":"**Problem:**","children":[{"edit-time:":1614435028054,"uid":"eHL4sPgZtdE","string":"```clojure\n; Create a function of no arguments which returns a string that is an exact copy of the function itself.\n; \n; Hint: read this if you get stuck (this question is harder than it first appears); but it's worth the effort to solve it independently if you can!\n; \n; Fun fact: Gus is the name of the 4Clojure dragon.\n\n(= (str '__) (__))```"}]}],"title":"4clojure - Problem 125"},{"create-time":1614435028054,"edit-time:":1614435028054,"uid":"ahjqyy0iMip","children":[{"edit-time:":1614435028054,"uid":"BkocR7AkQRE","string":"**Title:** Through the Looking Class"},{"edit-time:":1614435028054,"uid":"KzKyncH3c__","string":"**URL:** https://www.4clojure.com/problem/126"},{"edit-time:":1614435028054,"uid":"2AzfRbKPSh0","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028054,"uid":"Hk3PIrN7Tos","string":"Difficulty: Easy"},{"edit-time:":1614435028054,"uid":"VctF2AGqtHz","string":"Topics: fun brain-teaser"}]},{"edit-time:":1614435028054,"uid":"-Xg5-OZFESV","string":"**Syntax**:","children":[{"edit-time:":1614435028054,"uid":"gWrqJXdFj43","string":"```clojure\n(class ...)```"}]},{"edit-time:":1614435028054,"uid":"LQY2pJyh1iT","string":"**Problem:**","children":[{"edit-time:":1614435028054,"uid":"OTjSgK754qo","string":"```clojure\n; Enter a value which satisfies the following:\n\n(let [x __]\n  (and (= (class x) x) x))```"}]}],"title":"4clojure - Problem 126"},{"create-time":1614435028054,"edit-time:":1614435028054,"uid":"2Q2jDDSndrc","children":[{"edit-time:":1614435028054,"uid":"tt0brCOO5TX","string":"**Title:** Love Triangle"},{"edit-time:":1614435028054,"uid":"dkrg74-ckR1","string":"**URL:** https://www.4clojure.com/problem/127"},{"edit-time:":1614435028054,"uid":"H9qiylRVOOV","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028054,"uid":"_p3WsvGgNkN","string":"Difficulty: Hard"},{"edit-time:":1614435028054,"uid":"VQOjdXku6D1","string":"Topics: search data-juggling"}]},{"edit-time:":1614435028054,"uid":"ymNfa_aL1EH","string":"**Problem:**","children":[{"edit-time:":1614435028054,"uid":"MjsziGeBC4A","string":"```clojure\n; Everyone loves triangles, and it's easy to understand why—they're so wonderfully symmetric (except scalenes, they suck).\n; \n; Your passion for triangles has led you to become a miner (and part-time Clojure programmer) where you work all day to chip out isosceles-shaped minerals from rocks gathered in a nearby open-pit mine.\n; There are too many rocks coming from the mine to harvest them all so you've been tasked with writing a program to analyze the mineral patterns of each rock, and determine which rocks have the biggest minerals.\n; \n; \n; Someone has already written a computer-vision system for the mine.\n; It images each rock as it comes into the processing centre and creates a cross-sectional bitmap of mineral (1) and rock (0) concentrations for each one.\n; \n; \n; You must now create a function which accepts a collection of integers, each integer when read in base-2 gives the bit-representation of the rock (again, 1s are mineral and 0s are worthless scalene-like rock).\n; You must return the cross-sectional area of the largest harvestable mineral from the input rock, as follows:.\n; \n; \n; The minerals only have smooth faces when sheared vertically or horizontally from the rock's cross-section\n; The mine is only concerned with harvesting isosceles triangles (such that one or two sides can be sheared)\n; If only one face of the mineral is sheared, its opposing vertex must be a point (ie.\n; the smooth face must be of odd length), and its two equal-length sides must intersect the shear face at 45° (ie.\n; those sides must cut even-diagonally).\n; \n; The harvested mineral may not contain any traces of rock\n; The mineral may lie in any orientation in the plane\n; Area should be calculated as the sum of 1s that comprise the mineral\n; Minerals must have a minimum of three measures of area to be harvested\n; If no minerals can be harvested from the rock, your function should return nil\n\n(= 10 (__ [15 15 15 15 15]))\n; 1111      1111\n; 1111      *111\n; 1111  ->  **11\n; 1111      ***1\n; 1111      ****\n\n\t\n(= 15 (__ [1 3 7 15 31]))\n; 00001      0000*\n; 00011      000**\n; 00111  ->  00***\n; 01111      0****\n; 11111      *****\n\n\t\n(= 3 (__ [3 3]))\n; 11      *1\n; 11  ->  **\n\n\t\n(= 4 (__ [7 3]))\n; 111      ***\n; 011  ->  0*1\n\n\t\n(= 6 (__ [17 22 6 14 22]))\n; 10001      10001\n; 10110      101*0\n; 00110  ->  00**0\n; 01110      0***0\n; 10110      10110\n\n\t\n(= 9 (__ [18 7 14 14 6 3]))\n; 10010      10010\n; 00111      001*0\n; 01110      01**0\n; 01110  ->  0***0\n; 00110      00**0\n; 00011      000*1\n\n\t\n(= nil (__ [21 10 21 10]))\n; 10101      10101\n; 01010      01010\n; 10101  ->  10101\n; 01010      01010\n\n\t\n(= nil (__ [0 31 0 31 0]))\n; 00000      00000\n; 11111      11111\n; 00000  ->  00000\n; 11111      11111\n; 00000      00000```"}]}],"title":"4clojure - Problem 127"},{"create-time":1614435028054,"edit-time:":1614435028054,"uid":"KPIvpcycfwy","children":[{"edit-time:":1614435028054,"uid":"csr-YXNDbrh","string":"**Title:** Recognize Playing Cards"},{"edit-time:":1614435028054,"uid":"A_VjXXOvm8T","string":"**URL:** https://www.4clojure.com/problem/128"},{"edit-time:":1614435028054,"uid":"r5BBan8Ev3H","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028054,"uid":"Lk67yMZGYsW","string":"Difficulty: Easy"},{"edit-time:":1614435028054,"uid":"Lyw9WFQOH6E","string":"Topics: strings game"}]},{"edit-time:":1614435028054,"uid":"iLqazh3eSwe","string":"**Syntax**:","children":[{"edit-time:":1614435028054,"uid":"u_Ws1AUTZ8a","string":"```clojure\n(comp ...)```"}]},{"edit-time:":1614435028054,"uid":"9AcRvjUvgX6","string":"**Problem:**","children":[{"edit-time:":1614435028054,"uid":"4UMI0icyVHP","string":"```clojure\n; A standard American deck of playing cards has four suits - spades, hearts, diamonds, and clubs - and thirteen cards in each suit.\n; Two is the lowest rank, followed by other integers up to ten; then the jack, queen, king, and ace.\n; \n; \n; It's convenient for humans to represent these cards as suit/rank pairs, such as H5 or DQ: the heart five and diamond queen respectively.\n; But these forms are not convenient for programmers, so to write a card game you need some way to parse an input string into meaningful components.\n; For purposes of determining rank, we will define the cards to be valued from 0 (the two) to 12 (the ace).\n; \n; \n; Write a function which converts (for example) the string \"SJ\" into a map of {:suit :spade, :rank 9}.\n; A ten will always be represented with the single character \"T\", rather than the two characters \"10\".\n\n(= {:suit :diamond :rank 10} (__ \"DQ\"))\n\n\t\n(= {:suit :heart :rank 3} (__ \"H5\"))\n\n\t\n(= {:suit :club :rank 12} (__ \"CA\"))\n\n\t\n(= (range 13) (map (comp :rank __ str)\n                   '[S2 S3 S4 S5 S6 S7\n                     S8 S9 ST SJ SQ SK SA]))```"}]}],"title":"4clojure - Problem 128"},{"create-time":1614435028054,"edit-time:":1614435028054,"uid":"yTWnO2Bc-98","children":[{"edit-time:":1614435028054,"uid":"T8xl-TLMZD6","string":"**Title:** Tree reparenting"},{"edit-time:":1614435028054,"uid":"XEfBH27whiN","string":"**URL:** https://www.4clojure.com/problem/130"},{"edit-time:":1614435028054,"uid":"gX-8FHOfY0L","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028054,"uid":"9_dNuty0cuM","string":"Difficulty: Hard"},{"edit-time:":1614435028054,"uid":"Qq1sZY4X3fV","string":"Topics: tree"}]},{"edit-time:":1614435028054,"uid":"QBhbuq4UrJx","string":"**Problem:**","children":[{"edit-time:":1614435028054,"uid":"a7xSZ6Lpez9","string":"```clojure\n; Every node of a tree is connected to each of its children as well as its parent.\n; One can imagine grabbing one node of a tree and dragging it up to the root position, leaving all connections intact.\n; For example, below on the left is a binary tree.\n; By pulling the \"c\" node up to the root, we obtain the tree on the right.\n; \n; \n; Note it is no longer binary as \"c\" had three connections total -- two children and one parent.\n; Each node is represented as a vector, which always has at least one element giving the name of the node as a symbol.\n; Subsequent items in the vector represent the children of the node.\n; Because the children are ordered it's important that the tree you return keeps the children of each node in order and that the old parent node, if any, is appended on the right.\n; Your function will be given two args -- the name of the node that should become the new root, and the tree to transform.\n\n(= '(n)\n   (__ 'n '(n)))\n\n\t\n(= '(a (t (e)))\n   (__ 'a '(t (e) (a))))\n\n\t\n(= '(e (t (a)))\n   (__ 'e '(a (t (e)))))\n\n\t\n(= '(a (b (c)))\n   (__ 'a '(c (b (a)))))\n\n\t\n(= '(d \n      (b\n        (c)\n        (e)\n        (a \n          (f \n            (g) \n            (h)))))\n  (__ 'd '(a\n            (b \n              (c) \n              (d) \n              (e))\n            (f \n              (g)\n              (h)))))\n\n\t\n(= '(c \n      (d) \n      (e) \n      (b\n        (f \n          (g) \n          (h))\n        (a\n          (i\n          (j\n            (k)\n            (l))\n          (m\n            (n)\n            (o))))))\n   (__ 'c '(a\n             (b\n               (c\n                 (d)\n                 (e))\n               (f\n                 (g)\n                 (h)))\n             (i\n               (j\n                 (k)\n                 (l))\n               (m\n                 (n)\n                 (o))))))```"}]}],"title":"4clojure - Problem 130"},{"create-time":1614435028054,"edit-time:":1614435028054,"uid":"s5IB3Vfld_M","children":[{"edit-time:":1614435028054,"uid":"K7-Q6HCkXhu","string":"**Title:** Sum Some Set Subsets"},{"edit-time:":1614435028054,"uid":"OgJz5CeCLxq","string":"**URL:** https://www.4clojure.com/problem/131"},{"edit-time:":1614435028054,"uid":"sysl6DrMOdb","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028054,"uid":"5WShxkOi4ce","string":"Difficulty: Medium"},{"edit-time:":1614435028054,"uid":"TgOgKUb-U1l","string":"Topics: math"}]},{"edit-time:":1614435028054,"uid":"Si8jsk32Vq7","string":"**Problem:**","children":[{"edit-time:":1614435028054,"uid":"LkT_ZgHVyU2","string":"```clojure\n; Given a variable number of sets of integers, create a function which returns true iff all of the sets have a non-empty subset with an equivalent summation.\n\n(= true  (__ #{-1 1 99} \n             #{-2 2 888}\n             #{-3 3 7777})) ; ex. all sets have a subset which sums to zero\n\n\t\n(= false (__ #{1}\n             #{2}\n             #{3}\n             #{4}))\n\n\t\n(= true  (__ #{1}))\n\n\t\n(= false (__ #{1 -3 51 9} \n             #{0} \n             #{9 2 81 33}))\n\n\t\n(= true  (__ #{1 3 5}\n             #{9 11 4}\n             #{-3 12 3}\n             #{-3 4 -2 10}))\n\n\t\n(= false (__ #{-1 -2 -3 -4 -5 -6}\n             #{1 2 3 4 5 6 7 8 9}))\n\n\t\n(= true  (__ #{1 3 5 7}\n             #{2 4 6 8}))\n\n\t\n(= true  (__ #{-1 3 -5 7 -9 11 -13 15}\n             #{1 -3 5 -7 9 -11 13 -15}\n             #{1 -1 2 -2 4 -4 8 -8}))\n\n\t\n(= true  (__ #{-10 9 -8 7 -6 5 -4 3 -2 1}\n             #{10 -9 8 -7 6 -5 4 -3 2 -1}))```"}]}],"title":"4clojure - Problem 131"},{"create-time":1614435028054,"edit-time:":1614435028054,"uid":"R4AdJoaJuoS","children":[{"edit-time:":1614435028054,"uid":"2Lw8H79kI-8","string":"**Title:** Insert between two items"},{"edit-time:":1614435028054,"uid":"Jw4wlSh5Z3n","string":"**URL:** https://www.4clojure.com/problem/132"},{"edit-time:":1614435028055,"uid":"YloKCJiTqnu","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028055,"uid":"-uzsH4O_sT2","string":"Difficulty: Medium"},{"edit-time:":1614435028055,"uid":"lc8B_ZRiAdd","string":"Topics: seqs core-functions"}]},{"edit-time:":1614435028055,"uid":"FcVwR952wQ6","string":"**Syntax**:","children":[{"edit-time:":1614435028055,"uid":"QU1tF3tPJCI","string":"```clojure\n(< ...)```"}]},{"edit-time:":1614435028055,"uid":"D69bd2Yt58p","string":"**Problem:**","children":[{"edit-time:":1614435028055,"uid":"7y5wSx3-HWV","string":"```clojure\n; Write a function that takes a two-argument predicate, a value, and a collection; and returns a new collection where the value is inserted between every two items that satisfy the predicate.\n\n(= '(1 :less 6 :less 7 4 3) (__ < :less [1 6 7 4 3]))\n\n\t\n(= '(2) (__ > :more [2]))\n\n\t\n(= [0 1 :x 2 :x 3 :x 4]  (__ #(and (pos? %) (< % %2)) :x (range 5)))\n\n\t\n(empty? (__ > :more ()))\n\n\t\n(= [0 1 :same 1 2 3 :same 5 8 13 :same 21]\n   (take 12 (->> [0 1]\n                 (iterate (fn [[a b]] [b (+ a b)]))\n                 (map first) ; fibonacci numbers\n                 (__ (fn [a b] ; both even or both odd\n                       (= (mod a 2) (mod b 2)))\n                     :same))))```"}]}],"title":"4clojure - Problem 132"},{"create-time":1614435028055,"edit-time:":1614435028055,"uid":"nYPFgEeaxwK","children":[{"edit-time:":1614435028055,"uid":"QdBmqM0cvja","string":"**Title:** A nil key"},{"edit-time:":1614435028055,"uid":"Hk479JLnfXb","string":"**URL:** https://www.4clojure.com/problem/134"},{"edit-time:":1614435028055,"uid":"esqdnj8H0lK","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028055,"uid":"bmHhFWQL4Nx","string":"Difficulty: Elementary"},{"edit-time:":1614435028055,"uid":"rTYvpb5cr2n","string":"Topics: maps"}]},{"edit-time:":1614435028055,"uid":"F1rhGry5U7E","string":"**Problem:**","children":[{"edit-time:":1614435028055,"uid":"mcgZWdzCZSk","string":"```clojure\n; Write a function which, given a key and map, returns true iff the map contains an entry with that key and its value is nil.\n\n(true?  (__ :a {:a nil :b 2}))\n\n\t\n(false? (__ :b {:a nil :b 2}))\n\n\t\n(false? (__ :c {:a nil :b 2}))```"}]}],"title":"4clojure - Problem 134"},{"create-time":1614435028055,"edit-time:":1614435028055,"uid":"lz92kKjd5T7","children":[{"edit-time:":1614435028055,"uid":"i4CUhmhB5SQ","string":"**Title:** Infix Calculator"},{"edit-time:":1614435028055,"uid":"1Pk1wLcGpoV","string":"**URL:** https://www.4clojure.com/problem/135"},{"edit-time:":1614435028055,"uid":"yWuceg6agaI","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028055,"uid":"i7uI5aWQ4nL","string":"Difficulty: Easy"},{"edit-time:":1614435028055,"uid":"RMOMGcMnU6Z","string":"Topics: higher-order-functions math"}]},{"edit-time:":1614435028055,"uid":"Y7OyLh2CNOp","string":"**Problem:**","children":[{"edit-time:":1614435028055,"uid":"8NqvDD9qjei","string":"```clojure\n; Your friend Joe is always whining about Lisps using the prefix notation for math.\n; Show him how you could easily write a function that does math using the infix notation.\n; Is your favorite language that flexible, Joe? Write a function that accepts a variable length mathematical expression consisting of numbers and the operations +, -, *, and /.\n; Assume a simple calculator that does not do precedence and instead just calculates left to right.\n\n(= 7  (__ 2 + 5))\n\n\t\n(= 42 (__ 38 + 48 - 2 / 2))\n\n\t\n(= 8  (__ 10 / 2 - 1 * 2))\n\n\t\n(= 72 (__ 20 / 2 + 2 + 4 + 8 - 6 - 10 * 9))```"}]}],"title":"4clojure - Problem 135"},{"create-time":1614435028055,"edit-time:":1614435028055,"uid":"PVxFPV3IeEZ","children":[{"edit-time:":1614435028055,"uid":"FGPtXy4eKV3","string":"**Title:** Digits and bases"},{"edit-time:":1614435028055,"uid":"g_QrNmZdeDt","string":"**URL:** https://www.4clojure.com/problem/137"},{"edit-time:":1614435028055,"uid":"VtivZ7RRwSz","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028055,"uid":"DtgNqlmVUhK","string":"Difficulty: Medium"},{"edit-time:":1614435028055,"uid":"g30LfATu3HW","string":"Topics: math"}]},{"edit-time:":1614435028055,"uid":"VTD5Pm-kv0i","string":"**Problem:**","children":[{"edit-time:":1614435028055,"uid":"J003oZwIADa","string":"```clojure\n; Write a function which returns a sequence of digits of a non-negative number (first argument) in numerical system with an arbitrary base (second argument).\n; Digits should be represented with their integer values, e.\n; g.\n; 15 would be [1 5] in base 10, [1 1 1 1] in base 2 and [15] in base 16.\n\n(= [1 2 3 4 5 0 1] (__ 1234501 10))\n\n\t\n(= [0] (__ 0 11))\n\n\t\n(= [1 0 0 1] (__ 9 2))\n\n\t\n(= [1 0] (let [n (rand-int 100000)](__ n n)))\n\n\t\n(= [16 18 5 24 15 1] (__ Integer/MAX_VALUE 42))```"}]}],"title":"4clojure - Problem 137"},{"create-time":1614435028055,"edit-time:":1614435028055,"uid":"hWZpzC3tke5","children":[{"edit-time:":1614435028055,"uid":"WxC_IYJjAy6","string":"**Title:** Squares Squared"},{"edit-time:":1614435028055,"uid":"xMQCqLliN3h","string":"**URL:** https://www.4clojure.com/problem/138"},{"edit-time:":1614435028055,"uid":"Ze3OFi8Phk6","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028055,"uid":"VczeAOCcE4Y","string":"Difficulty: Hard"},{"edit-time:":1614435028055,"uid":"1vMgll3UP6s","string":"Topics: data-juggling"}]},{"edit-time:":1614435028055,"uid":"TPWNPdma3ff","string":"**Problem:**","children":[{"edit-time:":1614435028055,"uid":"djd2-e_Md4l","string":"```clojure\n; Create a function of two integer arguments: the start and end, respectively.\n; You must create a vector of strings which renders a 45° rotated square of integers which are successive squares from the start point up to and including the end point.\n; If a number comprises multiple digits, wrap them around the shape individually.\n; If there are not enough digits to complete the shape, fill in the rest with asterisk characters.\n; The direction of the drawing should be clockwise, starting from the center of the shape and working outwards, with the initial direction being down and to the right.\n\n(= (__ 2 2) [\"2\"])\n\n\t\n(= (__ 2 4) [\" 2 \"\n             \"* 4\"\n             \" * \"])\n\n\t\n(= (__ 3 81) [\" 3 \"\n              \"1 9\"\n              \" 8 \"])\n\n\t\n(= (__ 4 20) [\" 4 \"\n              \"* 1\"\n              \" 6 \"])\n\n\t\n(= (__ 2 256) [\"  6  \"\n               \" 5 * \"\n               \"2 2 *\"\n               \" 6 4 \"\n               \"  1  \"])\n\n\t\n(= (__ 10 10000) [\"   0   \"\n                  \"  1 0  \"\n                  \" 0 1 0 \"\n                  \"* 0 0 0\"\n                  \" * 1 * \"\n                  \"  * *  \"\n                  \"   *   \"])```"}]}],"title":"4clojure - Problem 138"},{"create-time":1614435028055,"edit-time:":1614435028055,"uid":"aGIFeoKEZGW","children":[{"edit-time:":1614435028055,"uid":"eX__32aAV6-","string":"**Title:** Veitch, Please!"},{"edit-time:":1614435028055,"uid":"WwO7AnLOiDf","string":"**URL:** https://www.4clojure.com/problem/140"},{"edit-time:":1614435028055,"uid":"nu-ZeyAKJNI","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028055,"uid":"S8mRUMe4CKt","string":"Difficulty: Hard"},{"edit-time:":1614435028055,"uid":"RZmyIqmJGmJ","string":"Topics: math circuit-design"}]},{"edit-time:":1614435028055,"uid":"mO3GBSVd0CH","string":"**Problem:**","children":[{"edit-time:":1614435028055,"uid":"BY81ZEpGT9u","string":"```clojure\n; Create a function which accepts as input a boolean algebra function in the form of a set of sets, where the inner sets are collections of symbols corresponding to the input boolean variables which satisfy the function (the inputs of the inner sets are conjoint, and the sets themselves are disjoint.\n; also known as canonical minterms).\n; Note: capitalized symbols represent truth, and lower-case symbols represent negation of the inputs.\n; Your function must return the minimal function which is logically equivalent to the input.\n; \n; \n; PS — You may want to give this a read before proceeding: K-Maps\n\n(= (__ #{#{'a 'B 'C 'd}\n         #{'A 'b 'c 'd}\n         #{'A 'b 'c 'D}\n         #{'A 'b 'C 'd}\n         #{'A 'b 'C 'D}\n         #{'A 'B 'c 'd}\n         #{'A 'B 'c 'D}\n         #{'A 'B 'C 'd}})\n   #{#{'A 'c} \n     #{'A 'b}\n     #{'B 'C 'd}})\n\n\t\n(= (__ #{#{'A 'B 'C 'D}\n         #{'A 'B 'C 'd}})\n   #{#{'A 'B 'C}})\n\n\t\n(= (__ #{#{'a 'b 'c 'd}\n         #{'a 'B 'c 'd}\n         #{'a 'b 'c 'D}\n         #{'a 'B 'c 'D}\n         #{'A 'B 'C 'd}\n         #{'A 'B 'C 'D}\n         #{'A 'b 'C 'd}\n         #{'A 'b 'C 'D}})\n   #{#{'a 'c}\n     #{'A 'C}})\n\n\t\n(= (__ #{#{'a 'b 'c} \n         #{'a 'B 'c}\n         #{'a 'b 'C}\n         #{'a 'B 'C}})\n   #{#{'a}})\n\n\t\n(= (__ #{#{'a 'B 'c 'd}\n         #{'A 'B 'c 'D}\n         #{'A 'b 'C 'D}\n         #{'a 'b 'c 'D}\n         #{'a 'B 'C 'D}\n         #{'A 'B 'C 'd}})\n   #{#{'a 'B 'c 'd}\n     #{'A 'B 'c 'D}\n     #{'A 'b 'C 'D}\n     #{'a 'b 'c 'D}\n     #{'a 'B 'C 'D}\n     #{'A 'B 'C 'd}})\n\n\t\n(= (__ #{#{'a 'b 'c 'd}\n         #{'a 'B 'c 'd}\n         #{'A 'B 'c 'd}\n         #{'a 'b 'c 'D}\n         #{'a 'B 'c 'D}\n         #{'A 'B 'c 'D}})\n   #{#{'a 'c}\n     #{'B 'c}})\n\n\t\n(= (__ #{#{'a 'B 'c 'd}\n         #{'A 'B 'c 'd}\n         #{'a 'b 'c 'D}\n         #{'a 'b 'C 'D}\n         #{'A 'b 'c 'D}\n         #{'A 'b 'C 'D}\n         #{'a 'B 'C 'd}\n         #{'A 'B 'C 'd}})\n   #{#{'B 'd}\n     #{'b 'D}})\n\n\t\n(= (__ #{#{'a 'b 'c 'd}\n         #{'A 'b 'c 'd}\n         #{'a 'B 'c 'D}\n         #{'A 'B 'c 'D}\n         #{'a 'B 'C 'D}\n         #{'A 'B 'C 'D}\n         #{'a 'b 'C 'd}\n         #{'A 'b 'C 'd}})\n   #{#{'B 'D}\n     #{'b 'd}})```"}]}],"title":"4clojure - Problem 140"},{"create-time":1614435028055,"edit-time:":1614435028055,"uid":"92bJJYa9PUA","children":[{"edit-time:":1614435028055,"uid":"uofO6vqbNTF","string":"**Title:** Tricky card games"},{"edit-time:":1614435028055,"uid":"-1yPlq928Im","string":"**URL:** https://www.4clojure.com/problem/141"},{"edit-time:":1614435028055,"uid":"LGZPyDV6e_D","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028055,"uid":"rjol8F_51yz","string":"Difficulty: Medium"},{"edit-time:":1614435028055,"uid":"pP2fmaUH_oS","string":"Topics: game cards"}]},{"edit-time:":1614435028055,"uid":"JO38huO7Gja","string":"**Problem:**","children":[{"edit-time:":1614435028055,"uid":"DAPct6XqGIj","string":"```clojure\n; In trick-taking card games such as bridge, spades, or hearts, cards are played in groups known as \"tricks\" - each player plays a single card, in order; the first player is said to \"lead\" to the trick.\n; After all players have played, one card is said to have \"won\" the trick.\n; How the winner is determined will vary by game, but generally the winner is the highest card played in the suit that was led.\n; Sometimes (again varying by game), a particular suit will be designated \"trump\", meaning that its cards are more powerful than any others: if there is a trump suit, and any trumps are played, then the highest trump wins regardless of what was led.\n; \n; \n; Your goal is to devise a function that can determine which of a number of cards has won a trick.\n; You should accept a trump suit, and return a function winner.\n; Winner will be called on a sequence of cards, and should return the one which wins the trick.\n; Cards will be represented in the format returned by Problem 128, Recognize Playing Cards: a hash-map of :suit and a numeric :rank.\n; Cards with a larger rank are stronger.\n\n(let [notrump (__ nil)]\n  (and (= {:suit :club :rank 9}  (notrump [{:suit :club :rank 4}\n                                           {:suit :club :rank 9}]))\n       (= {:suit :spade :rank 2} (notrump [{:suit :spade :rank 2}\n                                           {:suit :club :rank 10}]))))\n\n\t\n(= {:suit :club :rank 10} ((__ :club) [{:suit :spade :rank 2}\n                                       {:suit :club :rank 10}]))\n\n\t\n(= {:suit :heart :rank 8}\n   ((__ :heart) [{:suit :heart :rank 6} {:suit :heart :rank 8}\n                 {:suit :diamond :rank 10} {:suit :heart :rank 4}]))```"}]}],"title":"4clojure - Problem 141"},{"create-time":1614435028055,"edit-time:":1614435028055,"uid":"_ovEh7wTpCI","children":[{"edit-time:":1614435028055,"uid":"GjDDJgcTBGv","string":"**Title:** dot product"},{"edit-time:":1614435028055,"uid":"ykmAvrBd-c3","string":"**URL:** https://www.4clojure.com/problem/143"},{"edit-time:":1614435028055,"uid":"kblGEeJykuT","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028055,"uid":"AFpYuM-d7_R","string":"Difficulty: Easy"},{"edit-time:":1614435028055,"uid":"AyYnRMD_Df6","string":"Topics: seqs math"}]},{"edit-time:":1614435028055,"uid":"L_k4mrLgG7s","string":"**Problem:**","children":[{"edit-time:":1614435028055,"uid":"vr7NtFJohi4","string":"```clojure\n; Create a function that computes the dot product of two sequences.\n; You may assume that the vectors will have the same length.\n\n(= 0 (__ [0 1 0] [1 0 0]))\n\n\t\n(= 3 (__ [1 1 1] [1 1 1]))\n\n\t\n(= 32 (__ [1 2 3] [4 5 6]))\n\n\t\n(= 256 (__ [2 5 6] [100 10 1]))```"}]}],"title":"4clojure - Problem 143"},{"create-time":1614435028055,"edit-time:":1614435028055,"uid":"wjJT8VwZ5fY","children":[{"edit-time:":1614435028055,"uid":"PL2qg-C7UvC","string":"**Title:** Oscilrate"},{"edit-time:":1614435028055,"uid":"Ow7fZqThHFU","string":"**URL:** https://www.4clojure.com/problem/144"},{"edit-time:":1614435028055,"uid":"fhovFtgHiac","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028055,"uid":"cWAXkuxeqca","string":"Difficulty: Medium"},{"edit-time:":1614435028055,"uid":"TY2hTIywk-i","string":"Topics: sequences"}]},{"edit-time:":1614435028055,"uid":"1nlDQ2uILSH","string":"**Syntax**:","children":[{"edit-time:":1614435028055,"uid":"MGg8q90mQZq","string":"```clojure\n(int ...)```"},{"edit-time:":1614435028055,"uid":"O9HX_IxxrYK","string":"```clojure\n(double ...)```"}]},{"edit-time:":1614435028055,"uid":"7tra6cFBYaH","string":"**Problem:**","children":[{"edit-time:":1614435028055,"uid":"9UCXzmnJ0zK","string":"```clojure\n; Write an oscillating iterate: a function that takes an initial value and a variable number of functions.\n; It should return a lazy sequence of the functions applied to the value in order, restarting from the first function after it hits the end.\n\n(= (take 3 (__ 3.14 int double)) [3.14 3 3.0])\n\n\t\n(= (take 5 (__ 3 #(- % 3) #(+ 5 %))) [3 0 5 2 7])\n\n\t\n(= (take 12 (__ 0 inc dec inc dec inc)) [0 1 0 1 0 1 2 1 2 1 2 3])```"}]}],"title":"4clojure - Problem 144"},{"create-time":1614435028055,"edit-time:":1614435028055,"uid":"6RvI0w64-dc","children":[{"edit-time:":1614435028055,"uid":"4mftUnGHGXZ","string":"**Title:** For the win"},{"edit-time:":1614435028055,"uid":"r-lthf4QeH1","string":"**URL:** https://www.4clojure.com/problem/145"},{"edit-time:":1614435028055,"uid":"2HSMKMCny4z","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028055,"uid":"IanbegaIbZm","string":"Difficulty: Elementary"},{"edit-time:":1614435028055,"uid":"Km8zTVU2A11","string":"Topics: core-functions seqs"}]},{"edit-time:":1614435028055,"uid":"qGwAtmGrJfu","string":"**Syntax**:","children":[{"edit-time:":1614435028055,"uid":"2h-gY7Q_JQ4","string":"```clojure\n(partition ...)```"}]},{"edit-time:":1614435028055,"uid":"Zd6UkG_Kiez","string":"**Problem:**","children":[{"edit-time:":1614435028055,"uid":"2Qv5vYot96y","string":"```clojure\n; Clojure's for macro is a tremendously versatile mechanism for producing a sequence based on some other sequence(s).\n; It can take some time to understand how to use it properly, but that investment will be paid back with clear, concise sequence-wrangling later.\n; With that in mind, read over these for expressions and try to see how each of them produces the same result.\n\n(= __ (for [x (range 40)\n            :when (= 1 (rem x 4))]\n        x))\n\n\t\n(= __ (for [x (iterate #(+ 4 %) 0)\n            :let [z (inc x)]\n            :while (< z 40)]\n        z))\n\n\t\n(= __ (for [[x y] (partition 2 (range 20))]\n        (+ x y)))```"}]}],"title":"4clojure - Problem 145"},{"create-time":1614435028055,"edit-time:":1614435028055,"uid":"g6j1mDhkBMv","children":[{"edit-time:":1614435028055,"uid":"RZFgv3-38bx","string":"**Title:** Trees into tables"},{"edit-time:":1614435028055,"uid":"jMyCI8irfWb","string":"**URL:** https://www.4clojure.com/problem/146"},{"edit-time:":1614435028055,"uid":"4N5i08opwuF","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028055,"uid":"AavzJc2Ie4u","string":"Difficulty: Easy"},{"edit-time:":1614435028055,"uid":"Gc6Ig2K8B08","string":"Topics: seqs maps"}]},{"edit-time:":1614435028055,"uid":"8cTPHWra_Ts","string":"**Problem:**","children":[{"edit-time:":1614435028055,"uid":"4Zt330M-I9P","string":"```clojure\n; Because Clojure's for macro allows you to \"walk\" over multiple sequences in a nested fashion, it is excellent for transforming all sorts of sequences.\n; If you don't want a sequence as your final output (say you want a map), you are often still best-off using for, because you can produce a sequence and feed it into a map, for example.\n; \n; \n; For this problem, your goal is to \"flatten\" a map of hashmaps.\n; Each key in your output map should be the \"path\"1 that you would have to take in the original map to get to a value, so for example {1 {2 3}} should result in {[1 2] 3}.\n; You only need to flatten one level of maps: if one of the values is a map, just leave it alone.\n; \n; \n; 1 That is, (get-in original [k1 k2]) should be the same as (get result [k1 k2])\n\n(= (__ '{a {p 1, q 2}\n         b {m 3, n 4}})\n   '{[a p] 1, [a q] 2\n     [b m] 3, [b n] 4})\n\n\t\n(= (__ '{[1] {a b c d}\n         [2] {q r s t u v w x}})\n   '{[[1] a] b, [[1] c] d,\n     [[2] q] r, [[2] s] t,\n     [[2] u] v, [[2] w] x})\n\n\t\n(= (__ '{m {1 [a b c] 3 nil}})\n   '{[m 1] [a b c], [m 3] nil})```"}]}],"title":"4clojure - Problem 146"},{"create-time":1614435028055,"edit-time:":1614435028055,"uid":"hyLNXr4FSGY","children":[{"edit-time:":1614435028055,"uid":"CRXHW0f8tXd","string":"**Title:** Pascal's Trapezoid"},{"edit-time:":1614435028055,"uid":"5iw5ODSp25x","string":"**URL:** https://www.4clojure.com/problem/147"},{"edit-time:":1614435028055,"uid":"CrkF6fq1f40","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028055,"uid":"LDW2XmYIAhp","string":"Difficulty: Easy"},{"edit-time:":1614435028055,"uid":"c7Vh3MkNYEv","string":"Topics: seqs"}]},{"edit-time:":1614435028055,"uid":"3sw8HyNV4sP","string":"**Problem:**","children":[{"edit-time:":1614435028055,"uid":"RRMjEaU2LrD","string":"```clojure\n; Write a function that, for any given input vector of numbers, returns an infinite lazy sequence of vectors, where each next one is constructed from the previous following the rules used in Pascal's Triangle.\n; For example, for [3 1 2], the next row is [3 4 3 2].\n; \n; \n; Beware of arithmetic overflow! In clojure (since version 1.\n; 3 in 2011), if you use an arithmetic operator like + and the result is too large to fit into a 64-bit integer, an exception is thrown.\n; You can use +' to indicate that you would rather overflow into Clojure's slower, arbitrary-precision bigint.\n\n(= (second (__ [2 3 2])) [2 5 5 2])\n\n\t\n(= (take 5 (__ [1])) [[1] [1 1] [1 2 1] [1 3 3 1] [1 4 6 4 1]])\n\n\t\n(= (take 2 (__ [3 1 2])) [[3 1 2] [3 4 3 2]])\n\n\t\n(= (take 100 (__ [2 4 2])) (rest (take 101 (__ [2 2]))))```"}]}],"title":"4clojure - Problem 147"},{"create-time":1614435028055,"edit-time:":1614435028055,"uid":"HO-hGOW8YBS","children":[{"edit-time:":1614435028055,"uid":"CMyYAtpEM3T","string":"**Title:** The Big Divide"},{"edit-time:":1614435028055,"uid":"d5hPVeR_ncG","string":"**URL:** https://www.4clojure.com/problem/148"},{"edit-time:":1614435028055,"uid":"5FqzCTgabL0","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028055,"uid":"xQYUVBD2uJK","string":"Difficulty: Medium"},{"edit-time:":1614435028055,"uid":"Y-0gOGvF0Ey","string":"Topics: math"}]},{"edit-time:":1614435028055,"uid":"Y9tUCW50iSL","string":"**Problem:**","children":[{"edit-time:":1614435028055,"uid":"KG5TSy6XSal","string":"```clojure\n; Write a function which calculates the sum of all natural numbers under n (first argument) which are evenly divisible by at least one of a and b (second and third argument).\n; Numbers a and b are guaranteed to be coprimes.\n; \n; \n; Note: Some test cases have a very large n, so the most obvious solution will exceed the time limit.\n\n(= 0 (__ 3 17 11))\n\n\t\n(= 23 (__ 10 3 5))\n\n\t\n(= 233168 (__ 1000 3 5))\n\n\t\n(= \"2333333316666668\" (str (__ 100000000 3 5)))\n\n\t\n(= \"110389610389889610389610\"\n  (str (__ (* 10000 10000 10000) 7 11)))\n\n\t\n(= \"1277732511922987429116\"\n  (str (__ (* 10000 10000 10000) 757 809)))\n\n\t\n(= \"4530161696788274281\"\n  (str (__ (* 10000 10000 1000) 1597 3571)))```"}]}],"title":"4clojure - Problem 148"},{"create-time":1614435028055,"edit-time:":1614435028055,"uid":"-E6ftGO0Uq1","children":[{"edit-time:":1614435028055,"uid":"gilSBtSXYyT","string":"**Title:** Palindromic Numbers"},{"edit-time:":1614435028055,"uid":"yTmvQ-c_X_J","string":"**URL:** https://www.4clojure.com/problem/150"},{"edit-time:":1614435028055,"uid":"ZERLuAHVAaL","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028055,"uid":"Z72ZMT6KdYu","string":"Difficulty: Medium"},{"edit-time:":1614435028055,"uid":"9juwH96GPCa","string":"Topics: seqs math"}]},{"edit-time:":1614435028055,"uid":"fW9iknhl23d","string":"**Problem:**","children":[{"edit-time:":1614435028055,"uid":"1lNulxAldaa","string":"```clojure\n; A palindromic number is a number that is the same when written forwards or backwards (e.\n; g.\n; , 3, 99, 14341).\n; \n; \n; Write a function which takes an integer n, as its only argument, and returns an increasing lazy sequence of all palindromic numbers that are not less than n.\n; \n; The most simple solution will exceed the time limit!\n\n(= (take 26 (__ 0))\n   [0 1 2 3 4 5 6 7 8 9 \n    11 22 33 44 55 66 77 88 99 \n    101 111 121 131 141 151 161])\n\n\t\n(= (take 16 (__ 162))\n   [171 181 191 202 \n    212 222 232 242 \n    252 262 272 282 \n    292 303 313 323])\n\n\t\n(= (take 6 (__ 1234550000))\n   [1234554321 1234664321 1234774321 \n    1234884321 1234994321 1235005321])\n\n\t\n(= (first (__ (* 111111111 111111111)))\n   (* 111111111 111111111))\n\n\t\n(= (set (take 199 (__ 0)))\n   (set (map #(first (__ %)) (range 0 10000))))\n\n\t\n(= true \n   (apply < (take 6666 (__ 9999999))))\n\n\t\n(= (nth (__ 0) 10101)\n   9102019)```"}]}],"title":"4clojure - Problem 150"},{"create-time":1614435028055,"edit-time:":1614435028055,"uid":"S3N5ksBdSRg","children":[{"edit-time:":1614435028055,"uid":"Rfngrtv_IsA","string":"**Title:** Latin Square Slicing"},{"edit-time:":1614435028055,"uid":"-oNndCyyrp7","string":"**URL:** https://www.4clojure.com/problem/152"},{"edit-time:":1614435028055,"uid":"6tMcf3JkKgR","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028055,"uid":"dejnLA2YJQ-","string":"Difficulty: Hard"},{"edit-time:":1614435028055,"uid":"CAHeIYQFTSl","string":"Topics: data-analysis math"}]},{"edit-time:":1614435028056,"uid":"67Xoo1MkGVP","string":"**Problem:**","children":[{"edit-time:":1614435028056,"uid":"ebBZeAKex2p","string":"```clojure\n; A Latin square of order n is an n x n array that contains n different elements, each occurring exactly once in each row, and exactly once in each column.\n; For example, among the following arrays only the first one forms a Latin square:.\n; \n; \n; 1\n; 2\n; 3\n; 4\n; A B C    A B C    A B C\n; B C A    B C A    B D A\n; C A B    C A C    C A B\n;  \n; \n; Let V be a vector of such vectors1 that they may differ in length2.\n; We will say that an arrangement of vectors of V in consecutive rows is an alignment (of vectors) of V if the following conditions are satisfied:.\n; \n; \n; All vectors of V are used.\n; Each row contains just one vector.\n; The order of V is preserved.\n; All vectors of maximal length are horizontally aligned each other.\n; If a vector is not of maximal length then all its elements are aligned with elements of some subvector of a vector of maximal length.\n; Let L denote a Latin square of order 2 or greater.\n; We will say that L is included in V or that V includes L iff there exists an alignment of V such that contains a subsquare that is equal to L.\n; \n; \n; For example, if V equals [[1 2 3][2 3 1 2 1][3 1 2]] then there are nine alignments of V (brackets omitted):\n; \n; 1\n; 2\n; 3\n; 4\n; 5\n; 6\n; 7\n; 8\n; 9\n; 10\n; 11\n; 12\n; 13\n; 14\n; 15\n;  \n;         1              2              3\n;  \n;       1 2 3          1 2 3          1 2 3\n;   A   2 3 1 2 1    2 3 1 2 1    2 3 1 2 1\n;       3 1 2        3 1 2        3 1 2\n;  \n;       1 2 3          1 2 3          1 2 3\n;   B   2 3 1 2 1    2 3 1 2 1    2 3 1 2 1\n;         3 1 2        3 1 2        3 1 2\n;  \n;       1 2 3          1 2 3          1 2 3\n;   C   2 3 1 2 1    2 3 1 2 1    2 3 1 2 1\n;           3 1 2        3 1 2        3 1 2\n;  \n; Alignment A1 contains Latin square [[1 2 3][2 3 1][3 1 2]], alignments A2, A3, B1, B2, B3 contain no Latin squares, and alignments C1, C2, C3 contain [[2 1][1 2]].\n; Thus in this case V includes one Latin square of order 3 and one of order 2 which is included three times.\n; \n; \n; Our aim is to implement a function which accepts a vector of vectors V as an argument, and returns a map which keys and values are integers.\n; Each key should be the order of a Latin square included in V, and its value a count of different Latin squares of that order included in V.\n; If V does not include any Latin squares an empty map should be returned.\n; In the previous example the correct output of such a function is {3 1, 2 1} and not {3 1, 2 3}.\n; \n; \n; 1 Of course, we can consider sequences instead of vectors.\n; 2 Length of a vector is the number of elements in the vector.\n\n(= (__ '[[A B C D]\n         [A C D B]\n         [B A D C]\n         [D C A B]])\n   {})\n\n\t\n(= (__ '[[A B C D E F]\n         [B C D E F A]\n         [C D E F A B]\n         [D E F A B C]\n         [E F A B C D]\n         [F A B C D E]])\n   {6 1})\n\n\t\n(= (__ '[[A B C D]\n         [B A D C]\n         [D C B A]\n         [C D A B]])\n   {4 1, 2 4})\n\n\t\n(= (__ '[[B D A C B]\n         [D A B C A]\n         [A B C A B]\n         [B C A B C]\n         [A D B C A]])\n   {3 3})\n\n\t\n(= (__ [  [2 4 6 3]\n        [3 4 6 2]\n          [6 2 4]  ])\n   {})\n\n\t\n(= (__ [[1]\n        [1 2 1 2]\n        [2 1 2 1]\n        [1 2 1 2]\n        []       ])\n   {2 2})\n\n\t\n(= (__ [[3 1 2]\n        [1 2 3 1 3 4]\n        [2 3 1 3]    ])\n   {3 1, 2 2})\n\n\t\n(= (__ [[8 6 7 3 2 5 1 4]\n        [6 8 3 7]\n        [7 3 8 6]\n        [3 7 6 8 1 4 5 2]\n              [1 8 5 2 4]\n              [8 1 2 4 5]])\n   {4 1, 3 1, 2 7})```"}]}],"title":"4clojure - Problem 152"},{"create-time":1614435028056,"edit-time:":1614435028056,"uid":"-_kSatLxAeq","children":[{"edit-time:":1614435028056,"uid":"N77NIHAEl_l","string":"**Title:** Pairwise Disjoint Sets"},{"edit-time:":1614435028056,"uid":"obWxY5aii6X","string":"**URL:** https://www.4clojure.com/problem/153"},{"edit-time:":1614435028056,"uid":"q4POZmE15Xg","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028056,"uid":"i7m3UPajGGy","string":"Difficulty: Easy"},{"edit-time:":1614435028056,"uid":"chNuH17f03w","string":"Topics: set-theory"}]},{"edit-time:":1614435028056,"uid":"UiTmCLswHKC","string":"**Syntax**:","children":[{"edit-time:":1614435028056,"uid":"_oREU6E_vn0","string":"```clojure\n(symbol ...)```"},{"edit-time:":1614435028056,"uid":"Mr_p42WRrLu","string":"```clojure\n(keyword ...)```"},{"edit-time:":1614435028056,"uid":"X7Us3ShDW0z","string":"```clojure\n(mapcat ...)```"},{"edit-time:":1614435028056,"uid":"tuoUq33s-A_","string":"```clojure\n(comment ...)```"}]},{"edit-time:":1614435028056,"uid":"EWUR_NjpF8_","string":"**Problem:**","children":[{"edit-time:":1614435028056,"uid":"WIAxLe2orqS","string":"```clojure\n; Given a set of sets, create a function which returns true if no two of those sets have any elements in common1 and false otherwise.\n; Some of the test cases are a bit tricky, so pay a little more attention to them.\n; \n; \n; 1Such sets are usually called pairwise disjoint or mutually disjoint.\n\n(= (__ #{#{\\U} #{\\s} #{\\e \\R \\E} #{\\P \\L} #{\\.}})\n   true)\n\n\t\n(= (__ #{#{:a :b :c :d :e}\n         #{:a :b :c :d}\n         #{:a :b :c}\n         #{:a :b}\n         #{:a}})\n   false)\n\n\t\n(= (__ #{#{[1 2 3] [4 5]}\n         #{[1 2] [3 4 5]}\n         #{[1] [2] 3 4 5}\n         #{1 2 [3 4] [5]}})\n   true)\n\n\t\n(= (__ #{#{'a 'b}\n         #{'c 'd 'e}\n         #{'f 'g 'h 'i}\n         #{''a ''c ''f}})\n   true)\n\n\t\n(= (__ #{#{'(:x :y :z) '(:x :y) '(:z) '()}\n         #{#{:x :y :z} #{:x :y} #{:z} #{}}\n         #{'[:x :y :z] [:x :y] [:z] [] {}}})\n   false)\n\n\t\n(= (__ #{#{(= \"true\") false}\n         #{:yes :no}\n         #{(class 1) 0}\n         #{(symbol \"true\") 'false}\n         #{(keyword \"yes\") ::no}\n         #{(class '1) (int \\0)}})\n   false)\n\n\t\n(= (__ #{#{distinct?}\n         #{#(-> %) #(-> %)}\n         #{#(-> %) #(-> %) #(-> %)}\n         #{#(-> %) #(-> %) #(-> %)}})\n   true)\n\n\t\n(= (__ #{#{(#(-> *)) + (quote mapcat) #_ nil}\n         #{'+ '* mapcat (comment mapcat)}\n         #{(do) set contains? nil?}\n         #{, , , #_, , empty?}})\n   false)```"}]}],"title":"4clojure - Problem 153"},{"create-time":1614435028056,"edit-time:":1614435028056,"uid":"Lz5VKIz9_aM","children":[{"edit-time:":1614435028056,"uid":"g3_I42yV5L4","string":"**Title:** Map Defaults"},{"edit-time:":1614435028056,"uid":"Gf4qUDFLrhm","string":"**URL:** https://www.4clojure.com/problem/156"},{"edit-time:":1614435028056,"uid":"-KrmKe9v9fd","string":"**Problem-Tags**:","children":[{"edit-time:":1614435028056,"uid":"dCj4xR0zknV","string":"Difficulty: Elementary"},{"edit-time:":1614435028056,"uid":"eegWfHWLC4H","string":"Topics: seqs"}]},{"edit-time:":1614435028056,"uid":"mdWnrSxNjXc","string":"**Problem:**","children":[{"edit-time:":1614435028056,"uid":"QZrV0YSTNoo","string":"```clojure\n; When retrieving values from a map, you can specify default values in case the key is not found:\n; \n; (= 2 (:foo {:bar 0, :baz 1} 2))\n; \n; However, what if you want the map itself to contain the default values? Write a function which takes a default value and a sequence of keys and constructs a map.\n\n(= (__ 0 [:a :b :c]) {:a 0 :b 0 :c 0})\n\n\t\n(= (__ \"x\" [1 2 3]) {1 \"x\" 2 \"x\" 3 \"x\"})\n\n\t\n(= (__ [:a :b] [:foo :bar]) {:foo [:a :b] :bar [:a :b]})```"}]}],"title":"4clojure - Problem 156"}]